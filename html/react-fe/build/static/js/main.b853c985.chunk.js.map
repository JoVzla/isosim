{"version":3,"sources":["components/Utils/ExpandedText.js","components/Utils/Properties.js","components/Utils/FieldValidator.js","components/Iso/IsoField/IsoField.js","components/Dialogs/SelectMessageDialog.js","components/Iso/ResponseSegment.js","components/Dialogs/ParseMessageDialog.js","components/Dialogs/SaveMessageDialog.js","components/Utils/NetworkSettings.js","components/Iso/MessageStructure.js","components/Navigation/SpecTree/SpecTree.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ExpandedText","props","state","show","value","closeThis","bind","valueChanged","event","this","setState","target","onClose","prevProps","prevState","snapshot","Fragment","style","borderBottom","borderColor","fontFamily","width","minHeight","maxHeight","onChange","disabled","readOnly","height","Button","size","float","fontSize","onClick","React","Component","AppProps","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","FixedField","VariableField","BitmappedField","appProps","fieldValidator","validate","field","fieldData","errors","console","log","validationFailed","Type","DataEncoding","length","FixedSize","push","Name","dataErr","match","fieldLen","MinSize","MaxSize","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","setError","toggleExpanded","selectable","selected","fieldValue","id2Value","get","Id","fieldEditable","bgColor","hasError","expandBtnLabel","defaultFieldValue","includes","Array","fill","reduce","p","c","isoMsg","set","newValue","Children","forEach","f","fieldName","currentVal","bits","from","ChangeType","Position","turnOff","i","obj","checked","errMsg","content","parentField","level","key","selectionColumnContent","align","Checkbox","type","color","positionInParent","ParentId","fieldInfo","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","id","placement","InputLabel","TextField","margin","error","helperText","ondblclick","marginRight","colSpan","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","axios","params","specId","msgId","then","res","savedMsgs","data","catch","e","errorMessage","response","closeLoadMsgDialog","map","sm","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","ResponseSegment","msgTemplate","hideResponseSegment","copyToClipboard","textAreaRef","createRef","idToField","idToValue","val","cf","collectData","current","select","document","execCommand","alert","forClipboard","Map","Value","Fields","clipboardText","currentIndex","reqData","Dialog","open","scroll","PaperComponent","aria-labelledby","maxWidth","fullWidth","disableBackdropClick","DialogTitle","cursor","dialogTitle","DialogContent","dividers","Paper","ref","opacity","position","zIndex","border","backgroundColor","DialogActions","handle","cancel","ParseMessageDialog","traceMsg","traceChanged","setTrace","SaveMessageDialog","msgName","msgNameChanged","postData","JSON","stringify","post","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","errorContent","NetworkSettings","targetServerIp","targetServerPort","mliType","serverIpChanged","serverPortChanged","mliTypeChanged","verticalAlign","label","defaultValue","MenuItem","MessageStructure","specs","spec","msg","loaded","shouldShow","showMsgTemplate","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","reqMenuVisible","selectedReqMenuItem","reqClipboardData","sendToHost","addFieldContent","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","showMenu","hideMenu","handleMenuClick","showResponseDialog","getTemplateLabel","networkSettingsChanged","hideResponse","ip","port","currentTarget","trace","fd","dsName","saveData","validationErrors","fData","status","getMessageTemplate","pSpec","pMsg","find","s","Messages","m","url","err","font","display","ButtonGroup","variation","marginTop","IconButton","aria-label","aria-controls","aria-haspopup","Menu","anchorEl","getContentAnchorEl","keepMounted","TransitionComponent","Fade","dense","SpecTree","messageClicked","parentElement","getAttribute","msgSelected","TreeItem","nodeId","sid","mid","icon","Folder","buildMessages","treeContent","Home","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","Message","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","getSpecByID","msgTemplateRef","parseInt","getCurrentSpec","marginLeft","getSpecByName","name","App","href","className","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b853c985.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n// ExpandedText shows a field value within a large field (TextArea)\r\n// and is useful when editing fields with large values\r\nexport default class ExpandedText extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {show: this.props.show, value: this.props.value};\r\n    this.closeThis = this.closeThis.bind(this);\r\n    this.valueChanged = this.valueChanged.bind(this);\r\n  }\r\n\r\n  valueChanged(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  closeThis() {\r\n    this.setState({show: true});\r\n    this.props.onClose(this.state.value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.show === false && this.props.show === true && this.state.show\r\n        === false) {\r\n      this.setState({show: true, value: this.props.value})\r\n    } else if (this.props.show === false && this.state.show\r\n        === true) {\r\n      this.setState({show: false, value: this.props.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        (this.state.show === true) ?\r\n\r\n            <React.Fragment>\r\n              <div style={{borderBottom: 'solid', borderColor: 'red'}}>\r\n\r\n        <textarea\r\n            style={{\r\n              fontFamily: \"courier new\",\r\n              width: '100%',\r\n              minHeight: '80px',\r\n              maxHeight: '200px'\r\n            }}\r\n            onChange={this.valueChanged} disabled={this.props.readOnly} value={this.state.value}/>\r\n\r\n                <div style={{height: '25px'}}>\r\n                  <Button size={\"sm\"} style={{\r\n                    float: 'right', fontSize: '10px'\r\n                  }} onClick={this.closeThis}> OK </Button>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n            :\r\n            null\r\n    );\r\n  }\r\n\r\n}","// AppProps are various URL's that are used by axios\r\nexport class AppProps {\r\n\r\n  static FixedField = \"Fixed\";\r\n  static VariableField = \"Variable\";\r\n  static BitmappedField = \"Bitmapped\";\r\n\r\n  constructor() {\r\n    //this.baseUrl = 'http://localhost:8080';\r\n    this.baseUrl = '';\r\n    this.sendMsgUrl = this.baseUrl + '/iso/v0/send';\r\n    this.loadMsgUrl = this.baseUrl + '/iso/v0/loadmsg';\r\n    this.allSpecsUrl = this.baseUrl + '/iso/v0/specs';\r\n    this.templateUrl = this.baseUrl + '/iso/v0/template';\r\n    this.parseTraceUrl = this.baseUrl + '/iso/v0/parse';\r\n    this.saveMsgUrl = this.baseUrl + '/iso/v0/save';\r\n  }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","\r\n// FieldValidator provides validation logic for field values\r\nimport {AppProps} from \"./Properties\";\r\n\r\nclass FieldValidator {\r\n\r\n  constructor(props) {\r\n    this.validate = this.validate.bind(this);\r\n  }\r\n\r\n  validate(field, fieldData, errors) {\r\n\r\n    console.log(\"validate\", field, fieldData, errors);\r\n    let validationFailed = false;\r\n\r\n    if (field.Type === AppProps.FixedField) {\r\n\r\n      if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n        if (fieldData.length !== field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n          validationFailed = true;\r\n        }\r\n      } else {\r\n        if (fieldData.length !== 2 * field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n              / 2}`);\r\n          validationFailed = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    let dataErr = false;\r\n\r\n    if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n      if (fieldData.length % 2 !== 0) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n        validationFailed = true;\r\n        dataErr = true;\r\n      }\r\n\r\n      if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n          \"^[0-9,a-f,A-F]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n        validationFailed = true;\r\n      }\r\n      if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    if (!dataErr && field.Type === AppProps.VariableField) {\r\n\r\n      let fieldLen = fieldData.length;\r\n      if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n        fieldLen = fieldData.length / 2;\r\n      }\r\n\r\n      if (field.MinSize > 0 && fieldData.length < field.MinSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size of ${fieldLen} is less than required min of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n      if (field.MaxSize > 0 && fieldData.length > field.MaxSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size  of ${fieldLen} is greater than required max of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    //TODO:: other checks like content etc\r\n    return validationFailed;\r\n\r\n  }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import React from \"react\";\r\nimport ExpandedText from '../../Utils/ExpandedText.js'\r\nimport {Button} from \"react-bootstrap\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport fieldValidator from \"../../Utils/FieldValidator\";\r\nimport {AppProps} from \"../../Utils/Properties\";\r\nimport appProps from \"../../Utils/Properties\";\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n    this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.setSelected = this.setSelected.bind(this);\r\n    this.setNewValue = this.setNewValue.bind(this);\r\n    this.showExpanded = this.showExpanded.bind(this);\r\n    this.closeExpanded = this.closeExpanded.bind(this);\r\n    this.getBgColor = this.getBgColor.bind(this);\r\n    this.setError = this.setError.bind(this);\r\n    this.toggleExpanded = this.toggleExpanded.bind(this);\r\n\r\n    //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n    //because they're mandatory fields in ISO\r\n\r\n    let initialExpandBtnLabel = '+';\r\n    this.selectable = true;\r\n    //readOnly is true when displaying a response segment\r\n    if (this.props.readOnly) {\r\n      this.selectable = false;\r\n\r\n      let selected = false;\r\n      let fieldValue = this.props.id2Value.get(this.props.field.Id)\r\n      if (fieldValue) {\r\n        selected = true;\r\n      }\r\n\r\n      this.state = {\r\n        fieldEditable: true,\r\n        bgColor: 'white',\r\n        hasError: false,\r\n        selected: selected,\r\n        id2Value: this.props.id2Value,\r\n        fieldValue: fieldValue,\r\n        expandBtnLabel: initialExpandBtnLabel,\r\n        showExpanded: false\r\n      };\r\n    } else {\r\n      let defaultFieldValue = \"\";\r\n      if ([\"Message Type\", \"MTI\", \"Bitmap\"].includes(\r\n          this.props.field.Name)) {\r\n        this.selectable = false;\r\n        let fieldEditable = true;\r\n        if (this.props.field.Name === \"Bitmap\") {\r\n          defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n          // Bitmap should not be editable\r\n          fieldEditable = false;\r\n        }\r\n\r\n        this.state = {\r\n          fieldEditable: fieldEditable,\r\n          bgColor: \"white\",\r\n          hasError: false,\r\n          selected: true,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false\r\n        };\r\n      } else {\r\n        this.state = {\r\n          fieldEditable: true,\r\n          bgColor: \"white\",\r\n          selected: false,\r\n          hasError: false,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false\r\n        };\r\n      }\r\n      this.props.isoMsg.set(this.props.field.Id, this);\r\n    }\r\n  }\r\n\r\n  getBgColor() {\r\n    if (this.state.hasError) {\r\n      return \"red\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n\r\n  }\r\n\r\n  setError(hasError) {\r\n    this.setState({hasError: hasError});\r\n  }\r\n\r\n  showExpanded() {\r\n    this.setState({showExpanded: true});\r\n  }\r\n\r\n  toggleExpanded() {\r\n    if (this.state.showExpanded) {\r\n      this.setState({showExpanded: false, expandBtnLabel: '+'});\r\n    } else {\r\n      this.setState({showExpanded: true, expandBtnLabel: '-'});\r\n    }\r\n\r\n  }\r\n\r\n  closeExpanded() {\r\n    this.setState({showExpanded: false});\r\n  }\r\n\r\n  setNewValue(newValue) {\r\n    this.setState({fieldValue: newValue, showExpanded: false});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.id2Value !== this.props.id2Value) {\r\n      this.setState({\r\n        fieldValue: this.props.id2Value.get(this.props.field.Id),\r\n        id2Value: this.props.id2Value\r\n      });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(event) {\r\n    //console.log(\"onField Update\", this.props.field);\r\n    //console.log(\r\n    //    `${this.props.field.Name}: Child field ${event.fieldName} has been updated. ChangeType: ${event.ChangeType}`);\r\n\r\n    if (this.props.field.Type === AppProps.BitmappedField) {\r\n      // get the position of the field\r\n      this.props.field.Children.forEach(f => {\r\n\r\n        if (f.Name === event.fieldName) {\r\n          let currentVal = this.state.fieldValue;\r\n          let bits = Array.from(currentVal);\r\n          //console.log(\"Changing bit \" + f.Position);\r\n          if (event.ChangeType === 'FieldSelected') {\r\n            bits[f.Position - 1] = '1';\r\n            if (f.Position > 64) {\r\n              bits[0] = '1';\r\n            }\r\n          } else if (event.ChangeType === 'FieldDeselected') {\r\n            bits[f.Position - 1] = '0';\r\n\r\n            //if all bits from 65 to 128 are off then turn bit 1 off\r\n            let turnOff = true;\r\n            for (let i = 65; i <= 128; i++) {\r\n              if (bits[i - 1] === '1') {\r\n                turnOff = false;\r\n                break;\r\n              }\r\n            }\r\n            if (turnOff) {\r\n              bits[0] = '0';\r\n            }\r\n\r\n          }\r\n          let newValue = bits.reduce((p = \"\", c) => p + c);\r\n          this.setState({fieldValue: newValue})\r\n\r\n        }\r\n      })\r\n    } else {\r\n\r\n      let obj = {fieldName: this.props.field.Name};\r\n      if (event.ChangeType === 'FieldSelected') {\r\n        //console.log(\"setting self as selected\", this.props.field.Name);\r\n        this.setState({selected: true});\r\n        obj.ChangeType = \"FieldSelected\";\r\n      } else if (event.ChangeType === 'FieldDeselected') {\r\n        this.setState({selected: false});\r\n        obj.ChangeType = \"FieldDeselected\";\r\n      } else {\r\n\r\n        //TODO:: field value has changed, it needs to be parsed and children\r\n        // have to be changed - wait for the new WASM library for ISO parsing capabilities\r\n        // on the frontend :-)\r\n\r\n      }\r\n\r\n      // for fixed and variable type field, if they have children\r\n      // the whole set of children and then let the parent know too\r\n\r\n      this.props.field.Children.forEach(c => {\r\n        if (event.ChangeType === 'FieldSelected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(true);\r\n        } else if (event.ChangeType === 'FieldDeselected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(false);\r\n        }\r\n      });\r\n\r\n      //pass on the message to the parent that I have changed\r\n      this.props.onFieldUpdate(obj);\r\n\r\n    }\r\n  }\r\n\r\n  setSelected(selected) {\r\n\r\n    this.setState({selected: selected});\r\n    this.props.field.Children.forEach(c => {\r\n      this.props.isoMsg.get(c.Id).setSelected(selected);\r\n    });\r\n\r\n  }\r\n\r\n  fieldSelectionChanged(event) {\r\n\r\n    let obj = {fieldName: this.props.field.Name};\r\n    let selected = false;\r\n    if (event.target.checked) {\r\n      obj.ChangeType = \"FieldSelected\";\r\n      selected = true;\r\n    } else {\r\n      obj.ChangeType = \"FieldDeselected\";\r\n    }\r\n\r\n    if (this.props.field.Type !== AppProps.BitmappedField) {\r\n      this.setSelected(selected);\r\n    }\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  fieldValueChanged(event) {\r\n\r\n    let errors = []\r\n    if (fieldValidator.validate(this.props.field, event.target.value, errors)) {\r\n      this.setState(\r\n          {hasError: true, errMsg: errors[0], fieldValue: event.target.value})\r\n    } else {\r\n\r\n      this.setState(\r\n          {hasError: false, errMsg: null, fieldValue: event.target.value});\r\n      let obj = {\r\n        fieldName: this.props.field.Name,\r\n        ChangeType: \"ValueChanged\"\r\n      };\r\n      this.props.onFieldUpdate(obj)\r\n    }\r\n\r\n  }\r\n\r\n  appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n    let key = field.Id;\r\n    if (this.props.readOnly) {\r\n      key = 'response_seg_' + field.Id;\r\n    }\r\n    content.push(<IsoField key={key} field={field} id2Value={id2Value}\r\n                           readOnly={this.props.readOnly}\r\n                           parentField={parentField} isoMsg={this.props.isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionColumnContent;\r\n\r\n    if (this.selectable) {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    } else {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         disabled={true}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    }\r\n\r\n    let fieldSpecColumnContent;\r\n    let positionInParent = \"\";\r\n    if (this.props.field.ParentId > 0) {\r\n      positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n    }\r\n\r\n    let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type\r\n        + ' / ';\r\n    if (this.props.field.Type === AppProps.FixedField) {\r\n      fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / '\r\n          + 'Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.VariableField) {\r\n      fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize\r\n          + ' / ' + 'Length Encoding: ' + this.props.field.LengthEncoding\r\n          + ' / ' + 'Data Encoding: ' + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.BitmappedField) {\r\n    }\r\n\r\n    let children = [];\r\n\r\n    this.props.field.Children.forEach(\r\n        c => this.appendFieldContent(children, c, this.props.field,\r\n            this.state.id2Value, this.props.level + 1));\r\n\r\n    let levelIndicator = \"\";\r\n    for (let i = 0; i < this.props.level; i++) {\r\n      levelIndicator += '\\u2193';\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n          <tr>\r\n            {/* selection column */}\r\n            {selectionColumnContent}\r\n\r\n            {/* field name column*/}\r\n\r\n            <OverlayTrigger overlay={(\r\n                <Tooltip id=\"hi\"\r\n                         style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                            placement=\"top\">\r\n              <td style={{\r\n                width: \"100px\",\r\n                fontFamily: \"lato-regular\",\r\n                fontSize: \"14px\"\r\n              }}>\r\n                <InputLabel>{levelIndicator + ' '\r\n                + this.props.field.Name}</InputLabel>\r\n              </td>\r\n            </OverlayTrigger>\r\n\r\n            {/* field specification column */}\r\n            {/*fieldSpecColumnContent*/}\r\n\r\n            {/* field value column */}\r\n            <td>\r\n\r\n              <TextField margin={\"dense\"} size={\"small\"}\r\n                         value={this.state.fieldValue}\r\n                         error={this.state.hasError}\r\n                         helperText={this.state.errMsg}\r\n                         onChange={this.fieldValueChanged}\r\n                         style={{width: \"70%\"}}\r\n                         disabled={this.props.readOnly\r\n                         || !this.state.fieldEditable}\r\n                         key={this.props.key}\r\n                         ondblclick={this.showExpanded}\r\n              />\r\n\r\n              <Button size={\"sm\"} style={{\r\n                float: 'right',\r\n                fontSize: '10px',\r\n                marginRight: '10px'\r\n              }}\r\n                      onClick={this.toggleExpanded}> {this.state.expandBtnLabel} </Button>{' '}\r\n\r\n            </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"3\">\r\n              <ExpandedText show={this.state.showExpanded}\r\n                            value={this.state.fieldValue}\r\n                            readOnly={this.props.readOnly}\r\n                            onClose={this.setNewValue}/>\r\n            </td>\r\n          </tr>\r\n          {children}\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, selectedMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n  }\r\n\r\n  selectedMsgChanged(event) {\r\n    this.setState({selectedMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.props.specId,\r\n          msgId: this.props.msgId,\r\n        }\r\n      }).then(res => {\r\n       // console.log(res);\r\n        this.setState(\r\n            {savedMsgs: res.data, selectedMsg: res.data[0], show: true});\r\n\r\n      }).catch(e => {\r\n            //FIXME\r\n            console.log(e);\r\n            this.setState({show: true, errorMessage: e.response.data});\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.closeLoadMsgDialog(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Saved\r\n                Message </label>{'  '}\r\n              <select style={{fontFamily: \"lato-regular\", width: \"200px\"}}\r\n                      value={this.state.selectedMsg}\r\n                      onChange={this.selectedMsgChanged}>\r\n                {this.state.savedMsgs.map((sm) => {\r\n                  return <option key={sm} value={sm}>{sm}</option>\r\n                })\r\n                }\r\n              </select>\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Load Saved Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField/IsoField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Draggable from \"react-draggable\";\r\n\r\n// ResponseSegment displays the response to an ISO message\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      data: this.props.data,\r\n      msgTemplate: this.props.msgTemplate\r\n    }\r\n    this.hideResponseSegment = this.hideResponseSegment.bind(this);\r\n    this.copyToClipboard = this.copyToClipboard.bind(this);\r\n\r\n    this.textAreaRef = React.createRef();\r\n  }\r\n\r\n  appendFieldContent(content, field, idToField, level) {\r\n    content.push(<IsoField key={'response_seg_' + field.Id} field={field}\r\n                           id2Value={idToField}\r\n                           readOnly={true} level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n    return \"\"\r\n  }\r\n\r\n  hideResponseSegment() {\r\n    this.setState({show: false});\r\n    this.props.onClose();\r\n  }\r\n\r\n  collectData(field, idToValue, content) {\r\n    if (idToValue.get(field.Id)) {\r\n      let val = idToValue.get(field.Id);\r\n      content.push(`${field.Name}: ${val}`);\r\n    }\r\n    if (field.Children.length > 0) {\r\n      field.Children.forEach(cf => {\r\n        this.collectData(cf, idToValue, content)\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if (prevProps.show === false && this.props.show === true) {\r\n      this.setState({\r\n        show: true,\r\n        data: this.props.data,\r\n        msgTemplate: this.props.msgTemplate\r\n      })\r\n    }\r\n  }\r\n\r\n  copyToClipboard() {\r\n    this.textAreaRef.current.select();\r\n    if (!document.execCommand('copy')) {\r\n      alert('Failed to copy to clipboard!')\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    let forClipboard = [];\r\n    if (this.state.show) {\r\n\r\n      let idToField = new Map();\r\n      this.state.data.forEach(f => {\r\n        idToField.set(f.Id, f.Value);\r\n      });\r\n\r\n      this.state.msgTemplate.Fields.forEach(field => {\r\n        this.collectData(field, idToField, forClipboard)\r\n      });\r\n      let clipboardText = \"ISO Response  \\n|---------------|\\n\"\r\n          + forClipboard.reduce((p, c, currentIndex) => {\r\n            if (currentIndex === 1) {\r\n              return p + \"\\n\" + c + \"\\n\";\r\n            } else {\r\n              return p + c + \"\\n\";\r\n            }\r\n          })\r\n\r\n      clipboardText = \"ISO Request  \\n|---------------|\\n\"\r\n          + this.props.reqData + \"\\n\\n\" + clipboardText + \"\\n\\n\";\r\n\r\n      this.state.msgTemplate.Fields.forEach(field => {\r\n        this.appendFieldContent(content, field, idToField, 0)\r\n      });\r\n\r\n      //console.log(content);\r\n\r\n      return (\r\n          <React.Fragment>\r\n\r\n\r\n            {this.state.show ?\r\n                <Dialog open={this.state.show}\r\n                        onClose={this.hideResponseSegment} scroll={\"paper\"}\r\n                        PaperComponent={PaperComponent}\r\n                        aria-labelledby=\"draggable-dialog-title\"\r\n                        maxWidth={\"sm\"} fullWidth={true}\r\n                        disableBackdropClick={true}>\r\n                  <DialogTitle style={{cursor: 'move'}}\r\n                               id=\"draggable-dialog-title\">{this.props.dialogTitle}</DialogTitle>\r\n                  <DialogContent dividers={true}>\r\n\r\n                    <Paper>\r\n<textarea ref={this.textAreaRef}\r\n          style={{\r\n            opacity: \"0.01\",\r\n            position: \"absolute\",\r\n            zIndex: -9999,\r\n            height: 0\r\n          }}>{clipboardText}\r\n                  </textarea>\r\n\r\n                      <table border=\"0\" align={\"center\"}>\r\n                        <thead>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#eed143\",\r\n                          fontSize: \"15px\",\r\n                          align: \"center\",\r\n                          borderBottom: 'solid',\r\n                          borderColor: 'blue'\r\n                        }}>\r\n                          <td colSpan=\"3\"\r\n                              align={\"center\"}>{\"Response Segment\"}</td>\r\n                        </tr>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#3effba\",\r\n                          fontSize: \"14px\",\r\n                        }}>\r\n                          <td align={\"center\"}>Selection</td>\r\n                          <td align={\"center\"} style={{width: \"35%\"}}>Field</td>\r\n                          <td align={\"center\"} style={{width: \"50%\"}}>Field Data\r\n                          </td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {content}\r\n                        </tbody>\r\n                      </table>\r\n                    </Paper>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={this.copyToClipboard} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Copy To Clipboard\r\n                    </Button>\r\n                    <Button onClick={this.hideResponseSegment} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Close\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n          </React.Fragment>);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n      <Draggable handle=\"#draggable-dialog-title\"\r\n                 cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n        <Paper {...props} />\r\n      </Draggable>\r\n  );\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, traceMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.traceChanged = this.traceChanged.bind(this);\r\n  }\r\n\r\n  traceChanged(event) {\r\n    this.setState({traceMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true, traceMsg: ''});\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.setTrace(this.state.traceMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.setTrace(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label\r\n                  style={{fontFamily: \"lato-regular\"}}> Trace </label>{'  '}\r\n\r\n              <textarea key={\"trace_input\"} value={this.state.traceMsg}\r\n                        onChange={this.traceChanged}\r\n                        style={{fontFamily: \"courier new\", width: '100%'}}/>\r\n\r\n\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Parse Trace</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, msgName: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.msgNameChanged = this.msgNameChanged.bind(this);\r\n  }\r\n\r\n  msgNameChanged(event) {\r\n    this.setState({errorMessage: '', msgName: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      this.setState(\r\n          {show: true, msgName: this.props.msgName});\r\n\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n\r\n    if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n      this.setState({errorMessage: 'Please specify a message!'});\r\n      return;\r\n    }\r\n\r\n    let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n        + '&dataSetName=' + this.state.msgName + '&msg=' + JSON.stringify(\r\n            this.props.data);\r\n   // console.log(postData);\r\n    axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n      console.log(res);\r\n      this.props.msgSaveSuccess(this.state.msgName);\r\n      this.setState({show: false});\r\n\r\n    }).catch(e => {\r\n          this.props.msgSaveFailed(e);\r\n          this.setState({show: false});\r\n        }\r\n    );\r\n\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.props.msgSaveCancelled();\r\n    this.setState({show: false});\r\n  }\r\n\r\n  render() {\r\n\r\n    let content, errorContent;\r\n\r\n    if (this.state.show) {\r\n\r\n      console.log(\"before sending\", this.props);\r\n\r\n      if (this.state.errorMessage) {\r\n        errorContent =\r\n            <div style={{color: 'red'}}>{this.state.errorMessage}</div>\r\n      }\r\n\r\n      if (!this.props.msgId || !this.props.specId) {\r\n        content =\r\n            <div>{\"Error: Please load a spec/msg, set data before attempting to save\"}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Message\r\n                Name </label>{'  '}\r\n              <input type={\"text\"} key={\"msg_name_save\"}\r\n                     value={this.state.msgName} onChange={this.msgNameChanged}/>\r\n              {errorContent}\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Save Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n// NetworkSettings is a component that manages the ip, port and MLI type\r\n// used when sending a message\r\nclass NetworkSettings extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      targetServerIp: \"127.0.0.1\",\r\n      targetServerPort: \"6666\",\r\n      mliType: \"2i\"\r\n    }\r\n\r\n    this.serverIpChanged = this.serverIpChanged.bind(this);\r\n    this.serverPortChanged = this.serverPortChanged.bind(this);\r\n    this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n\r\n  }\r\n\r\n  mliTypeChanged(e) {\r\n    this.setState({mliType: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, this.state.targetServerPort,\r\n        e.target.value)\r\n  }\r\n\r\n  serverIpChanged(e) {\r\n    this.setState({targetServerIp: e.target.value});\r\n    this.props.onChange(e.target.value, this.state.targetServerPort,\r\n        this.state.mliType)\r\n  }\r\n\r\n  serverPortChanged(e) {\r\n    this.setState({targetServerPort: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, e.target.value,\r\n        this.state.mliType)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div align={\"left\"}\r\n             style={{\r\n               align: 'left',\r\n               height: \"80px\",\r\n               verticalAlign: \"baseline\",\r\n               margin: \"10px\"\r\n             }}>\r\n\r\n\r\n          <table\r\n              style={{\r\n                fontFamily: 'lato-regular',\r\n                fontSize: '14px'\r\n              }}>\r\n            <tr>\r\n              <td>\r\n                <TextField id=\"outlined-basic\" label=\"IP\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"127.0.0.1\"}\r\n                           onChange={this.serverIpChanged}/>\r\n              </td>\r\n              <td>\r\n\r\n                <TextField id=\"outlined-basic\" label=\"Port\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"6666\"}\r\n                           onChange={this.serverPortChanged}/>\r\n              </td>\r\n\r\n              <td>\r\n                <TextField select size={\"small\"}\r\n                    value={this.state.mliType} variant={\"outlined\"} label={\"MLI\"}\r\n                    onChange={this.mliTypeChanged}>\r\n                  <MenuItem value={\"2i\"}>2I</MenuItem>\r\n                  <MenuItem value={\"2e\"}>2E</MenuItem>\r\n                </TextField>\r\n\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkSettings","import React from 'react';\r\nimport axios from \"axios\";\r\n//import axios from 'axios'\r\nimport IsoField from './IsoField/IsoField.js'\r\nimport SelectMessageDialog from '../Dialogs/SelectMessageDialog.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {Modal} from 'react-bootstrap';\r\nimport appProps from '../Utils/Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"../Dialogs/ParseMessageDialog\";\r\nimport SaveMessageDialog from \"../Dialogs/SaveMessageDialog\";\r\nimport fieldValidator from '../Utils/FieldValidator'\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\n\r\nimport 'typeface-roboto';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NetworkSettings from \"../Utils/NetworkSettings\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\n// MessageStructure is the central component that encompasses the Request and\r\n// the response segments along with NetworkSettings etc\r\nexport default class MessageStructure extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    console.log(\"$msg_structure$\", this.props.specs, this.props.spec,\r\n        this.props.msg);\r\n\r\n    this.state = {\r\n      msgTemplate: null,\r\n      loaded: false,\r\n      spec: props.spec,\r\n      msg: props.msg,\r\n      shouldShow: props.showMsgTemplate,\r\n      targetServerIp: '127.0.0.1',\r\n      targetServerPort: '6666',\r\n      mliType: \"2I\",\r\n      currentDataSet: '',\r\n      errDialogVisible: false,\r\n      errorMessage: '',\r\n      showLoadMessagesDialog: false,\r\n      showTraceInputDialog: false,\r\n      showSaveMsgDialog: false,\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqMenuVisible: false,\r\n      selectedReqMenuItem: null,\r\n      reqClipboardData: null\r\n    };\r\n\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.sendToHost = this.sendToHost.bind(this);\r\n    this.addFieldContent = this.addFieldContent.bind(this);\r\n    this.showErrorDialog = this.showErrorDialog.bind(this);\r\n    this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n    this.processError = this.processError.bind(this);\r\n    this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n    this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n    this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n    this.setTrace = this.setTrace.bind(this);\r\n    this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n    this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n    this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n    this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n    this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n    this.showInfoDialog = this.showInfoDialog.bind(this);\r\n\r\n    this.showMenu = this.showMenu.bind(this);\r\n    this.hideMenu = this.hideMenu.bind(this);\r\n    this.handleMenuClick = this.handleMenuClick.bind(this);\r\n\r\n    this.showResponseDialog = this.showResponseDialog.bind(this);\r\n    this.getTemplateLabel = this.getTemplateLabel.bind(this);\r\n    this.networkSettingsChanged = this.networkSettingsChanged.bind(this);\r\n    this.hideResponse=this.hideResponse.bind(this);\r\n\r\n  }\r\n\r\n  networkSettingsChanged(ip, port, mliType) {\r\n    this.setState(\r\n        {targetServerIp: ip, targetServerPort: port, mliType: mliType})\r\n  }\r\n\r\n  showMenu(event) {\r\n\r\n    this.setState({\r\n      selectedReqMenuItem: event.currentTarget,\r\n      reqMenuVisible: true\r\n    })\r\n\r\n  }\r\n\r\n  hideMenu() {\r\n    this.setState({reqMenuVisible: false})\r\n    this.setState({selectedReqMenuItem: null})\r\n  }\r\n\r\n  showResponseDialog() {\r\n    this.hideMenu()\r\n    this.setState({showResponse: true})\r\n  }\r\n\r\n  hideResponse() {\r\n    this.setState({showResponse: false})\r\n\r\n  }\r\n\r\n\r\n  handleMenuClick(event) {\r\n    alert(event.currentTarget)\r\n\r\n    this.setState({selectedReqMenuItem: event.currentTarget})\r\n    this.hideMenu()\r\n  }\r\n\r\n  // Receives the trace as a callback from ParseMessageDialog component\r\n  setTrace(trace) {\r\n    if (trace != null) {\r\n      //console.log(\"trace  = \", trace);\r\n      // now parse this via a API call\r\n\r\n      axios.post(appProps.parseTraceUrl + '/' + this.state.spec.Id + '/'\r\n          + this.state.msg.Id, trace).then(res => {\r\n            console.log(\"parsed msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n\r\n    }\r\n    this.setState({showTraceInputDialog: false})\r\n  }\r\n\r\n  showUnImplementedError() {\r\n    this.setState({\r\n      errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n      errDialogVisible: true\r\n    })\r\n  }\r\n\r\n  closeLoadMsgDialog(selectedMsg) {\r\n    this.setState({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n    //console.log(\"selected msg = \", selectedMsg);\r\n\r\n    if (selectedMsg != null) {\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.state.spec.Id,\r\n          msgId: this.state.msg.Id,\r\n          dsName: selectedMsg\r\n        }\r\n      }).then(res => {\r\n            //console.log(\"saved msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  showInfoDialog(msg) {\r\n    this.setState({errDialogVisible: true, errorMessage: msg})\r\n  }\r\n\r\n  msgSaveSuccess(msgName) {\r\n    this.showInfoDialog(`Message ${msgName} saved successfully.`);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveFailed(e) {\r\n    this.processError(e);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveCancelled() {\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  showSaveMsgDialog() {\r\n\r\n    // build the data and then\r\n    let content = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content);\r\n    });\r\n    this.setState({saveData: content, showSaveMsgDialog: true})\r\n  }\r\n\r\n  showTraceInputsDialog() {\r\n    this.hideMenu()\r\n    this.setState({showTraceInputDialog: true})\r\n\r\n  }\r\n\r\n  showLoadMessagesDialog() {\r\n    this.hideMenu()\r\n    this.setState({showLoadMessagesDialog: true})\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  addFieldContent(field, content, validationErrors) {\r\n\r\n    let fData = this.state.isoMsg.get(field.Id);\r\n    if (fData.state.selected) {\r\n      if (fieldValidator.validate(field, fData.state.fieldValue,\r\n          validationErrors)) {\r\n        fData.setError(true);\r\n      } else {\r\n        fData.setError(false);\r\n      }\r\n      content.push(\r\n          {Id: field.Id, Name: field.Name, Value: fData.state.fieldValue});\r\n    }\r\n\r\n    field.Children.forEach(cf => {\r\n      if (fData.state.selected) {\r\n        this.addFieldContent(cf, content, validationErrors);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  //sends the message (as JSON) to the API server to be sent to the ISO host\r\n  sendToHost() {\r\n\r\n    this.hideMenu()\r\n    let content = [];\r\n    let validationErrors = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content, validationErrors);\r\n    });\r\n    //console.log(\"After gathering data = \", content, validationErrors);\r\n\r\n    if (validationErrors.length > 0) {\r\n      let errMsg = \"\";\r\n      validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n      this.setState({errorMessage: errMsg});\r\n      this.showErrorDialog();\r\n      return\r\n    }\r\n\r\n    console.log(content)\r\n    let reqClipboardData = content.reduce((p, c, currentIndex) => {\r\n\r\n      if (currentIndex === 1) {\r\n        return p.Name + \":\" + p.Value + \"\\n\" + c.Name + \":\" + c.Value + \"\\n\";\r\n      }\r\n      return p + c.Name + ':' + c.Value + \"\\n\";\r\n\r\n    });\r\n\r\n    //alert(reqClipboardData)\r\n\r\n    //lets not hide and then show the response segment again\r\n    this.setState({\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqClipboardData: reqClipboardData\r\n    });\r\n\r\n    let postData = 'host=' +\r\n        this.state.targetServerIp + \"&port=\" + this.state.targetServerPort\r\n        + '&mli=' + this.state.mliType\r\n        + '&specId=' + this.state.spec.Id + '&msgId='\r\n        + this.state.msg.Id + \"&msg=\" + JSON.stringify(content);\r\n    console.log(postData)\r\n    axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n      console.log(\"Response from server\", res);\r\n      this.setState({showResponse: true, responseData: res.data});\r\n\r\n    }).catch(\r\n        e => {\r\n          console.log(\"error = \", e);\r\n          this.processError(e)\r\n        })\r\n\r\n  }\r\n\r\n  processError(e) {\r\n\r\n    if (!e.response) {\r\n      console.log(e);\r\n      this.setState({\r\n        errorMessage: 'Error: Unable to reach API server',\r\n        errDialogVisible: true\r\n      });\r\n      return\r\n    }\r\n\r\n    if (e.response.status === 400) {\r\n      this.setState(\r\n          {errorMessage: e.response.data, errDialogVisible: true});\r\n    } else {\r\n      this.setState(\r\n          {\r\n            errorMessage: 'Unexpected error from server - '\r\n                + e.response.status, errDialogVisible: true\r\n          });\r\n    }\r\n  }\r\n\r\n  getTemplateLabel() {\r\n    //alert(this.state.spec + \"// \" + this.state.msg)\r\n    return this.state.spec.Name + \" // \" + this.state.msg.Name;\r\n  }\r\n\r\n  onFieldUpdate(e) {\r\n    //console.log(\"field updated =>\" + e.fieldName)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMessageTemplate(this.props.spec, this.props.msg)\r\n  }\r\n\r\n  getMessageTemplate(pSpec, pMsg) {\r\n    let spec = this.props.specs.find(s => {\r\n      if (s.Name === pSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n    let msg = spec.Messages.find(m => {\r\n      if (m.Name === pMsg) {\r\n        return m;\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    let url = appProps.templateUrl + '/' + spec.Id + \"/\" + msg.Id;\r\n    console.log(url);\r\n    axios.get(url).then(\r\n        res => {\r\n          console.log(res.data);\r\n          let isoMsg = new Map();\r\n          isoMsg.set(\"msg_template\", res.data);\r\n          this.setState(\r\n              {\r\n                spec: spec,\r\n                msg: msg,\r\n                msgTemplate: res.data,\r\n                loaded: true,\r\n                isoMsg: isoMsg\r\n              });\r\n\r\n          console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(\r\n        err => this.setState({errorMessage: err, errDialogVisible: true}))\r\n  }\r\n\r\n  appendFieldContent(content, field, isoMsg, level) {\r\n    content.push(<IsoField key={field.Id} field={field} isoMsg={isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.loaded === true) {\r\n      this.state.msgTemplate.Fields.map(field => {\r\n        this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n      })\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{\r\n          fontFamily: 'lato-regular',\r\n          fontSize: '12px',\r\n          fill: 'aqua'\r\n        }}>\r\n\r\n          <Modal show={this.state.errDialogVisible}\r\n                 onHide={this.closeErrorDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body><pre style={{\r\n              font: \"Lato\",\r\n              fontSize: \"14px\"\r\n            }}>{this.state.errorMessage}</pre>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                               specId={this.state.spec.Id}\r\n                               msgId={this.state.msg.Id}\r\n                               closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n          <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                              setTrace={this.setTrace}/>\r\n\r\n          <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                             msgId={this.state.msg.Id}\r\n                             specId={this.state.spec.Id}\r\n                             data={this.state.saveData}\r\n                             msgName={this.state.currentDataSet}\r\n                             msgSaveSuccess={this.msgSaveSuccess}\r\n                             msgSaveFailed={this.msgSaveFailed}\r\n                             msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n          <NetworkSettings onChange={this.networkSettingsChanged}/>\r\n\r\n\r\n          <div align={\"left\"}\r\n               style={{\r\n                 align: \"left\",\r\n                 display: \"inline-block\",\r\n                 width: \"40%\",\r\n                 float: \"left\",\r\n                 fill: 'aqua'\r\n               }}>\r\n\r\n            <div>\r\n\r\n              <ButtonGroup size={\"small\"} color={\"primary\"} fullWidth={true}\r\n                           variant={\"contained\"}>\r\n                <Button\r\n                    onClick={this.showTraceInputsDialog}>Parse</Button>\r\n                <Button\r\n                    onClick={this.showLoadMessagesDialog}>Load</Button>\r\n                <Button\r\n                    onClick={this.showSaveMsgDialog}>Save</Button>\r\n                <Button onClick={this.sendToHost}>Send</Button>\r\n                <Button onClick={this.showResponseDialog}\r\n                        disabled={this.state.responseData == null}>Show\r\n                  Response</Button>\r\n              </ButtonGroup>\r\n\r\n            </div>\r\n\r\n            {/*TODO:: pull this into a separate component*/}\r\n            <Paper variation={\"outlined\"} style={{verticalAlign: \"middle\"}}>\r\n              <table border=\"0\" align={\"center\"}\r\n                     style={{align: \"center\", marginTop: \"10px\", width: \"70%\"}}>\r\n                <thead>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"15px\",\r\n                  borderBottom: 'solid',\r\n                  borderColor: 'blue'\r\n                }}>\r\n                  <td colSpan=\"3\" align={\"center\"}>\r\n\r\n                    <div style={{display: \"inline-block\", float: \"left\"}}>\r\n                      <IconButton\r\n                          aria-label=\"more\"\r\n                          aria-controls=\"long-menu\"\r\n                          aria-haspopup=\"true\"\r\n                          onClick={this.showMenu}\r\n                      >\r\n                        <MoreVert/>\r\n                      </IconButton>\r\n\r\n                      <Menu\r\n                          id=\"fade-menu\"\r\n                          anchorEl={this.state.selectedReqMenuItem}\r\n                          getContentAnchorEl={null}\r\n                          keepMounted\r\n                          open={this.state.reqMenuVisible}\r\n                          onClose={this.hideMenu}\r\n                          TransitionComponent={Fade}\r\n                      >\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showTraceInputsDialog}>Parse</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showLoadMessagesDialog}>Load\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showSaveMsgDialog}>Save\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true} onClick={this.sendToHost}>Send\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showResponseDialog}>Show\r\n                          Response</MenuItem>\r\n                      </Menu>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{display: \"inline-block\"}}>{this.getTemplateLabel()}</div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                  <td align={\"center\"}>Selection</td>\r\n                  <td align={\"center\"} style={{width: '35%'}}> Field</td>\r\n                  <td align={\"center\"} style={{width: '70%'}}>Field Data\r\n                  </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {content}\r\n                </tbody>\r\n              </table>\r\n            </Paper>\r\n\r\n            {/*<div style={{float: \"right\"}}>*/}\r\n            <ResponseSegment show={this.state.showResponse}\r\n                             reqData={this.state.reqClipboardData}\r\n                             onClose={this.hideResponse}\r\n                             data={this.state.responseData}\r\n                             dialogTitle={\"Response - [\"\r\n                             + this.getTemplateLabel() + \"]\"}\r\n                             msgTemplate={this.state.msgTemplate}/>\r\n\r\n          </div>\r\n\r\n\r\n          <div style={{height: \"10px\"}}>{' '}</div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n","import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport appProps from \"../../Utils/Properties\";\r\nimport {Folder, Home, Message} from \"@material-ui/icons\"\r\n\r\n// SpecTree displays a tree of all the available specifications and the messages\r\n// defined under the spec\r\nclass SpecTree extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      specs: [],\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.messageClicked = this.messageClicked.bind(this);\r\n  }\r\n\r\n  messageClicked(event) {\r\n    // FIXME:: This is a hack! There needs to be a better way like onSelect\r\n    let specId = event.target.parentElement.parentElement.getAttribute(\"sid\");\r\n    let msgId = event.target.parentElement.parentElement.getAttribute(\"mid\");\r\n\r\n    this.props.msgSelected(specId, msgId);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  buildMessages(spec) {\r\n    let content = []\r\n    spec.Messages.forEach(m => {\r\n      content.push(<TreeItem nodeId={\"nodeId_\" + spec.Id + \"_\" + m.Id}\r\n                             sid={spec.Id} mid={m.Id}\r\n                             label={m.Name}\r\n                             onClick={this.messageClicked}/>)\r\n    });\r\n    return content\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.loaded === true) {\r\n\r\n      let content = [];\r\n      this.state.specs.forEach(s => {\r\n\r\n        content.push(<TreeItem align=\"left\" nodeId={\"nodeId_\" + s.Id}\r\n                               icon={<Folder color={\"primary\"}/>}\r\n                               label={s.Name}>{this.buildMessages(\r\n            s)}</TreeItem>);\r\n\r\n      });\r\n\r\n      let treeContent = <TreeItem nodeId={\"nodeId_0\"}\r\n                                  icon={<Home color={\"primary\"}/>}\r\n                                  label={\"ISO8583 Specifications\"}>{content}</TreeItem>;\r\n\r\n      return (<React.Fragment>\r\n            <TreeView\r\n                defaultExpanded={['nodeId_0']}\r\n                defaultCollapseIcon={<ExpandMoreIcon/>}\r\n                defaultExpandIcon={<ChevronRightIcon/>}\r\n                defaultParentIcon={<Folder color={\"primary\"}/>}\r\n                defaultEndIcon={<Message color=\"primary\"/>}\r\n            >\r\n              {treeContent}\r\n            </TreeView>\r\n\r\n\r\n          </React.Fragment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default SpecTree;","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from '../Iso/MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport SpecTree from \"./SpecTree/SpecTree\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgSelected = this.msgSelected.bind(this);\r\n    this.getSpecByID = this.getSpecByID.bind(this);\r\n\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  msgSelected(specId, msgId) {\r\n\r\n    console.log(specId, msgId)\r\n    console.log(this.state.specs)\r\n    let spec = this.getSpecByID(parseInt(specId))\r\n    console.log(\"spec = \", spec)\r\n    let msg = null;\r\n    spec.Messages.forEach(m => {\r\n      if (m.Id === parseInt(msgId)) {\r\n        msg = m;\r\n      }\r\n    })\r\n\r\n    this.setState(\r\n        {loaded: true, currentSpec: spec.Name, currentSpecMsg: msg.Name});\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n          <div>\r\n            <Modal show={this.state.errDialogVisible}\r\n                   onHide={this.closeErrorDialog}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <div style={{\r\n              float: \"left\",\r\n              display: \"inline-block\",\r\n              marginRight: \"20px\",\r\n              marginLeft: \"20px\",\r\n              backgroundColor:'#fbfff0'\r\n\r\n            }}>\r\n              <SpecTree msgSelected={this.msgSelected}/>\r\n            </div>\r\n            <div align=\"center\" style={{backgroundColor:'#fbfff0'}}>\r\n              {\r\n                this.state.loaded && this.state.currentSpec !== \"Select\" ?\r\n                    <MessageStructure key={this.state.currentSpec + \"_\" + msg}\r\n                                      ref={this.msgTemplateRef}\r\n                                      specs={this.state.specs}\r\n                                      spec={this.state.currentSpec}\r\n                                      msg={this.state.currentSpecMsg}/>\r\n                    : null\r\n              }\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value,\r\n      currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n      let spec = this.getSpecByName(event.target.value);\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (\r\n        <select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                onChange={this.specChanged}>\r\n          <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n          {\r\n            this.state.specs.map((s) => {\r\n              return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n            })\r\n          }\r\n\r\n        </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {\r\n              spec.Messages.map(msg => {\r\n                return <option key={msg.Id}\r\n                               value={msg.Name}>{msg.Name}</option>\r\n              })\r\n            }\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByID(specId) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Id === specId) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport NavBar from './components/Navigation/NavBar.js'\n\nfunction App() {\n  return (\n      <div style={{backgroundColor:'#fbfff0'}}>\n        <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\n          Simulator</h1>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n           href={\"/iso/home\"} target={\"_blank\"}>[Non React App]</a>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n          href={\"/iso/v0/server\"} target={\"_blank\"}>[Manage Servers]</a>\n\n        <div className=\"App\">\n          <NavBar/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\nReactDOM.render(<App style={{backgroundColor:'#fbfff0'}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}