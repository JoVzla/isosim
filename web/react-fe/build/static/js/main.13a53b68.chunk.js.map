{"version":3,"sources":["components/Utils/ExpandedText.js","components/Utils/Properties.js","components/Utils/FieldValidator.js","components/Iso/IsoField/IsoField.js","components/Dialogs/SelectMessageDialog.js","components/Iso/ResponseSegment.js","components/Dialogs/ParseMessageDialog.js","components/Dialogs/SaveMessageDialog.js","components/Utils/NetworkSettings.js","components/Dialogs/AlertDialog.js","components/Iso/MessageStructure.js","components/Navigation/SpecTree/SpecTree.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ExpandedText","props","state","show","value","closeThis","bind","valueChanged","event","this","setState","target","onClose","prevProps","prevState","snapshot","Fragment","style","borderBottom","borderColor","fontFamily","width","minHeight","maxHeight","onChange","disabled","readOnly","height","Button","size","float","fontSize","onClick","React","Component","AppProps","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","FixedField","VariableField","BitmappedField","appProps","fieldValidator","validate","field","fieldData","errors","validationFailed","Type","DataEncoding","length","FixedSize","push","Name","dataErr","match","fieldLen","MinSize","MaxSize","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","setError","toggleExpanded","selectable","selected","fieldValue","id2Value","get","ID","fieldEditable","bgColor","hasError","expandBtnLabel","defaultFieldValue","includes","Array","fill","reduce","p","c","isoMsg","set","newValue","Children","forEach","f","fieldName","currentVal","bits","from","ChangeType","Position","turnOff","i","obj","errMsg","checked","content","parentField","level","key","selectionColumnContent","align","Checkbox","type","color","positionInParent","ParentId","fieldInfo","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","id","placement","InputLabel","TextField","margin","variant","error","helperText","onDoubleClick","marginRight","marginLeft","colSpan","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","axios","params","specId","msgId","then","res","savedMsgs","data","saved_messages","catch","e","console","log","errorMessage","response","closeLoadMsgDialog","fullWidth","select","label","map","sm","MenuItem","Dialog","open","aria-labelledby","maxWidth","DialogTitle","DialogContent","Grid","container","spacing","item","lg","xl","DialogActions","ResponseSegment","msgTemplate","hideResponseSegment","copyToClipboard","textAreaRef","createRef","idToField","idToValue","val","cf","collectData","current","document","execCommand","alert","forClipboard","Map","Value","fields","clipboardText","currentIndex","reqData","scroll","PaperComponent","disableBackdropClick","cursor","dialogTitle","dividers","Paper","ref","opacity","position","zIndex","border","backgroundColor","handle","cancel","ParseMessageDialog","traceMsg","traceChanged","isValidTrace","trace","trim","updatedTrace","setTrace","rows","multiline","SaveMessageDialog","msgName","initialMessage","msgNameChanged","updateIfExistsChanged","postData","updateIfExists","JSON","stringify","post","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","xs","FormControlLabel","control","NetworkSettings","targetServerIp","targetServerPort","mliType","serverIpChanged","serverPortChanged","mliTypeChanged","verticalAlign","defaultValue","AlertDialog","handleClose","aria-describedby","DialogContentText","msg","MessageStructure","specs","spec","loaded","shouldShow","showMsgTemplate","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","reqMenuVisible","selectedReqMenuItem","reqClipboardData","sendToHost","addFieldContent","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","showMenu","hideMenu","handleMenuClick","showResponseDialog","getTemplateLabel","networkSettingsChanged","hideResponse","ip","port","currentTarget","parsed_fields","fd","dsName","saved_message","updated","saveData","validationErrors","fData","response_fields","status","getMessageTemplate","pSpec","pMsg","find","s","Messages","m","url","err","display","ButtonGroup","variation","marginTop","SpecTree","messageClicked","parentElement","getAttribute","msgSelected","TreeItem","nodeId","sid","mid","icon","Folder","buildMessages","treeContent","Home","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","Message","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","getSpecByID","msgTemplateRef","parseInt","getCurrentSpec","Modal","onHide","Header","closeButton","Title","Body","Footer","getSpecByName","name","App","href","className","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8UAKqBA,E,YAEnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CAACC,KAAM,EAAKF,MAAME,KAAMC,MAAO,EAAKH,MAAMG,OACvD,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,U,kCAInCK,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMW,QAAQH,KAAKP,MAAME,S,yCAGbS,EAAWC,EAAWC,IAChB,IAAnBF,EAAUV,OAAsC,IAApBM,KAAKR,MAAME,OACnC,IADoDM,KAAKP,MAAMC,KAErEM,KAAKC,SAAS,CAACP,MAAM,EAAMC,MAAOK,KAAKR,MAAMG,SAChB,IAApBK,KAAKR,MAAME,OACd,IADgCM,KAAKP,MAAMC,MAEjDM,KAAKC,SAAS,CAACP,MAAM,EAAOC,MAAOK,KAAKR,MAAMG,U,+BAMhD,OAEyB,IAApBK,KAAKP,MAAMC,KAER,kBAAC,IAAMa,SAAP,KACE,yBAAKC,MAAO,CAACC,aAAc,QAASC,YAAa,QAEvD,8BACIF,MAAO,CACLG,WAAY,cACZC,MAAO,OACPC,UAAW,OACXC,UAAW,SAEbC,SAAUf,KAAKF,aAAckB,SAAUhB,KAAKR,MAAMyB,SAAUtB,MAAOK,KAAKP,MAAME,QAE1E,yBAAKa,MAAO,CAACU,OAAQ,SACnB,kBAACC,EAAA,EAAD,CAAQC,KAAM,KAAMZ,MAAO,CACzBa,MAAO,QAASC,SAAU,QACzBC,QAASvB,KAAKJ,WAFjB,WAON,S,GAvD8B4B,IAAMC,W,sDCJnCC,EAMX,aAAe,oBAEb1B,KAAK2B,QAAU,GACf3B,KAAK4B,WAAa5B,KAAK2B,QAAU,eACjC3B,KAAK6B,WAAa7B,KAAK2B,QAAU,kBACjC3B,KAAK8B,YAAc9B,KAAK2B,QAAU,gBAClC3B,KAAK+B,YAAc/B,KAAK2B,QAAU,mBAClC3B,KAAKgC,cAAgBhC,KAAK2B,QAAU,gBACpC3B,KAAKiC,WAAajC,KAAK2B,QAAU,gBAdxBD,EAEJQ,WAAa,QAFTR,EAGJS,cAAgB,WAHZT,EAIJU,eAAiB,YAe1B,IACeC,EADA,IAAIX,EC8DJY,EADM,I,WA3EnB,WAAY9C,GAAQ,oBAClBQ,KAAKuC,SAAWvC,KAAKuC,SAAS1C,KAAKG,M,qDAG5BwC,EAAOC,EAAWC,GAGzB,IAAIC,GAAmB,EAEnBH,EAAMI,OAASlB,EAASQ,aAEC,UAAvBM,EAAMK,cAAmD,WAAvBL,EAAMK,aACtCJ,EAAUK,SAAWN,EAAMO,YAC7BL,EAAOM,KAAP,kBACeR,EAAMS,KADrB,yCAC0DT,EAAMO,UADhE,oBACqFN,EAAUK,SAC/FH,GAAmB,GAGjBF,EAAUK,SAAW,EAAIN,EAAMO,YACjCL,EAAOM,KAAP,kBACeR,EAAMS,KADrB,yCAC0DT,EAAMO,UADhE,oBACqFN,EAAUK,OACzF,IACNH,GAAmB,IAMzB,IAAIO,GAAU,EAqBd,GAnB2B,QAAvBV,EAAMK,cAAiD,WAAvBL,EAAMK,eACpCJ,EAAUK,OAAS,IAAM,IAC3BJ,EAAOM,KAAP,kBACeR,EAAMS,KADrB,6CAEAN,GAAmB,EACnBO,GAAU,GAGe,WAAvBV,EAAMK,cAA8BJ,EAAUU,MAC9C,sBACFT,EAAOM,KAAP,kBAAuBR,EAAMS,KAA7B,wCACAN,GAAmB,GAEM,QAAvBH,EAAMK,cAA2BJ,EAAUU,MAAM,cACnDT,EAAOM,KAAP,kBAAuBR,EAAMS,KAA7B,gCACAN,GAAmB,KAIlBO,GAAWV,EAAMI,OAASlB,EAASS,cAAe,CAErD,IAAIiB,EAAWX,EAAUK,OACE,QAAvBN,EAAMK,cAAiD,WAAvBL,EAAMK,eACxCO,EAAWX,EAAUK,OAAS,GAG5BN,EAAMa,QAAU,GAAKZ,EAAUK,OAASN,EAAMa,UAChDX,EAAOM,KAAP,kBACeR,EAAMS,KADrB,oBACqCG,EADrC,yCAC8EZ,EAAMa,QADpF,OAEAV,GAAmB,GAEjBH,EAAMc,QAAU,GAAKb,EAAUK,OAASN,EAAMc,UAChDZ,EAAOM,KAAP,kBACeR,EAAMS,KADrB,qBACsCG,EADtC,4CACkFZ,EAAMa,QADxF,OAEAV,GAAmB,GAKvB,OAAOA,M,MC9DUY,E,YAEnB,WAAY/D,GAAQ,IAAD,uBACjB,4CAAMA,KAEDgE,kBAAoB,EAAKA,kBAAkB3D,KAAvB,gBACzB,EAAK4D,sBAAwB,EAAKA,sBAAsB5D,KAA3B,gBAC7B,EAAK6D,cAAgB,EAAKA,cAAc7D,KAAnB,gBACrB,EAAK8D,mBAAqB,EAAKA,mBAAmB9D,KAAxB,gBAC1B,EAAK+D,YAAc,EAAKA,YAAY/D,KAAjB,gBACnB,EAAKgE,YAAc,EAAKA,YAAYhE,KAAjB,gBACnB,EAAKiE,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKkE,cAAgB,EAAKA,cAAclE,KAAnB,gBACrB,EAAKmE,WAAa,EAAKA,WAAWnE,KAAhB,gBAClB,EAAKoE,SAAW,EAAKA,SAASpE,KAAd,gBAChB,EAAKqE,eAAiB,EAAKA,eAAerE,KAApB,gBAQtB,GAFA,EAAKsE,YAAa,EAEd,EAAK3E,MAAMyB,SAAU,CACvB,EAAKkD,YAAa,EAElB,IAAIC,GAAW,EACXC,EAAa,EAAK7E,MAAM8E,SAASC,IAAI,EAAK/E,MAAMgD,MAAMgC,IACtDH,IACFD,GAAW,GAGb,EAAK3E,MAAQ,CACXgF,eAAe,EACfC,QAAS,QACTC,UAAU,EACVP,SAAUA,EACVE,SAAU,EAAK9E,MAAM8E,SACrBD,WAAYA,EACZO,eAnBwB,IAoBxBd,cAAc,EACdtB,MAAO,EAAKhD,MAAMgD,WAEf,CACL,IAAIqC,EAAoB,GACxB,GAAI,CAAC,eAAgB,MAAO,UAAUC,SAClC,EAAKtF,MAAMgD,MAAMS,MAAO,CAC1B,EAAKkB,YAAa,EAClB,IAAIM,GAAgB,EACU,WAA1B,EAAKjF,MAAMgD,MAAMS,OACnB4B,EAAoBE,MAAM,KAAKC,KAAK,KAAKC,QAAO,eAACC,EAAD,uDAAK,GAAIC,EAAT,8CAAeD,EAAIC,KAEnEV,GAAgB,GAGlB,EAAKhF,MAAQ,CACXgF,cAAeA,EACfC,QAAS,QACTC,UAAU,EACVP,UAAU,EACVC,WAAYQ,EACZD,eAzCsB,IA0CtBd,cAAc,EACdtB,MAAO,EAAKhD,MAAMgD,YAGpB,EAAK/C,MAAQ,CACXgF,eAAe,EACfC,QAAS,QACTN,UAAU,EACVO,UAAU,EACVN,WAAYQ,EACZD,eApDsB,IAqDtBd,cAAc,EACdtB,MAAO,EAAKhD,MAAMgD,OAGtB,EAAKhD,MAAM4F,OAAOC,IAAI,EAAK7F,MAAMgD,MAAMgC,GAAvC,gBA3Ee,S,0EAgFjB,OAAIxE,KAAKP,MAAMkF,SACN,MAEA,U,+BAKFA,GACP3E,KAAKC,SAAS,CAAC0E,SAAUA,M,qCAIzB3E,KAAKC,SAAS,CAAC6D,cAAc,M,uCAIzB9D,KAAKP,MAAMqE,aACb9D,KAAKC,SAAS,CAAC6D,cAAc,EAAOc,eAAgB,MAEpD5E,KAAKC,SAAS,CAAC6D,cAAc,EAAMc,eAAgB,Q,sCAMrD5E,KAAKC,SAAS,CAAC6D,cAAc,M,kCAGnBwB,GACVtF,KAAKC,SAAS,CAACoE,WAAYiB,EAAUxB,cAAc,IACnD9D,KAAKkE,mB,yCAGY9D,EAAWC,EAAWC,GACnCF,EAAUkE,WAAatE,KAAKR,MAAM8E,UACpCtE,KAAKC,SAAS,CACZoE,WAAYrE,KAAKR,MAAM8E,SAASC,IAAIvE,KAAKR,MAAMgD,MAAMgC,IACrDF,SAAUtE,KAAKR,MAAM8E,a,oCAKbvE,GAAQ,IAAD,OAKnB,GAAIC,KAAKR,MAAMgD,MAAMI,OAASlB,EAASU,eAErCpC,KAAKR,MAAMgD,MAAM+C,SAASC,SAAQ,SAAAC,GAEhC,GAAIA,EAAExC,OAASlD,EAAM2F,UAAW,CAC9B,IAAIC,EAAa,EAAKlG,MAAM4E,WACxBuB,EAAOb,MAAMc,KAAKF,GAEtB,GAAyB,kBAArB5F,EAAM+F,WACRF,EAAKH,EAAEM,SAAW,GAAK,IACnBN,EAAEM,SAAW,KACfH,EAAK,GAAK,UAEP,GAAyB,oBAArB7F,EAAM+F,WAAkC,CACjDF,EAAKH,EAAEM,SAAW,GAAK,IAIvB,IADA,IAAIC,GAAU,EACLC,EAAI,GAAIA,GAAK,IAAKA,IACzB,GAAoB,MAAhBL,EAAKK,EAAI,GAAY,CACvBD,GAAU,EACV,MAGAA,IACFJ,EAAK,GAAK,KAId,IAAIN,EAAWM,EAAKX,QAAO,eAACC,EAAD,uDAAK,GAAIC,EAAT,8CAAeD,EAAIC,KAC9C,EAAKlF,SAAS,CAACoE,WAAYiB,YAI1B,CAEL,IAAIY,EAAM,CAACR,UAAW1F,KAAKR,MAAMgD,MAAMS,MACd,kBAArBlD,EAAM+F,YAER9F,KAAKC,SAAS,CAACmE,UAAU,IACzB8B,EAAIJ,WAAa,iBACa,oBAArB/F,EAAM+F,aACf9F,KAAKC,SAAS,CAACmE,UAAU,IACzB8B,EAAIJ,WAAa,mBAYnB9F,KAAKR,MAAMgD,MAAM+C,SAASC,SAAQ,SAAAL,GACP,kBAArBpF,EAAM+F,WACR,EAAKtG,MAAM4F,OAAOb,IAAIY,EAAEX,IAAIZ,aAAY,GACV,oBAArB7D,EAAM+F,YACf,EAAKtG,MAAM4F,OAAOb,IAAIY,EAAEX,IAAIZ,aAAY,MAK5C5D,KAAKR,MAAMkE,cAAcwC,M,kCAKjB9B,GAAW,IAAD,OAOpB,GALApE,KAAKC,SAAS,CAACmE,SAAUA,IACzBpE,KAAKR,MAAMgD,MAAM+C,SAASC,SAAQ,SAAAL,GAChC,EAAK3F,MAAM4F,OAAOb,IAAIY,EAAEX,IAAIZ,YAAYQ,MAGtCA,EAAU,CACZ,IAAI1B,EAAS,GACTJ,EAAeC,SAASvC,KAAKR,MAAMgD,MAAOxC,KAAKP,MAAM4E,WACrD3B,IACF1C,KAAKC,SACD,CAAC0E,UAAU,EAAMwB,OAAQzD,EAAO,UAGtC1C,KAAKC,SAAS,CAAC0E,UAAU,EAAOwB,OAAQ,S,4CAMtBpG,GAEpB,IAAImG,EAAM,CAACR,UAAW1F,KAAKR,MAAMgD,MAAMS,MACnCmB,GAAW,EACXrE,EAAMG,OAAOkG,SACfF,EAAIJ,WAAa,gBACjB1B,GAAW,GAEX8B,EAAIJ,WAAa,kBAGf9F,KAAKR,MAAMgD,MAAMI,OAASlB,EAASU,gBACrCpC,KAAK4D,YAAYQ,GAEnBpE,KAAKR,MAAMkE,cAAcwC,K,wCAGTnG,GAEhB,IAAI2C,EAAS,GACb,GAAI1C,KAAKP,MAAM2E,SACb,GAAI9B,EAAeC,SAASvC,KAAKR,MAAMgD,MAAOzC,EAAMG,OAAOP,MACvD+C,GACF1C,KAAKC,SACD,CAAC0E,UAAU,EAAMwB,OAAQzD,EAAO,GAAI2B,WAAYtE,EAAMG,OAAOP,YAC5D,CAELK,KAAKC,SACD,CAAC0E,UAAU,EAAOwB,OAAQ,KAAM9B,WAAYtE,EAAMG,OAAOP,QAC7D,IAAIuG,EAAM,CACRR,UAAW1F,KAAKR,MAAMgD,MAAMS,KAC5B6C,WAAY,gBAEd9F,KAAKR,MAAMkE,cAAcwC,QAG3BlG,KAAKC,SACD,CAAC0E,UAAU,EAAOwB,OAAQ,S,yCAKfE,EAAS7D,EAAO8D,EAAahC,EAAUiC,GAExD,IAAIC,EAAMhE,EAAMgC,GACZxE,KAAKR,MAAMyB,WACbuF,EAAM,gBAAkBhE,EAAMgC,IAEhC6B,EAAQrD,KAAK,kBAACO,EAAD,CAAUiD,IAAKA,EAAKhE,MAAOA,EAAO8B,SAAUA,EAClCrD,SAAUjB,KAAKR,MAAMyB,SACrBqF,YAAaA,EAAalB,OAAQpF,KAAKR,MAAM4F,OAC7CmB,MAAOA,EACP7C,cAAe1D,KAAK0D,mB,+BAGnC,IAEJ+C,EAFG,OAKLA,EADEzG,KAAKmE,WAEH,wBAAIuC,MAAO,UAAU,kBAACC,EAAA,EAAD,CAAUC,KAAM,WAAYxF,KAAM,QACxByF,MAAO,UACPT,QAASpG,KAAKP,MAAM2E,SACpBrD,SAAUf,KAAKyD,yBAI9C,wBAAIiD,MAAO,UAAU,kBAACC,EAAA,EAAD,CAAUC,KAAM,WAAYxF,KAAM,QACxByF,MAAO,UACP7F,UAAU,EACVoF,QAASpG,KAAKP,MAAM2E,SACpBrD,SAAUf,KAAKyD,yBAKpD,IAAIqD,EAAmB,GACnB9G,KAAKR,MAAMgD,MAAMuE,SAAW,IAC9BD,EAAmB,SAAW9G,KAAKR,MAAMgD,MAAMuD,SAAW,KAG5D,IAAIiB,EAAYF,EAAmB,UAAY9G,KAAKR,MAAMgD,MAAMI,KAC1D,MACF5C,KAAKR,MAAMgD,MAAMI,OAASlB,EAASQ,WACrC8E,GAAa,WAAahH,KAAKR,MAAMgD,MAAMO,UAAY,gBAEjD/C,KAAKR,MAAMgD,MAAMK,aACd7C,KAAKR,MAAMgD,MAAMI,OAASlB,EAASS,cAC5C6E,GAAa,qBAAuBhH,KAAKR,MAAMgD,MAAMyE,oBAC/C,uBAA8BjH,KAAKR,MAAMgD,MAAM0E,eAC/C,qBAA4BlH,KAAKR,MAAMgD,MAAMK,aAC1C7C,KAAKR,MAAMgD,MAAMI,KAG5B,IAAIuE,EAAW,GAEfnH,KAAKR,MAAMgD,MAAM+C,SAASC,SACtB,SAAAL,GAAC,OAAI,EAAKxB,mBAAmBwD,EAAUhC,EAAG,EAAK3F,MAAMgD,MACjD,EAAK/C,MAAM6E,SAAU,EAAK9E,MAAM+G,MAAQ,MAGhD,IADA,IAAIa,EAAiB,GACZnB,EAAI,EAAGA,EAAIjG,KAAKR,MAAM+G,MAAON,IACpCmB,GAAkB,SAGpB,OACI,kBAAC,IAAM7G,SAAP,KACE,4BAEGkG,EAID,kBAACY,EAAA,EAAD,CAAgBC,QACZ,kBAACC,EAAA,EAAD,CAASC,GAAG,KACHhH,MAAO,CAACc,SAAU,SAAU0F,GACzBS,UAAU,OACxB,wBAAIjH,MAAO,CACTI,MAAO,QACPU,SAAU,SAEV,kBAACoG,EAAA,EAAD,CAAYlH,MAAO,CAACc,SAAU,SAAU8F,EAAiB,IACvDpH,KAAKR,MAAMgD,MAAMS,QAQvB,4BAEE,kBAAC0E,EAAA,EAAD,CAAWC,OAAQ,QAASxG,KAAM,QAASyG,QAAS,WACzClI,MAAOK,KAAKP,MAAM4E,WAClByD,MAAO9H,KAAKP,MAAMkF,SAClBoD,WAAY/H,KAAKP,MAAM0G,OACvBpF,SAAUf,KAAKwD,kBACfhD,MAAO,CAACI,MAAO,OACfI,SAAUhB,KAAKR,MAAMyB,WACjBjB,KAAKP,MAAMgF,cACf+B,IAAK,aAAexG,KAAKP,MAAM+C,MAAMgC,GACrCwD,cAAehI,KAAKkE,iBAG/B,kBAAC,IAAD,CAAQ9C,KAAM,QAASyG,QAAS,YAAarH,MAAO,CAClDa,MAAO,QACPC,SAAU,OACV2G,YAAa,KACbC,WAAY,MAEN3G,QAASvB,KAAKkE,gBANtB,IAMwClE,KAAKP,MAAMmF,kBAMvD,4BACE,wBAAIuD,QAAQ,KACV,kBAAC,EAAD,CAAczI,KAAMM,KAAKP,MAAMqE,aACjBnE,MAAOK,KAAKP,MAAM4E,WAClBpD,SAAUjB,KAAKR,MAAMyB,SACrBd,QAASH,KAAK6D,gBAG/BsD,O,GAjY2B3F,IAAMC,W,sDCCvB2G,E,YAEnB,WAAY5I,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,KAAMF,EAAME,KAAM2I,YAAa,IAC7C,EAAKC,mBAAqB,EAAKA,mBAAmBzI,KAAxB,gBAC1B,EAAK0I,gBAAkB,EAAKA,gBAAgB1I,KAArB,gBACvB,EAAK2I,mBAAqB,EAAKA,mBAAmB3I,KAAxB,gBALT,E,gFAQAE,GACjBC,KAAKC,SAAS,CAACoI,YAAatI,EAAMG,OAAOP,U,yCAGxBS,EAAWC,EAAWC,GAAW,IAAD,QAEzB,IAApBN,KAAKR,MAAME,OAAoC,IAAnBW,EAAUX,MAExC+I,IAAMlE,IAAIlC,EAASR,WAAY,CAC7B6G,OAAQ,CACNC,OAAQ3I,KAAKR,MAAMmJ,OACnBC,MAAO5I,KAAKR,MAAMoJ,SAEnBC,MAAK,SAAAC,GAEN,EAAK7I,SACD,CACE8I,UAAWD,EAAIE,KAAKC,eACpBZ,YAAaS,EAAIE,KAAKC,eAAe,GACrCvJ,MAAM,OAGXwJ,OAAM,SAAAC,GAEHC,QAAQC,IAAIF,GACZ,EAAKlJ,SAAS,CAACP,MAAM,EAAM4J,aAAcH,EAAEI,SAASP,Y,2CAO5DhJ,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMgK,mBAAmBxJ,KAAKP,MAAM4I,e,wCAIzCrI,KAAKC,SAAS,CAACP,MAAM,IAGrBM,KAAKR,MAAMgK,mBAAmB,Q,+BAK9B,IAAInD,EA0BJ,OAxBIrG,KAAKP,MAAMC,OAEX2G,EADErG,KAAKP,MAAM6J,aACH,6BAAMtJ,KAAKP,MAAM6J,cAGvB,kBAAC,IAAM/I,SAAP,KAEE,kBAACoH,EAAA,EAAD,CAAWf,KAAM,OAAQJ,IAAK,gBACnBoB,OAAQ,QACR6B,WAAW,EAAMC,QAAQ,EACzB7B,QAAS,WAAY8B,MAAO,gBAC5BhK,MAAOK,KAAKP,MAAM4I,YAClBtH,SAAUf,KAAKwI,oBAGvBxI,KAAKP,MAAMsJ,UAAUa,KAAI,SAACC,GACzB,OAAO,kBAACC,EAAA,EAAD,CAAUtD,IAAKqD,EAAIlK,MAAOkK,GAAKA,SAUhD,6BACE,kBAACE,EAAA,EAAD,CAAQC,KAAMhK,KAAKP,MAAMC,KAAMS,QAASH,KAAKuI,gBACrC0B,kBAAgB,oBAAoBR,WAAW,EAC/CS,SAAU,MAChB,kBAACC,EAAA,EAAD,CAAa3C,GAAG,oBAAoBrH,QAASH,KAAKuI,iBAAlD,kBAEA,kBAAC6B,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,WAAW,EAAMC,QAAS,GAE9B,kBAACF,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACpBrE,OAMX,kBAACsE,EAAA,EAAD,KACE,kBAACxJ,EAAA,EAAD,CAAQI,QAASvB,KAAKsI,mBAAoBzB,MAAM,WAAhD,MAGA,kBAAC1F,EAAA,EAAD,CAAQI,QAASvB,KAAKuI,gBAAiB1B,MAAM,WAA7C,iB,GAzGmCrF,IAAMC,W,2BCHlCmJ,E,YAEnB,WAAYpL,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAMF,EAAME,KACZsJ,KAAM,EAAKxJ,MAAMwJ,KACjB6B,YAAa,EAAKrL,MAAMqL,aAE1B,EAAKC,oBAAsB,EAAKA,oBAAoBjL,KAAzB,gBAC3B,EAAKkL,gBAAkB,EAAKA,gBAAgBlL,KAArB,gBAEvB,EAAKmL,YAAcxJ,IAAMyJ,YAVR,E,gFAaA5E,EAAS7D,EAAO0I,EAAW3E,GAK5C,OAJAF,EAAQrD,KAAK,kBAAC,EAAD,CAAUwD,IAAK,gBAAkBhE,EAAMgC,GAAIhC,MAAOA,EACxC8B,SAAU4G,EACVjK,UAAU,EAAMsF,MAAOA,EACvB7C,cAAe1D,KAAK0D,iBACpC,K,4CAIP1D,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMW,Y,kCAGDqC,EAAO2I,EAAW9E,GAAU,IAAD,OACrC,GAAI8E,EAAU5G,IAAI/B,EAAMgC,IAAK,CAC3B,IAAI4G,EAAMD,EAAU5G,IAAI/B,EAAMgC,IAC9B6B,EAAQrD,KAAR,UAAgBR,EAAMS,KAAtB,aAA+BmI,IAE7B5I,EAAM+C,SAASzC,OAAS,GAC1BN,EAAM+C,SAASC,SAAQ,SAAA6F,GACrB,EAAKC,YAAYD,EAAIF,EAAW9E,Q,yCAMnBjG,EAAWC,EAAWC,IAEhB,IAAnBF,EAAUV,OAAsC,IAApBM,KAAKR,MAAME,MACzCM,KAAKC,SAAS,CACZP,MAAM,EACNsJ,KAAMhJ,KAAKR,MAAMwJ,KACjB6B,YAAa7K,KAAKR,MAAMqL,gB,wCAM5B7K,KAAKgL,YAAYO,QAAQ7B,SACpB8B,SAASC,YAAY,SACxBC,MAAM,kC,+BAIA,IAAD,OAEHrF,EAAU,GACVsF,EAAe,GACnB,GAAI3L,KAAKP,MAAMC,KAAM,CAEnB,IAAIwL,EAAY,IAAIU,IACpB5L,KAAKP,MAAMuJ,KAAKxD,SAAQ,SAAAC,GACtByF,EAAU7F,IAAII,EAAEjB,GAAIiB,EAAEoG,UAGxB7L,KAAKP,MAAMoL,YAAYiB,OAAOtG,SAAQ,SAAAhD,GACpC,EAAK8I,YAAY9I,EAAO0I,EAAWS,MAErC,IAAII,EAAgB,sCACdJ,EAAa1G,QAAO,SAACC,EAAGC,EAAG6G,GAC3B,OAAqB,IAAjBA,EACK9G,EAAI,KAAOC,EAAI,KAEfD,EAAIC,EAAI,QAavB,OATA4G,EAAgB,qCACV/L,KAAKR,MAAMyM,QAAU,OAASF,EAAgB,OAEpD/L,KAAKP,MAAMoL,YAAYiB,OAAOtG,SAAQ,SAAAhD,GACpC,EAAKmB,mBAAmB0C,EAAS7D,EAAO0I,EAAW,MAMjD,kBAAC,IAAM3K,SAAP,KAGGP,KAAKP,MAAMC,KACR,kBAACqK,EAAA,EAAD,CAAQC,KAAMhK,KAAKP,MAAMC,KACjBS,QAASH,KAAK8K,oBAAqBoB,OAAQ,QAC3CC,eAAgBA,EAChBlC,kBAAgB,yBAChBC,SAAU,KAAMT,WAAW,EAC3B2C,sBAAsB,GAC5B,kBAACjC,EAAA,EAAD,CAAa3J,MAAO,CAAC6L,OAAQ,QAChB7E,GAAG,0BAA0BxH,KAAKR,MAAM8M,aACrD,kBAAClC,EAAA,EAAD,CAAemC,UAAU,GAEvB,kBAACC,EAAA,EAAD,KACpB,8BAAUC,IAAKzM,KAAKgL,YACVxK,MAAO,CACLkM,QAAS,OACTC,SAAU,WACVC,QAAS,KACT1L,OAAQ,IACN6K,GAGQ,2BAAOc,OAAO,IAAInG,MAAO,UACvB,+BACA,wBAAIlG,MAAO,CACTG,WAAY,eACZmM,gBAAiB,UACjBxL,SAAU,OACVoF,MAAO,SACPjG,aAAc,QACdC,YAAa,SAEb,wBAAIyH,QAAQ,IACRzB,MAAO,UAAW,qBAExB,wBAAIlG,MAAO,CACTG,WAAY,eACZmM,gBAAiB,UACjBxL,SAAU,SAEV,wBAAIoF,MAAO,UAAX,aACA,wBAAIA,MAAO,SAAUlG,MAAO,CAACI,MAAO,QAApC,SACA,wBAAI8F,MAAO,SAAUlG,MAAO,CAACI,MAAO,QAApC,gBAIF,+BACCyF,MAKP,kBAACsE,EAAA,EAAD,KACE,kBAAC,IAAD,CAAQpJ,QAASvB,KAAK+K,gBAAiB3J,KAAK,QACpCyF,MAAM,UACNgB,QAAS,aAFjB,qBAKA,kBAAC,IAAD,CAAQtG,QAASvB,KAAK8K,oBAAqB1J,KAAK,QACxCyF,MAAM,UACNgB,QAAS,aAFjB,WAOF,MAIZ,OAAO,S,GAnKgCrG,IAAMC,WAyKnD,SAAS0K,EAAe3M,GACtB,OACI,kBAAC,IAAD,CAAWuN,OAAO,0BACPC,OAAQ,oCACjB,kBAACR,EAAA,EAAUhN,I,IC/KEyN,E,YAEnB,WAAYzN,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,KAAMF,EAAME,KAAMwN,SAAU,GAAI5D,aAAc,MAC5D,EAAKhB,mBAAqB,EAAKA,mBAAmBzI,KAAxB,gBAC1B,EAAK0I,gBAAkB,EAAKA,gBAAgB1I,KAArB,gBACvB,EAAKsN,aAAe,EAAKA,aAAatN,KAAlB,gBACpB,EAAKuN,aAAe,EAAKA,aAAavN,KAAlB,gBANH,E,0EASNwN,GACX,QAA2B,KAAjBA,EAAMC,QAAkBD,EAAMvK,OAClC,IAAM,IAAKuK,EAAMlK,MAAM,uB,mCAIlBpD,GAEX,IAAIwN,EAAexN,EAAMG,OAAOP,MAE3BK,KAAKoN,aAAaG,GAMrBvN,KAAKC,SAAS,CAACiN,SAAUK,EAAcjE,aAAc,OALrDtJ,KAAKC,SAAS,CACZiN,SAAUK,EACVjE,aAAc,6B,yCAODlJ,EAAWC,EAAWC,IAEf,IAApBN,KAAKR,MAAME,OAAoC,IAAnBW,EAAUX,MACxCM,KAAKC,SAAS,CAACP,MAAM,EAAMwN,SAAU,O,2CAKnClN,KAAKoN,aAAapN,KAAKP,MAAMyN,YAC/BlN,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMgO,SAASxN,KAAKP,MAAMyN,a,wCAKjClN,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMgO,SAAS,Q,+BAKpB,OAEI,6BACE,kBAACzD,EAAA,EAAD,CAAQC,KAAMhK,KAAKP,MAAMC,KAAMS,QAASH,KAAKuI,gBACrC0B,kBAAgB,oBAAoBR,WAAW,EAC/CS,SAAU,MAChB,kBAACC,EAAA,EAAD,CAAa3C,GAAG,oBAAoBrH,QAASH,KAAKuI,iBAAlD,eAEA,kBAAC6B,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,WAAW,EAAMC,QAAS,GAE9B,kBAACF,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAAC/C,EAAA,EAAD,CAAWnB,IAAK,cAAeqB,QAAS,WAC7B8B,MAAO,YAAa/B,OAAQ,QAC5B6B,WAAW,EAAM9J,MAAOK,KAAKP,MAAMyN,SACnCpF,MAAmC,OAA5B9H,KAAKP,MAAM6J,aAClBvI,SAAUf,KAAKmN,aAAcM,KAAM,GACnC1F,WAAY/H,KAAKP,MAAM6J,aACvBoE,WAAW,SAQhC,kBAAC/C,EAAA,EAAD,KACE,kBAACxJ,EAAA,EAAD,CAAQI,QAASvB,KAAKsI,mBAAoBzB,MAAM,WAAhD,MAGA,kBAAC1F,EAAA,EAAD,CAAQI,QAASvB,KAAKuI,gBAAiB1B,MAAM,WAA7C,iB,GApFkCrF,IAAMC,W,SCIjCkM,E,YAEnB,WAAYnO,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAMF,EAAME,KACZkO,QAASpO,EAAMqO,eACf,gBAAkB,GAEpB,EAAKvF,mBAAqB,EAAKA,mBAAmBzI,KAAxB,gBAC1B,EAAK0I,gBAAkB,EAAKA,gBAAgB1I,KAArB,gBACvB,EAAKiO,eAAiB,EAAKA,eAAejO,KAApB,gBACtB,EAAKkO,sBAAwB,EAAKA,sBAAsBlO,KAA3B,gBAVZ,E,4EAaJE,GACbC,KAAKC,SAAS,CAACqJ,aAAc,GAAIsE,QAAS7N,EAAMG,OAAOP,U,yCAGtCS,EAAWC,EAAWC,IACf,IAApBN,KAAKR,MAAME,OAAoC,IAAnBW,EAAUX,MAExCM,KAAKC,SACD,CAACP,MAAM,EAAMkO,QAAS5N,KAAKR,MAAMoO,Y,2CAKnB,IAAD,OAEnB,GAAK5N,KAAKP,MAAMmO,SAAkC,KAAvB5N,KAAKP,MAAMmO,SAAmB5N,KAAKR,MAAMwJ,KAApE,CAKA,IAAIgF,EAAW,UAAYhO,KAAKR,MAAMmJ,OAAS,UAAY3I,KAAKR,MAAMoJ,MAChE,WAAa5I,KAAKP,MAAMmO,QAAU,cAClC5N,KAAKP,MAAMwO,eAAiB,QAAUC,KAAKC,UACzCnO,KAAKR,MAAMwJ,MAEnBP,IAAM2F,KAAK/L,EAASJ,WAAY+L,GAAUnF,MAAK,SAAAC,GAC7CM,QAAQC,IAAIP,GACZ,EAAKtJ,MAAM6O,eAAe,EAAK5O,MAAMmO,QAAS,EAAKnO,MAAMwO,gBACzD,EAAKhO,SAAS,CAACP,MAAM,OAEpBwJ,OAAM,SAAAC,GACH,EAAK3J,MAAM8O,cAAcnF,GACzB,EAAKlJ,SAAS,CAACP,MAAM,YAhBzBM,KAAKC,SAAS,CAACqJ,aAAc,gC,wCAuB/BtJ,KAAKR,MAAM+O,mBACXvO,KAAKC,SAAS,CAACP,MAAM,M,4CAGDK,GACpBC,KAAKC,SAAS,CAACgO,eAAgBlO,EAAMG,OAAOkG,Y,+BAK5C,OACI,6BACE,kBAAC2D,EAAA,EAAD,CAAQC,KAAMhK,KAAKP,MAAMC,KAAMS,QAASH,KAAKuI,gBACrC0B,kBAAgB,oBAAoBR,WAAW,EAAMS,SAAU,MACrE,kBAACC,EAAA,EAAD,CAAa3C,GAAG,oBAAoBrH,QAASH,KAAKuI,iBAAlD,gBACA,kBAAC6B,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,WAAW,EAAMC,QAAS,GAE9B,kBAACF,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAAC/C,EAAA,EAAD,CAAWf,KAAM,OAAQJ,IAAK,gBAAiBoB,OAAQ,QAC5C6B,WAAW,EACX5B,QAAS,WAAY8B,MAAO,eAC5BhK,MAAOK,KAAKP,MAAMmO,QAClB7M,SAAUf,KAAK8N,mBAK9B,kBAACzD,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACgE,GAAI,GACb,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAAC/H,EAAA,EAAD,CAAUH,IAAK,uBACLpF,KAAM,KACNgF,QAASpG,KAAKP,MAAMwO,eACpBlN,SAAUf,KAAK+N,wBAClCpE,MAAO,mBAOrB,kBAACgB,EAAA,EAAD,KACE,kBAACxJ,EAAA,EAAD,CAAQI,QAASvB,KAAKsI,mBAAoBzB,MAAM,WAAhD,MAGA,kBAAC1F,EAAA,EAAD,CAAQI,QAASvB,KAAKuI,gBAAiB1B,MAAM,WAA7C,iB,GAtGiCrF,IAAMC,WC2EtCkN,G,mBAhFb,WAAYnP,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXmP,eAAgB,YAChBC,iBAAkB,OAClBC,QAAS,MAGX,EAAKC,gBAAkB,EAAKA,gBAAgBlP,KAArB,gBACvB,EAAKmP,kBAAoB,EAAKA,kBAAkBnP,KAAvB,gBACzB,EAAKoP,eAAiB,EAAKA,eAAepP,KAApB,gBAVL,E,4EAcJsJ,GACbnJ,KAAKC,SAAS,CAAC6O,QAAS3F,EAAEjJ,OAAOP,QACjCK,KAAKR,MAAMuB,SAASf,KAAKP,MAAMmP,eAAgB5O,KAAKP,MAAMoP,iBACtD1F,EAAEjJ,OAAOP,S,sCAGCwJ,GACdnJ,KAAKC,SAAS,CAAC2O,eAAgBzF,EAAEjJ,OAAOP,QACxCK,KAAKR,MAAMuB,SAASoI,EAAEjJ,OAAOP,MAAOK,KAAKP,MAAMoP,iBAC3C7O,KAAKP,MAAMqP,W,wCAGC3F,GAChBnJ,KAAKC,SAAS,CAAC4O,iBAAkB1F,EAAEjJ,OAAOP,QAC1CK,KAAKR,MAAMuB,SAASf,KAAKP,MAAMmP,eAAgBzF,EAAEjJ,OAAOP,MACpDK,KAAKP,MAAMqP,W,+BAIf,OACI,yBAAKpI,MAAO,OACPlG,MAAO,CACLkG,MAAO,OACPxF,OAAQ,OACRgO,cAAe,WACftH,OAAQ,SAIb,2BACIpH,MAAO,CACLG,WAAY,eACZW,SAAU,SAEd,4BACE,4BACE,kBAACqG,EAAA,EAAD,CAAWH,GAAG,QAAQmC,MAAM,KAAKvI,KAAM,QAC5ByG,QAAQ,WAAWsH,aAAc,YACjCpO,SAAUf,KAAK+O,mBAE5B,4BAEE,kBAACpH,EAAA,EAAD,CAAWH,GAAG,UAAUmC,MAAM,OAAOvI,KAAM,QAChCyG,QAAQ,WAAWsH,aAAc,OACjCpO,SAAUf,KAAKgP,qBAG5B,4BACE,kBAACrH,EAAA,EAAD,CAAW+B,QAAM,EAACtI,KAAM,QACpBzB,MAAOK,KAAKP,MAAMqP,QAASjH,QAAS,WAAY8B,MAAO,MACvD5I,SAAUf,KAAKiP,gBACjB,kBAACnF,EAAA,EAAD,CAAUnK,MAAO,MAAjB,MACA,kBAACmK,EAAA,EAAD,CAAUnK,MAAO,MAAjB,e,GApEY6B,IAAMC,Y,kBCEf2N,E,YAEnB,WAAY5P,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,KAAMF,EAAME,MAE1B,EAAK2P,YAAc,EAAKA,YAAYxP,KAAjB,gBAJF,E,2EAQjBG,KAAKC,SAAS,CAACP,MAAM,IACrBM,KAAKR,MAAMW,Y,yCAGMC,EAAWC,EAAWC,IAEf,IAApBN,KAAKR,MAAME,OAAoC,IAAnBW,EAAUX,MACxCM,KAAKC,SAAS,CAACP,MAAM,M,+BAMvB,OAAQ,kBAACqK,EAAA,EAAD,CACJC,KAAMhK,KAAKP,MAAMC,KACjBS,QAASH,KAAKqP,YACdpF,kBAAgB,qBAChBqF,mBAAiB,4BAEnB,kBAACnF,EAAA,EAAD,CACI3C,GAAG,sBAAsB,SAC7B,kBAAC4C,EAAA,EAAD,KACE,kBAACmF,EAAA,EAAD,CAAmB/H,GAAG,4BACnBxH,KAAKR,MAAMgQ,MAGhB,kBAAC7E,EAAA,EAAD,KACE,kBAAC,IAAD,CAAQpJ,QAASvB,KAAKqP,YAAaxI,MAAM,WAAzC,Y,GArCiCrF,IAAMC,WCW1BgO,E,YAEnB,WAAYjQ,GAAQ,IAAD,6BACjB,4CAAMA,IACN4J,QAAQC,IAAI,EAAK7J,OACjB4J,QAAQC,IAAI,kBAAmB,EAAK7J,MAAMkQ,MAAO,EAAKlQ,MAAMmQ,KACxD,EAAKnQ,MAAMgQ,KAEf,EAAK/P,MAAQ,CACXoL,YAAa,KACb+E,QAAQ,EACRD,KAAMnQ,EAAMmQ,KACZH,IAAKhQ,EAAMgQ,IACXK,WAAYrQ,EAAMsQ,gBAClBlB,eAAgB,YAChBC,iBAAkB,OAClBC,QAAS,KACTiB,eAAgB,GAChBC,kBAAkB,EAClB1G,aAAc,GACd2G,wBAAwB,EACxBC,sBAAsB,EACtBC,mBAAmB,EACnBC,cAAc,EACdC,aAAc,KACdC,gBAAgB,EAChBC,oBAAqB,KACrBC,iBAAkB,MAGpB,EAAK9M,cAAgB,EAAKA,cAAc7D,KAAnB,gBACrB,EAAK8D,mBAAqB,EAAKA,mBAAmB9D,KAAxB,gBAC1B,EAAK4Q,WAAa,EAAKA,WAAW5Q,KAAhB,gBAClB,EAAK6Q,gBAAkB,EAAKA,gBAAgB7Q,KAArB,gBACvB,EAAK8Q,gBAAkB,EAAKA,gBAAgB9Q,KAArB,gBACvB,EAAK+Q,iBAAmB,EAAKA,iBAAiB/Q,KAAtB,gBACxB,EAAKgR,aAAe,EAAKA,aAAahR,KAAlB,gBACpB,EAAKoQ,uBAAyB,EAAKA,uBAAuBpQ,KAA5B,gBAC9B,EAAK2J,mBAAqB,EAAKA,mBAAmB3J,KAAxB,gBAC1B,EAAKiR,uBAAyB,EAAKA,uBAAuBjR,KAA5B,gBAC9B,EAAK2N,SAAW,EAAKA,SAAS3N,KAAd,gBAChB,EAAKkR,sBAAwB,EAAKA,sBAAsBlR,KAA3B,gBAC7B,EAAKsQ,kBAAoB,EAAKA,kBAAkBtQ,KAAvB,gBAEzB,EAAKwO,eAAiB,EAAKA,eAAexO,KAApB,gBACtB,EAAKyO,cAAgB,EAAKA,cAAczO,KAAnB,gBACrB,EAAK0O,iBAAmB,EAAKA,iBAAiB1O,KAAtB,gBACxB,EAAKmR,eAAiB,EAAKA,eAAenR,KAApB,gBAEtB,EAAKoR,SAAW,EAAKA,SAASpR,KAAd,gBAChB,EAAKqR,SAAW,EAAKA,SAASrR,KAAd,gBAChB,EAAKsR,gBAAkB,EAAKA,gBAAgBtR,KAArB,gBAEvB,EAAKuR,mBAAqB,EAAKA,mBAAmBvR,KAAxB,gBAC1B,EAAKwR,iBAAmB,EAAKA,iBAAiBxR,KAAtB,gBACxB,EAAKyR,uBAAyB,EAAKA,uBAAuBzR,KAA5B,gBAC9B,EAAK0R,aAAe,EAAKA,aAAa1R,KAAlB,gBAtDH,E,oFA0DI2R,EAAIC,EAAM3C,GAC/B9O,KAAKC,SACD,CAAC2O,eAAgB4C,EAAI3C,iBAAkB4C,EAAM3C,QAASA,M,+BAGnD/O,GAEPC,KAAKC,SAAS,CACZsQ,oBAAqBxQ,EAAM2R,cAC3BpB,gBAAgB,M,iCAMlBtQ,KAAKC,SAAS,CAACqQ,gBAAgB,IAC/BtQ,KAAKC,SAAS,CAACsQ,oBAAqB,S,2CAIpCvQ,KAAKkR,WACLlR,KAAKC,SAAS,CAACmQ,cAAc,M,qCAI7BpQ,KAAKC,SAAS,CAACmQ,cAAc,M,sCAIfrQ,GACd2L,MAAM3L,EAAM2R,eAEZ1R,KAAKC,SAAS,CAACsQ,oBAAqBxQ,EAAM2R,gBAC1C1R,KAAKkR,a,+BAIE7D,GAAQ,IAAD,OACD,MAATA,GAIF5E,IAAM2F,KAAK/L,EAASL,cAAgB,IAAMhC,KAAKP,MAAMkQ,KAAKnL,GAAK,IACzDxE,KAAKP,MAAM+P,IAAIhL,GAAI6I,GACxBxE,MAAK,SAAAC,GACAM,QAAQC,IAAI,kBAAmBP,EAAIE,MACnCF,EAAIE,KAAK2I,cAAcnM,SAAQ,SAAAoM,GACR,EAAKnS,MAAM2F,OAAOb,IAAIqN,EAAGpN,IAC/BvE,SAAS,CAACmE,UAAU,EAAMC,WAAYuN,EAAG/F,cAG9D3C,OAAM,SAAAC,GAEFC,QAAQC,IAAI,OAAOF,GACnB,EAAK0H,aAAa1H,MAK1BnJ,KAAKC,SAAS,CAACiQ,sBAAsB,M,+CAIrClQ,KAAKC,SAAS,CACZqJ,aAAc,0FACd0G,kBAAkB,M,yCAIH3H,GAAc,IAAD,OAC9BrI,KAAKC,SAAS,CAACgQ,wBAAwB,EAAOF,eAAgB1H,IAE3C,MAAfA,GACFI,IAAMlE,IAAIlC,EAASR,WAAY,CAC7B6G,OAAQ,CACNC,OAAQ3I,KAAKP,MAAMkQ,KAAKnL,GACxBoE,MAAO5I,KAAKP,MAAM+P,IAAIhL,GACtBqN,OAAQxJ,KAETQ,MAAK,SAAAC,GACFM,QAAQC,IAAI,eAAgBP,EAAIE,KAAK8I,eACrChJ,EAAIE,KAAK8I,cAActM,SAAQ,SAAAoM,GACR,EAAKnS,MAAM2F,OAAOb,IAAIqN,EAAGpN,IAC/BvE,SAAS,CAACmE,UAAU,EAAMC,WAAYuN,EAAG/F,cAG9D3C,OAAM,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAK0H,aAAa1H,Q,qCAObqG,GACbxP,KAAKC,SAAS,CAAC+P,kBAAkB,EAAM1G,aAAckG,M,qCAGxC5B,EAASmE,GACtB,IAAInL,EAAO,QACPmL,IACFnL,EAAO,WAET5G,KAAKgR,eAAL,kBAA+BpD,EAA/B,YAA0ChH,EAA1C,mBACA5G,KAAKC,SAAS,CAACkQ,mBAAmB,M,oCAGtBhH,GACZnJ,KAAK6Q,aAAa1H,GAClBnJ,KAAKC,SAAS,CAACkQ,mBAAmB,M,yCAIlCnQ,KAAKC,SAAS,CAACkQ,mBAAmB,M,0CAGf,IAAD,OAGd9J,EAAU,GACdrG,KAAKP,MAAMoL,YAAYiB,OAAOtG,SAAQ,SAAAC,GACpC,EAAKiL,gBAAgBjL,EAAGY,MAE1BrG,KAAKC,SAAS,CAAC+R,SAAU3L,EAAS8J,mBAAmB,M,8CAIrDnQ,KAAKkR,WACLlR,KAAKC,SAAS,CAACiQ,sBAAsB,M,+CAKrClQ,KAAKkR,WACLlR,KAAKC,SAAS,CAACgQ,wBAAwB,M,yCAKvCjQ,KAAKC,SAAS,CAAC+P,kBAAkB,M,wCAIjChQ,KAAKC,SAAS,CAAC+P,kBAAkB,M,sCAGnBxN,EAAO6D,EAAS4L,GAAmB,IAAD,OAE5CC,EAAQlS,KAAKP,MAAM2F,OAAOb,IAAI/B,EAAMgC,IACpC0N,EAAMzS,MAAM2E,WACV9B,EAAeC,SAASC,EAAO0P,EAAMzS,MAAM4E,WAC3C4N,GACFC,EAAMjO,UAAS,GAEfiO,EAAMjO,UAAS,GAEjBoC,EAAQrD,KACJ,CAACwB,GAAIhC,EAAMgC,GAAIvB,KAAMT,EAAMS,KAAM4I,MAAOqG,EAAMzS,MAAM4E,cAG1D7B,EAAM+C,SAASC,SAAQ,SAAA6F,GACjB6G,EAAMzS,MAAM2E,UACd,EAAKsM,gBAAgBrF,EAAIhF,EAAS4L,Q,mCAO1B,IAAD,OAEXjS,KAAKkR,WACL,IAAI7K,EAAU,GACV4L,EAAmB,GAMvB,GALAjS,KAAKP,MAAMoL,YAAYiB,OAAOtG,SAAQ,SAAAC,GACpC,EAAKiL,gBAAgBjL,EAAGY,EAAS4L,MAI/BA,EAAiBnP,OAAS,EAAG,CAC/B,IAAIqD,EAAS,GAIb,OAHA8L,EAAiBzM,SAAQ,SAAA2D,GAAC,OAAIhD,GAAUgD,EAAI,QAC5CnJ,KAAKC,SAAS,CAACqJ,aAAcnD,SAC7BnG,KAAK2Q,kBAIPvH,QAAQC,IAAIhD,GACZ,IAAImK,EAAmBnK,EAAQpB,QAAO,SAACC,EAAGC,EAAG6G,GAE3C,OAAqB,IAAjBA,EACK9G,EAAEjC,KAAO,IAAMiC,EAAE2G,MAAQ,KAAO1G,EAAElC,KAAO,IAAMkC,EAAE0G,MAAQ,KAE3D3G,EAAIC,EAAElC,KAAO,IAAMkC,EAAE0G,MAAQ,QAOtC7L,KAAKC,SAAS,CACZmQ,cAAc,EACdC,aAAc,KACdG,iBAAkBA,IAGpB,IAAIxC,EAAW,QACXhO,KAAKP,MAAMmP,eAAiB,SAAW5O,KAAKP,MAAMoP,iBAChD,QAAU7O,KAAKP,MAAMqP,QACrB,WAAa9O,KAAKP,MAAMkQ,KAAKnL,GAAK,UAClCxE,KAAKP,MAAM+P,IAAIhL,GAAK,QAAU0J,KAAKC,UAAU9H,GAEnDoC,IAAM2F,KAAK/L,EAAST,WAAYoM,GAAUnF,MAAK,SAAAC,GAC7CM,QAAQC,IAAI,uBAAwBP,EAAIE,KAAKmJ,iBAC7C,EAAKlS,SACD,CAACmQ,cAAc,EAAMC,aAAcvH,EAAIE,KAAKmJ,qBAE/CjJ,OACC,SAAAC,GACEC,QAAQC,IAAI,WAAYF,GACxB,EAAK0H,aAAa1H,Q,mCAKbA,GAEX,IAAKA,EAAEI,SAML,OALAH,QAAQC,IAAI,WAAYF,QACxBnJ,KAAKC,SAAS,CACZqJ,aAAc,oCACd0G,kBAAkB,IAKtB5G,QAAQC,IAAIF,EAAEI,UAEY,MAAtBJ,EAAEI,SAAS6I,OACbpS,KAAKC,SACD,CAACqJ,aAAcH,EAAEI,SAASP,KAAKlB,MAAOkI,kBAAkB,IAE5DhQ,KAAKC,SACD,CACEqJ,aAAc,kCACRH,EAAEI,SAAS6I,OAAQpC,kBAAkB,M,yCAOnD,OAAOhQ,KAAKP,MAAMkQ,KAAK1M,KAAO,OAASjD,KAAKP,MAAM+P,IAAIvM,O,oCAG1CkG,M,0CAKZnJ,KAAKqS,mBAAmBrS,KAAKR,MAAMmQ,KAAM3P,KAAKR,MAAMgQ,O,yCAGnC8C,EAAOC,GAAO,IAAD,OAC1B5C,EAAO3P,KAAKR,MAAMkQ,MAAM8C,MAAK,SAAAC,GAC/B,OAAIA,EAAExP,OAASqP,EACNG,EAEF,QAELjD,EAAMG,EAAK+C,SAASF,MAAK,SAAAG,GAC3B,OAAIA,EAAE1P,OAASsP,EACNI,EAGF,QAGLC,EAAMvQ,EAASN,YAAc,IAAM4N,EAAKnL,GAAK,IAAMgL,EAAIhL,GAC3D4E,QAAQC,IAAIuJ,GACZnK,IAAMlE,IAAIqO,GAAK/J,MACX,SAAAC,GACEM,QAAQC,IAAIP,EAAIE,MAChB,IAAI5D,EAAS,IAAIwG,IACjBxG,EAAOC,IAAI,eAAgByD,EAAIE,MAC/B,EAAK/I,SACD,CACE0P,KAAMA,EACNH,IAAKA,EACL3E,YAAa/B,EAAIE,KACjB4G,QAAQ,EACRxK,OAAQA,IAGdgE,QAAQC,IAAI,iBAAkB,EAAK5J,MAAMoL,gBACxC3B,OACH,SAAA2J,GACEzJ,QAAQC,IAAIwJ,GACZ,EAAK5S,SAAS,CAACqJ,aAAcuJ,EAAK7C,kBAAkB,S,yCAIzC3J,EAAS7D,EAAO4C,EAAQmB,GACzCF,EAAQrD,KAAK,kBAAC,EAAD,CAAUwD,IAAKhE,EAAMgC,GAAIhC,MAAOA,EAAO4C,OAAQA,EACrCmB,MAAOA,EACP7C,cAAe1D,KAAK0D,mB,+BAGnC,IAAD,OAEH2C,EAAU,GAOd,OAN0B,IAAtBrG,KAAKP,MAAMmQ,QACb5P,KAAKP,MAAMoL,YAAYiB,OAAOlC,KAAI,SAAApH,GAChC,EAAKmB,mBAAmB0C,EAAS7D,EAAO,EAAK/C,MAAM2F,OAAQ,MAM3D,yBAAK5E,MAAO,CACVG,WAAY,eACZW,SAAU,OACV0D,KAAM,SAGN,kBAAC,EAAD,CAAatF,KAAMM,KAAKP,MAAMuQ,iBACjBR,IAAKxP,KAAKP,MAAM6J,aAChBnJ,QAASH,KAAK4Q,mBAG3B,kBAAC,EAAD,CAAqBlR,KAAMM,KAAKP,MAAMwQ,uBACjBtH,OAAQ3I,KAAKP,MAAMkQ,KAAKnL,GACxBoE,MAAO5I,KAAKP,MAAM+P,IAAIhL,GACtBgF,mBAAoBxJ,KAAKwJ,qBAE9C,kBAAC,EAAD,CAAoB9J,KAAMM,KAAKP,MAAMyQ,qBACjB1C,SAAUxN,KAAKwN,WAEnC,kBAAC,EAAD,CAAmB9N,KAAMM,KAAKP,MAAM0Q,kBACjBvH,MAAO5I,KAAKP,MAAM+P,IAAIhL,GACtBqJ,eAAgB7N,KAAKP,MAAMsQ,eAC3BpH,OAAQ3I,KAAKP,MAAMkQ,KAAKnL,GACxBwE,KAAMhJ,KAAKP,MAAMuS,SACjBpE,QAAS5N,KAAKP,MAAMsQ,eACpB1B,eAAgBrO,KAAKqO,eACrBC,cAAetO,KAAKsO,cACpBC,iBAAkBvO,KAAKuO,mBAE1C,kBAAC,EAAD,CAAiBxN,SAAUf,KAAKsR,yBAGhC,yBAAK5K,MAAO,OACPlG,MAAO,CACLkG,MAAO,OACPoM,QAAS,eACTlS,MAAO,MACPS,MAAO,OACP2D,KAAM,SAGX,6BAEE,kBAAC+N,EAAA,EAAD,CAAa3R,KAAM,QAASyF,MAAO,UAAW4C,WAAW,EAC5C5B,QAAS,aACpB,kBAAC,IAAD,CACItG,QAASvB,KAAK+Q,uBADlB,SAEA,kBAAC,IAAD,CACIxP,QAASvB,KAAKiQ,wBADlB,QAEA,kBAAC,IAAD,CACI1O,QAASvB,KAAKmQ,mBADlB,QAEA,kBAAC,IAAD,CAAQ5O,QAASvB,KAAKyQ,YAAtB,QACA,kBAAC,IAAD,CAAQlP,QAASvB,KAAKoR,mBACdpQ,SAAqC,MAA3BhB,KAAKP,MAAM4Q,cAD7B,mBAQJ,kBAAC7D,EAAA,EAAD,CAAOwG,UAAW,WAAYxS,MAAO,CAAC0O,cAAe,WACnD,2BAAOrC,OAAO,IAAInG,MAAO,SAClBlG,MAAO,CAACkG,MAAO,SAAUuM,UAAW,OAAQrS,MAAO,QACxD,+BACA,wBAAIJ,MAAO,CACTG,WAAY,eACZmM,gBAAiB,UACjBxL,SAAU,OACVb,aAAc,QACdC,YAAa,SAEb,wBAAIyH,QAAQ,IAAIzB,MAAO,UAsCrB,yBACIlG,MAAO,CAACsS,QAAS,iBAAkB9S,KAAKqR,sBAGhD,wBAAI7Q,MAAO,CACTG,WAAY,eACZmM,gBAAiB,UACjBxL,SAAU,SAEV,wBAAIoF,MAAO,UAAX,aACA,wBAAIA,MAAO,SAAUlG,MAAO,CAACI,MAAO,QAApC,UACA,wBAAI8F,MAAO,SAAUlG,MAAO,CAACI,MAAO,QAApC,gBAIF,+BACCyF,KAML,kBAAC,EAAD,CAAiB3G,KAAMM,KAAKP,MAAM2Q,aACjBnE,QAASjM,KAAKP,MAAM+Q,iBACpBrQ,QAASH,KAAKuR,aACdvI,KAAMhJ,KAAKP,MAAM4Q,aACjB/D,YAAa,eACXtM,KAAKqR,mBAAqB,IAC5BxG,YAAa7K,KAAKP,MAAMoL,eAK3C,yBAAKrK,MAAO,CAACU,OAAQ,SAAU,U,GA1gBKM,IAAMC,W,6FC2ErCyR,G,YAjFb,WAAY1T,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXiQ,MAAO,GACPE,QAAQ,EACRI,kBAAkB,EAClB1G,aAAc,IAEhB,EAAK6J,eAAiB,EAAKA,eAAetT,KAApB,gBATL,E,4EAYJE,GAEb,IAAI4I,EAAS5I,EAAMG,OAAOkT,cAAcA,cAAcC,aAAa,OAC/DzK,EAAQ7I,EAAMG,OAAOkT,cAAcA,cAAcC,aAAa,OAElErT,KAAKR,MAAM8T,YAAY3K,EAAQC,K,0CAIZ,IAAD,OAElBH,IAAMlE,IAAIlC,EAASP,aAAa+G,MAAK,SAAAC,GACnCM,QAAQC,IAAI,WAAWP,EAAIE,MAC3B,EAAK/I,SAAS,CAACyP,MAAO5G,EAAIE,KAAK0G,MAAOE,QAAQ,OAC7C1G,OACC,SAAA2J,GAAG,OAAIzJ,QAAQC,IAAIwJ,Q,oCAGXlD,GAAO,IAAD,OACdtJ,EAAU,GAOd,OANAsJ,EAAK+C,SAASlN,SAAQ,SAAAmN,GACpBtM,EAAQrD,KAAK,kBAACuQ,EAAA,EAAD,CAAUC,OAAQ,UAAY7D,EAAKnL,GAAK,IAAMmO,EAAEnO,GACtCiP,IAAK9D,EAAKnL,GAAIkP,IAAKf,EAAEnO,GACrBmF,MAAOgJ,EAAE1P,KACT1B,QAAS,EAAK4R,qBAEhC9M,I,+BAIC,IAAD,OAEP,IAA0B,IAAtBrG,KAAKP,MAAMmQ,OAAiB,CAE9B,IAAIvJ,EAAU,GACdrG,KAAKP,MAAMiQ,MAAMlK,SAAQ,SAAAiN,GAEvBpM,EAAQrD,KAAK,kBAACuQ,EAAA,EAAD,CAAU7M,MAAM,OAAO8M,OAAQ,UAAYf,EAAEjO,GACnCmP,KAAM,kBAACC,GAAA,EAAD,CAAQ/M,MAAO,YACrB8C,MAAO8I,EAAExP,MAAO,EAAK4Q,cACxCpB,QAIN,IAAIqB,EAAc,kBAACP,EAAA,EAAD,CAAUC,OAAQ,WACRG,KAAM,kBAACI,GAAA,EAAD,CAAMlN,MAAO,YACnB8C,MAAO,0BAA2BtD,GAE9D,OAAQ,kBAAC,IAAM9F,SAAP,KACF,kBAACyT,EAAA,EAAD,CACIC,gBAAiB,CAAC,YAClBC,oBAAqB,kBAAC,IAAD,MACrBC,kBAAmB,kBAAC,IAAD,MACnBC,kBAAmB,kBAACR,GAAA,EAAD,CAAQ/M,MAAO,YAClCwN,eAAgB,kBAACC,GAAA,EAAD,CAASzN,MAAM,aAEhCiN,IAOT,OAAO,S,GA7EUtS,IAAMC,WC6Nd8S,G,YA/Nb,WAAY/U,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXiQ,MAAO,GACP8E,YAAa,SACbC,eAAgB,GAChB3E,iBAAiB,EACjBF,QAAQ,EACRI,kBAAkB,EAClB1G,aAAc,IAEhB,EAAKoL,YAAc,EAAKA,YAAY7U,KAAjB,gBACnB,EAAK8U,eAAiB,EAAKA,eAAe9U,KAApB,gBACtB,EAAKyT,YAAc,EAAKA,YAAYzT,KAAjB,gBACnB,EAAK+U,YAAc,EAAKA,YAAY/U,KAAjB,gBAEnB,EAAKgV,eAAiBrT,IAAMyJ,YAhBX,E,yEAoBPtC,EAAQC,GAElBQ,QAAQC,IAAIV,EAAQC,GACpBQ,QAAQC,IAAIrJ,KAAKP,MAAMiQ,OACvB,IAAIC,EAAO3P,KAAK4U,YAAYE,SAASnM,IACrCS,QAAQC,IAAI,UAAWsG,GACvB,IAAIH,EAAM,KACVG,EAAK+C,SAASlN,SAAQ,SAAAmN,GAChBA,EAAEnO,KAAOsQ,SAASlM,KACpB4G,EAAMmD,MAIV3S,KAAKC,SACD,CAAC2P,QAAQ,EAAM4E,YAAa7E,EAAK1M,KAAMwR,eAAgBjF,EAAIvM,S,yCAK/DjD,KAAKC,SAAS,CAAC+P,kBAAkB,M,wCAIjChQ,KAAKC,SAAS,CAAC+P,kBAAkB,M,0CAGd,IAAD,OAElBvH,IAAMlE,IAAIlC,EAASP,aAAa+G,MAAK,SAAAC,GACnCM,QAAQC,IAAIP,EAAIE,MAChB,EAAK/I,SAAS,CAACyP,MAAO5G,EAAIE,KAAK0G,MAAOE,QAAQ,OAC7C1G,OACC,SAAA2J,GAAG,OAAIzJ,QAAQC,IAAIwJ,Q,+BAKvB,IAAIrD,EACAG,EAeJ,OAb0B,IAAtB3P,KAAKP,MAAMmQ,SAED,OADZD,EAAO3P,KAAK+U,oBAEVpF,EAAO3P,KAAKP,MAAMiQ,MAAM,IAMxBF,EAHGxP,KAAKP,MAAMgV,eAGRzU,KAAKP,MAAMgV,eAFX9E,EAAK+C,SAAS,GAAGzP,MAOvB,kBAAC,IAAM1C,SAAP,KAGE,6BACE,kBAACyU,EAAA,EAAD,CAAOtV,KAAMM,KAAKP,MAAMuQ,iBACjBiF,OAAQjV,KAAK4Q,kBAClB,kBAACoE,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,eAEF,kBAACJ,EAAA,EAAMK,KAAP,KAAarV,KAAKP,MAAM6J,cACxB,kBAAC0L,EAAA,EAAMM,OAAP,KACE,kBAACnU,EAAA,EAAD,CAAQ0G,QAAQ,YAAYtG,QAASvB,KAAK4Q,kBAA1C,WAOJ,yBAAKpQ,MAAO,CACVa,MAAO,OACPyR,QAAS,eACT7K,YAAa,OACbC,WAAY,OACZ4E,gBAAgB,YAGhB,kBAAC,GAAD,CAAUwG,YAAatT,KAAKsT,eAE9B,yBAAK5M,MAAM,SAASlG,MAAO,CAACsM,gBAAgB,YAExC9M,KAAKP,MAAMmQ,QAAqC,WAA3B5P,KAAKP,MAAM+U,YAC5B,kBAAC,EAAD,CAAkBhO,IAAKxG,KAAKP,MAAM+U,YAAc,IAAMhF,EACpC/C,IAAKzM,KAAK6U,eACVnF,MAAO1P,KAAKP,MAAMiQ,MAClBC,KAAM3P,KAAKP,MAAM+U,YACjBhF,IAAKxP,KAAKP,MAAMgV,iBAChC,U,kCASR1U,GAQV,GANAC,KAAKC,SAAS,CACZuU,YAAazU,EAAMG,OAAOP,MAC1B8U,eAAgB,KAGlBrL,QAAQC,IAAItJ,EAAMG,OAAOP,OACrBK,KAAKP,MAAMmQ,QAAiC,WAAvB7P,EAAMG,OAAOP,MAAoB,CACxDyJ,QAAQC,IAAI,gCACDrJ,KAAKuV,cAAcxV,EAAMG,OAAOP,U,qCAIhCI,GACbC,KAAKC,SAAS,CAACwU,eAAgB1U,EAAMG,OAAOP,QAExCK,KAAKP,MAAMmQ,QAAqC,WAA3B5P,KAAKP,MAAM+U,aAClCpL,QAAQC,IAAI,iC,sCAOd,OACI,4BAAQ7I,MAAO,CAACG,WAAY,eAAgBC,MAAO,SAC3CG,SAAUf,KAAK0U,aACrB,4BAAQlO,IAAK,SAAU7G,MAAO,UAA9B,UAEEK,KAAKP,MAAMiQ,MAAM9F,KAAI,SAAC6I,GACpB,OAAO,4BAAQjM,IAAKiM,EAAExP,KAAMtD,MAAO8S,EAAExP,MAAOwP,EAAExP,Y,yCAUxD,IAAI0M,EAOJ,OALI3P,KAAKP,MAAMmQ,SACbD,EAAO3P,KAAK+U,kBAIiB,WAA3B/U,KAAKP,MAAM+U,YACL,iCAKJ,4BAAQ7U,MAAOK,KAAKP,MAAMgV,eAClBjU,MAAO,CAACG,WAAY,eAAgBC,MAAO,SAC3CG,SAAUf,KAAK2U,gBAEnBhF,EAAK+C,SAAS9I,KAAI,SAAA4F,GAChB,OAAO,4BAAQhJ,IAAKgJ,EAAIhL,GACT7E,MAAO6P,EAAIvM,MAAOuM,EAAIvM,Y,uCAajC,IAAD,OACf,OAAOjD,KAAKP,MAAMiQ,MAAM8C,MAAK,SAACC,EAAGxM,GAC/B,OAAIwM,EAAExP,OAAS,EAAKxD,MAAM+U,YACjB/B,EAEF,U,oCAKG+C,GACZ,OAAOxV,KAAKP,MAAMiQ,MAAM8C,MAAK,SAACC,EAAGxM,GAC/B,OAAIwM,EAAExP,OAASuS,EACN/C,EAEF,U,kCAKC9J,GACV,OAAO3I,KAAKP,MAAMiQ,MAAM8C,MAAK,SAACC,EAAGxM,GAC/B,OAAIwM,EAAEjO,KAAOmE,EACJ8J,EAEF,Y,GA3NQjR,IAAMC,WCcZgU,OAjBf,WACE,OACI,yBAAKjV,MAAO,CAACsM,gBAAgB,YAC3B,wBAAItM,MAAO,CAACG,WAAY,uBAAxB,sCAEA,uBAAGH,MAAO,CAACG,WAAY,eAAgBW,SAAU,QAC9CoU,KAAM,YAAaxV,OAAQ,UAD9B,mBAEA,uBAAGM,MAAO,CAACG,WAAY,eAAgBW,SAAU,QAC/CoU,KAAM,iBAAkBxV,OAAQ,UADlC,oBAGA,yBAAKyV,UAAU,OACb,kBAAC,GAAD,SCHUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5S,MACvB,2D,OCVN6S,IAASC,OAAO,kBAAC,GAAD,CAAKzV,MAAO,CAACsM,gBAAgB,aAAetB,SAAS0K,eAAe,SD2H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxN,MAAK,SAAAyN,GACJA,EAAaC,gBAEdrN,OAAM,SAAApB,GACLsB,QAAQtB,MAAMA,EAAM0O,c","file":"static/js/main.13a53b68.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n// ExpandedText shows a field value within a large field (TextArea)\r\n// and is useful when editing fields with large values\r\nexport default class ExpandedText extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {show: this.props.show, value: this.props.value};\r\n    this.closeThis = this.closeThis.bind(this);\r\n    this.valueChanged = this.valueChanged.bind(this);\r\n  }\r\n\r\n  valueChanged(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  closeThis() {\r\n    this.setState({show: true});\r\n    this.props.onClose(this.state.value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.show === false && this.props.show === true && this.state.show\r\n        === false) {\r\n      this.setState({show: true, value: this.props.value})\r\n    } else if (this.props.show === false && this.state.show\r\n        === true) {\r\n      this.setState({show: false, value: this.props.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        (this.state.show === true) ?\r\n\r\n            <React.Fragment>\r\n              <div style={{borderBottom: 'solid', borderColor: 'red'}}>\r\n\r\n        <textarea\r\n            style={{\r\n              fontFamily: \"courier new\",\r\n              width: '100%',\r\n              minHeight: '80px',\r\n              maxHeight: '200px'\r\n            }}\r\n            onChange={this.valueChanged} disabled={this.props.readOnly} value={this.state.value}/>\r\n\r\n                <div style={{height: '25px'}}>\r\n                  <Button size={\"sm\"} style={{\r\n                    float: 'right', fontSize: '10px'\r\n                  }} onClick={this.closeThis}> OK </Button>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n            :\r\n            null\r\n    );\r\n  }\r\n\r\n}","// AppProps are various URL's that are used by axios\r\nexport class AppProps {\r\n\r\n  static FixedField = \"Fixed\";\r\n  static VariableField = \"Variable\";\r\n  static BitmappedField = \"Bitmapped\";\r\n\r\n  constructor() {\r\n    //this.baseUrl = 'http://localhost:8080';\r\n    this.baseUrl = '';\r\n    this.sendMsgUrl = this.baseUrl + '/iso/v1/send';\r\n    this.loadMsgUrl = this.baseUrl + '/iso/v1/loadmsg';\r\n    this.allSpecsUrl = this.baseUrl + '/iso/v1/specs';\r\n    this.templateUrl = this.baseUrl + '/iso/v1/template';\r\n    this.parseTraceUrl = this.baseUrl + '/iso/v1/parse';\r\n    this.saveMsgUrl = this.baseUrl + '/iso/v1/save';\r\n  }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","\r\n// FieldValidator provides validation logic for field values\r\nimport {AppProps} from \"./Properties\";\r\n\r\nclass FieldValidator {\r\n\r\n  constructor(props) {\r\n    this.validate = this.validate.bind(this);\r\n  }\r\n\r\n  validate(field, fieldData, errors) {\r\n\r\n    //console.log(\"validate\", field, fieldData, errors);\r\n    let validationFailed = false;\r\n\r\n    if (field.Type === AppProps.FixedField) {\r\n\r\n      if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n        if (fieldData.length !== field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n          validationFailed = true;\r\n        }\r\n      } else {\r\n        if (fieldData.length !== 2 * field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n              / 2}`);\r\n          validationFailed = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    let dataErr = false;\r\n\r\n    if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n      if (fieldData.length % 2 !== 0) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n        validationFailed = true;\r\n        dataErr = true;\r\n      }\r\n\r\n      if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n          \"^[0-9,a-f,A-F]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n        validationFailed = true;\r\n      }\r\n      if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    if (!dataErr && field.Type === AppProps.VariableField) {\r\n\r\n      let fieldLen = fieldData.length;\r\n      if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n        fieldLen = fieldData.length / 2;\r\n      }\r\n\r\n      if (field.MinSize > 0 && fieldData.length < field.MinSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size of ${fieldLen} is less than required min of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n      if (field.MaxSize > 0 && fieldData.length > field.MaxSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size  of ${fieldLen} is greater than required max of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    //TODO:: other checks like content etc\r\n    return validationFailed;\r\n\r\n  }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import React from \"react\";\r\nimport ExpandedText from '../../Utils/ExpandedText.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport fieldValidator from \"../../Utils/FieldValidator\";\r\nimport {AppProps} from \"../../Utils/Properties\";\r\nimport appProps from \"../../Utils/Properties\";\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n    this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.setSelected = this.setSelected.bind(this);\r\n    this.setNewValue = this.setNewValue.bind(this);\r\n    this.showExpanded = this.showExpanded.bind(this);\r\n    this.closeExpanded = this.closeExpanded.bind(this);\r\n    this.getBgColor = this.getBgColor.bind(this);\r\n    this.setError = this.setError.bind(this);\r\n    this.toggleExpanded = this.toggleExpanded.bind(this);\r\n\r\n    //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n    //because they're mandatory fields in ISO\r\n\r\n    let initialExpandBtnLabel = '+';\r\n    this.selectable = true;\r\n    //readOnly is true when displaying a response segment\r\n    if (this.props.readOnly) {\r\n      this.selectable = false;\r\n\r\n      let selected = false;\r\n      let fieldValue = this.props.id2Value.get(this.props.field.ID)\r\n      if (fieldValue) {\r\n        selected = true;\r\n      }\r\n\r\n      this.state = {\r\n        fieldEditable: true,\r\n        bgColor: 'white',\r\n        hasError: false,\r\n        selected: selected,\r\n        id2Value: this.props.id2Value,\r\n        fieldValue: fieldValue,\r\n        expandBtnLabel: initialExpandBtnLabel,\r\n        showExpanded: false,\r\n        field: this.props.field\r\n      };\r\n    } else {\r\n      let defaultFieldValue = \"\";\r\n      if ([\"Message Type\", \"MTI\", \"Bitmap\"].includes(\r\n          this.props.field.Name)) {\r\n        this.selectable = false;\r\n        let fieldEditable = true;\r\n        if (this.props.field.Name === \"Bitmap\") {\r\n          defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n          // Bitmap should not be editable\r\n          fieldEditable = false;\r\n        }\r\n\r\n        this.state = {\r\n          fieldEditable: fieldEditable,\r\n          bgColor: \"white\",\r\n          hasError: false,\r\n          selected: true,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false,\r\n          field: this.props.field\r\n        };\r\n      } else {\r\n        this.state = {\r\n          fieldEditable: true,\r\n          bgColor: \"white\",\r\n          selected: false,\r\n          hasError: false,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false,\r\n          field: this.props.field\r\n        };\r\n      }\r\n      this.props.isoMsg.set(this.props.field.ID, this);\r\n    }\r\n  }\r\n\r\n  getBgColor() {\r\n    if (this.state.hasError) {\r\n      return \"red\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n\r\n  }\r\n\r\n  setError(hasError) {\r\n    this.setState({hasError: hasError});\r\n  }\r\n\r\n  showExpanded() {\r\n    this.setState({showExpanded: true});\r\n  }\r\n\r\n  toggleExpanded() {\r\n    if (this.state.showExpanded) {\r\n      this.setState({showExpanded: false, expandBtnLabel: '+'});\r\n    } else {\r\n      this.setState({showExpanded: true, expandBtnLabel: '-'});\r\n    }\r\n\r\n  }\r\n\r\n  closeExpanded() {\r\n    this.setState({showExpanded: false});\r\n  }\r\n\r\n  setNewValue(newValue) {\r\n    this.setState({fieldValue: newValue, showExpanded: false});\r\n    this.toggleExpanded()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.id2Value !== this.props.id2Value) {\r\n      this.setState({\r\n        fieldValue: this.props.id2Value.get(this.props.field.ID),\r\n        id2Value: this.props.id2Value\r\n      });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(event) {\r\n    //console.log(\"onField Update\", this.props.field);\r\n    //console.log(\r\n    //    `${this.props.field.Name}: Child field ${event.fieldName} has been updated. ChangeType: ${event.ChangeType}`);\r\n\r\n    if (this.props.field.Type === AppProps.BitmappedField) {\r\n      // get the position of the field\r\n      this.props.field.Children.forEach(f => {\r\n\r\n        if (f.Name === event.fieldName) {\r\n          let currentVal = this.state.fieldValue;\r\n          let bits = Array.from(currentVal);\r\n          //console.log(\"Changing bit \" + f.Position);\r\n          if (event.ChangeType === 'FieldSelected') {\r\n            bits[f.Position - 1] = '1';\r\n            if (f.Position > 64) {\r\n              bits[0] = '1';\r\n            }\r\n          } else if (event.ChangeType === 'FieldDeselected') {\r\n            bits[f.Position - 1] = '0';\r\n\r\n            //if all bits from 65 to 128 are off then turn bit 1 off\r\n            let turnOff = true;\r\n            for (let i = 65; i <= 128; i++) {\r\n              if (bits[i - 1] === '1') {\r\n                turnOff = false;\r\n                break;\r\n              }\r\n            }\r\n            if (turnOff) {\r\n              bits[0] = '0';\r\n            }\r\n\r\n          }\r\n          let newValue = bits.reduce((p = \"\", c) => p + c);\r\n          this.setState({fieldValue: newValue})\r\n\r\n        }\r\n      })\r\n    } else {\r\n\r\n      let obj = {fieldName: this.props.field.Name};\r\n      if (event.ChangeType === 'FieldSelected') {\r\n        //console.log(\"setting self as selected\", this.props.field.Name);\r\n        this.setState({selected: true});\r\n        obj.ChangeType = \"FieldSelected\";\r\n      } else if (event.ChangeType === 'FieldDeselected') {\r\n        this.setState({selected: false});\r\n        obj.ChangeType = \"FieldDeselected\";\r\n      } else {\r\n\r\n        //TODO:: field value has changed, it needs to be parsed and children\r\n        // have to be changed - wait for the new WASM library for ISO parsing capabilities\r\n        // on the frontend :-)\r\n\r\n      }\r\n\r\n      // for fixed and variable type field, if they have children\r\n      // the whole set of children and then let the parent know too\r\n\r\n      this.props.field.Children.forEach(c => {\r\n        if (event.ChangeType === 'FieldSelected') {\r\n          this.props.isoMsg.get(c.ID).setSelected(true);\r\n        } else if (event.ChangeType === 'FieldDeselected') {\r\n          this.props.isoMsg.get(c.ID).setSelected(false);\r\n        }\r\n      });\r\n\r\n      //pass on the message to the parent that I have changed\r\n      this.props.onFieldUpdate(obj);\r\n\r\n    }\r\n  }\r\n\r\n  setSelected(selected) {\r\n\r\n    this.setState({selected: selected});\r\n    this.props.field.Children.forEach(c => {\r\n      this.props.isoMsg.get(c.ID).setSelected(selected);\r\n    });\r\n\r\n    if (selected) {\r\n      let errors = []\r\n      if (fieldValidator.validate(this.props.field, this.state.fieldValue,\r\n          errors)) {\r\n        this.setState(\r\n            {hasError: true, errMsg: errors[0]})\r\n      }\r\n    } else {\r\n      this.setState({hasError: false, errMsg: null})\r\n\r\n    }\r\n\r\n  }\r\n\r\n  fieldSelectionChanged(event) {\r\n\r\n    let obj = {fieldName: this.props.field.Name};\r\n    let selected = false;\r\n    if (event.target.checked) {\r\n      obj.ChangeType = \"FieldSelected\";\r\n      selected = true;\r\n    } else {\r\n      obj.ChangeType = \"FieldDeselected\";\r\n    }\r\n\r\n    if (this.props.field.Type !== AppProps.BitmappedField) {\r\n      this.setSelected(selected);\r\n    }\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  fieldValueChanged(event) {\r\n\r\n    let errors = []\r\n    if (this.state.selected) {\r\n      if (fieldValidator.validate(this.props.field, event.target.value,\r\n          errors)) {\r\n        this.setState(\r\n            {hasError: true, errMsg: errors[0], fieldValue: event.target.value})\r\n      } else {\r\n\r\n        this.setState(\r\n            {hasError: false, errMsg: null, fieldValue: event.target.value});\r\n        let obj = {\r\n          fieldName: this.props.field.Name,\r\n          ChangeType: \"ValueChanged\"\r\n        };\r\n        this.props.onFieldUpdate(obj)\r\n      }\r\n    } else {\r\n      this.setState(\r\n          {hasError: false, errMsg: null});\r\n    }\r\n\r\n  }\r\n\r\n  appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n    let key = field.ID;\r\n    if (this.props.readOnly) {\r\n      key = 'response_seg_' + field.ID;\r\n    }\r\n    content.push(<IsoField key={key} field={field} id2Value={id2Value}\r\n                           readOnly={this.props.readOnly}\r\n                           parentField={parentField} isoMsg={this.props.isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionColumnContent;\r\n\r\n    if (this.selectable) {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    } else {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         disabled={true}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    }\r\n\r\n    let fieldSpecColumnContent;\r\n    let positionInParent = \"\";\r\n    if (this.props.field.ParentId > 0) {\r\n      positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n    }\r\n\r\n    let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type\r\n        + ' / ';\r\n    if (this.props.field.Type === AppProps.FixedField) {\r\n      fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / '\r\n          + 'Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.VariableField) {\r\n      fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize\r\n          + ' / ' + 'Length Encoding: ' + this.props.field.LengthEncoding\r\n          + ' / ' + 'Data Encoding: ' + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.BitmappedField) {\r\n    }\r\n\r\n    let children = [];\r\n\r\n    this.props.field.Children.forEach(\r\n        c => this.appendFieldContent(children, c, this.props.field,\r\n            this.state.id2Value, this.props.level + 1));\r\n\r\n    let levelIndicator = \"\";\r\n    for (let i = 0; i < this.props.level; i++) {\r\n      levelIndicator += '\\u2193';\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n          <tr>\r\n            {/* selection column */}\r\n            {selectionColumnContent}\r\n\r\n            {/* field name column*/}\r\n\r\n            <OverlayTrigger overlay={(\r\n                <Tooltip id=\"hi\"\r\n                         style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                            placement=\"top\">\r\n              <td style={{\r\n                width: \"100px\",\r\n                fontSize: \"12px\"\r\n              }}>\r\n                <InputLabel style={{fontSize: \"14px\"}}>{levelIndicator + ' '\r\n                + this.props.field.Name}</InputLabel>\r\n              </td>\r\n            </OverlayTrigger>\r\n\r\n            {/* field specification column */}\r\n            {/*fieldSpecColumnContent*/}\r\n\r\n            {/* field value column */}\r\n            <td>\r\n\r\n              <TextField margin={\"dense\"} size={\"small\"} variant={\"standard\"}\r\n                         value={this.state.fieldValue}\r\n                         error={this.state.hasError}\r\n                         helperText={this.state.errMsg}\r\n                         onChange={this.fieldValueChanged}\r\n                         style={{width: \"70%\"}}\r\n                         disabled={this.props.readOnly\r\n                         || !this.state.fieldEditable}\r\n                         key={\"fld_value_\" + this.state.field.ID}\r\n                         onDoubleClick={this.toggleExpanded}\r\n              />\r\n\r\n              <Button size={\"small\"} variant={\"contained\"} style={{\r\n                float: 'right',\r\n                fontSize: '14px',\r\n                marginRight: '2%',\r\n                marginLeft: \"2%\"\r\n              }}\r\n                      onClick={this.toggleExpanded}> {this.state.expandBtnLabel}\r\n              </Button>\r\n\r\n            </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"3\">\r\n              <ExpandedText show={this.state.showExpanded}\r\n                            value={this.state.fieldValue}\r\n                            readOnly={this.props.readOnly}\r\n                            onClose={this.setNewValue}/>\r\n            </td>\r\n          </tr>\r\n          {children}\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, selectedMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n  }\r\n\r\n  selectedMsgChanged(event) {\r\n    this.setState({selectedMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.props.specId,\r\n          msgId: this.props.msgId,\r\n        }\r\n      }).then(res => {\r\n        // console.log(res);\r\n        this.setState(\r\n            {\r\n              savedMsgs: res.data.saved_messages,\r\n              selectedMsg: res.data.saved_messages[0],\r\n              show: true\r\n            });\r\n\r\n      }).catch(e => {\r\n            //FIXME\r\n            console.log(e);\r\n            this.setState({show: true, errorMessage: e.response.data});\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.closeLoadMsgDialog(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n\r\n              <TextField type={\"text\"} key={\"msg_name_save\"}\r\n                         margin={\"dense\"}\r\n                         fullWidth={true} select={true}\r\n                         variant={\"outlined\"} label={\"Saved Message\"}\r\n                         value={this.state.selectedMsg}\r\n                         onChange={this.selectedMsgChanged}>\r\n\r\n\r\n                {this.state.savedMsgs.map((sm) => {\r\n                  return <MenuItem key={sm} value={sm}>{sm}</MenuItem>\r\n                })\r\n                }\r\n              </TextField>\r\n            </React.Fragment>;\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                  maxWidth={\"sm\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Select\r\n              Message</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      {content}\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n\r\n        /*<Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Load Saved Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>*/\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField/IsoField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Draggable from \"react-draggable\";\r\n\r\n// ResponseSegment displays the response to an ISO message\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      data: this.props.data,\r\n      msgTemplate: this.props.msgTemplate\r\n    }\r\n    this.hideResponseSegment = this.hideResponseSegment.bind(this);\r\n    this.copyToClipboard = this.copyToClipboard.bind(this);\r\n\r\n    this.textAreaRef = React.createRef();\r\n  }\r\n\r\n  appendFieldContent(content, field, idToField, level) {\r\n    content.push(<IsoField key={'response_seg_' + field.ID} field={field}\r\n                           id2Value={idToField}\r\n                           readOnly={true} level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n    return \"\"\r\n  }\r\n\r\n  hideResponseSegment() {\r\n    this.setState({show: false});\r\n    this.props.onClose();\r\n  }\r\n\r\n  collectData(field, idToValue, content) {\r\n    if (idToValue.get(field.ID)) {\r\n      let val = idToValue.get(field.ID);\r\n      content.push(`${field.Name}: ${val}`);\r\n    }\r\n    if (field.Children.length > 0) {\r\n      field.Children.forEach(cf => {\r\n        this.collectData(cf, idToValue, content)\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if (prevProps.show === false && this.props.show === true) {\r\n      this.setState({\r\n        show: true,\r\n        data: this.props.data,\r\n        msgTemplate: this.props.msgTemplate\r\n      })\r\n    }\r\n  }\r\n\r\n  copyToClipboard() {\r\n    this.textAreaRef.current.select();\r\n    if (!document.execCommand('copy')) {\r\n      alert('Failed to copy to clipboard!')\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    let forClipboard = [];\r\n    if (this.state.show) {\r\n\r\n      let idToField = new Map();\r\n      this.state.data.forEach(f => {\r\n        idToField.set(f.ID, f.Value);\r\n      });\r\n\r\n      this.state.msgTemplate.fields.forEach(field => {\r\n        this.collectData(field, idToField, forClipboard)\r\n      });\r\n      let clipboardText = \"ISO Response  \\n|---------------|\\n\"\r\n          + forClipboard.reduce((p, c, currentIndex) => {\r\n            if (currentIndex === 1) {\r\n              return p + \"\\n\" + c + \"\\n\";\r\n            } else {\r\n              return p + c + \"\\n\";\r\n            }\r\n          })\r\n\r\n      clipboardText = \"ISO Request  \\n|---------------|\\n\"\r\n          + this.props.reqData + \"\\n\\n\" + clipboardText + \"\\n\\n\";\r\n\r\n      this.state.msgTemplate.fields.forEach(field => {\r\n        this.appendFieldContent(content, field, idToField, 0)\r\n      });\r\n\r\n      //console.log(content);\r\n\r\n      return (\r\n          <React.Fragment>\r\n\r\n\r\n            {this.state.show ?\r\n                <Dialog open={this.state.show}\r\n                        onClose={this.hideResponseSegment} scroll={\"paper\"}\r\n                        PaperComponent={PaperComponent}\r\n                        aria-labelledby=\"draggable-dialog-title\"\r\n                        maxWidth={\"sm\"} fullWidth={true}\r\n                        disableBackdropClick={true}>\r\n                  <DialogTitle style={{cursor: 'move'}}\r\n                               id=\"draggable-dialog-title\">{this.props.dialogTitle}</DialogTitle>\r\n                  <DialogContent dividers={true}>\r\n\r\n                    <Paper>\r\n<textarea ref={this.textAreaRef}\r\n          style={{\r\n            opacity: \"0.01\",\r\n            position: \"absolute\",\r\n            zIndex: -9999,\r\n            height: 0\r\n          }}>{clipboardText}\r\n                  </textarea>\r\n\r\n                      <table border=\"0\" align={\"center\"}>\r\n                        <thead>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#eed143\",\r\n                          fontSize: \"15px\",\r\n                          align: \"center\",\r\n                          borderBottom: 'solid',\r\n                          borderColor: 'blue'\r\n                        }}>\r\n                          <td colSpan=\"3\"\r\n                              align={\"center\"}>{\"Response Segment\"}</td>\r\n                        </tr>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#3effba\",\r\n                          fontSize: \"14px\",\r\n                        }}>\r\n                          <td align={\"center\"}>Selection</td>\r\n                          <td align={\"center\"} style={{width: \"35%\"}}>Field</td>\r\n                          <td align={\"center\"} style={{width: \"50%\"}}>Field Data\r\n                          </td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {content}\r\n                        </tbody>\r\n                      </table>\r\n                    </Paper>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={this.copyToClipboard} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Copy To Clipboard\r\n                    </Button>\r\n                    <Button onClick={this.hideResponseSegment} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Close\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n          </React.Fragment>);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n      <Draggable handle=\"#draggable-dialog-title\"\r\n                 cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n        <Paper {...props} />\r\n      </Draggable>\r\n  );\r\n}","import React from 'react'\r\nimport {Button} from \"react-bootstrap\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, traceMsg: '', errorMessage: null};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.traceChanged = this.traceChanged.bind(this);\r\n    this.isValidTrace = this.isValidTrace.bind(this);\r\n  }\r\n\r\n  isValidTrace(trace) {\r\n    return !!(trace.trim() !== \"\" && (trace.length\r\n        % 2 === 0 && trace.match(\"^[0-9,a-f,A-F]+$\")));\r\n\r\n  }\r\n\r\n  traceChanged(event) {\r\n\r\n    let updatedTrace = event.target.value;\r\n\r\n    if (!this.isValidTrace(updatedTrace)) {\r\n      this.setState({\r\n        traceMsg: updatedTrace,\r\n        errorMessage: \"Input is not valid hex\"\r\n      });\r\n    } else {\r\n      this.setState({traceMsg: updatedTrace, errorMessage: null});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true, traceMsg: ''});\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    if (this.isValidTrace(this.state.traceMsg)) {\r\n      this.setState({show: false})\r\n      this.props.setTrace(this.state.traceMsg);\r\n    }\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    this.props.setTrace(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                  maxWidth={\"md\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Parse\r\n              Trace</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      <TextField key={\"trace_input\"} variant={\"outlined\"}\r\n                                 label={\"Hex Trace\"} margin={\"dense\"}\r\n                                 fullWidth={true} value={this.state.traceMsg}\r\n                                 error={this.state.errorMessage !== null}\r\n                                 onChange={this.traceChanged} rows={10}\r\n                                 helperText={this.state.errorMessage}\r\n                                 multiline={true}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      msgName: props.initialMessage,\r\n      \"updateIfExists\": false\r\n    };\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.msgNameChanged = this.msgNameChanged.bind(this);\r\n    this.updateIfExistsChanged = this.updateIfExistsChanged.bind(this);\r\n  }\r\n\r\n  msgNameChanged(event) {\r\n    this.setState({errorMessage: '', msgName: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      this.setState(\r\n          {show: true, msgName: this.props.msgName});\r\n\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n\r\n    if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n      this.setState({errorMessage: 'Please specify a message!'});\r\n      return;\r\n    }\r\n\r\n    let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n        + '&dsName=' + this.state.msgName + '&updateMsg='\r\n        + this.state.updateIfExists + '&msg=' + JSON.stringify(\r\n            this.props.data);\r\n\r\n    axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n      console.log(res);\r\n      this.props.msgSaveSuccess(this.state.msgName, this.state.updateIfExists);\r\n      this.setState({show: false});\r\n\r\n    }).catch(e => {\r\n          this.props.msgSaveFailed(e);\r\n          this.setState({show: false});\r\n        }\r\n    );\r\n\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.props.msgSaveCancelled();\r\n    this.setState({show: false});\r\n  }\r\n\r\n  updateIfExistsChanged(event) {\r\n    this.setState({updateIfExists: event.target.checked});\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true} maxWidth={\"sm\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Save Message</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      <TextField type={\"text\"} key={\"msg_name_save\"} margin={\"dense\"}\r\n                                 fullWidth={true}\r\n                                 variant={\"outlined\"} label={\"Message Name\"}\r\n                                 value={this.state.msgName}\r\n                                 onChange={this.msgNameChanged}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid container>\r\n                    <Grid item xs={4}>\r\n                      <FormControlLabel\r\n                          control={<Checkbox key={\"key_update_if_exists\"}\r\n                                             size={\"sm\"}\r\n                                             checked={this.state.updateIfExists}\r\n                                             onChange={this.updateIfExistsChanged}/>}\r\n                          label={\"Overwrite\"}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n// NetworkSettings is a component that manages the ip, port and MLI type\r\n// used when sending a message\r\nclass NetworkSettings extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      targetServerIp: \"127.0.0.1\",\r\n      targetServerPort: \"6666\",\r\n      mliType: \"2i\"\r\n    }\r\n\r\n    this.serverIpChanged = this.serverIpChanged.bind(this);\r\n    this.serverPortChanged = this.serverPortChanged.bind(this);\r\n    this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n\r\n  }\r\n\r\n  mliTypeChanged(e) {\r\n    this.setState({mliType: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, this.state.targetServerPort,\r\n        e.target.value)\r\n  }\r\n\r\n  serverIpChanged(e) {\r\n    this.setState({targetServerIp: e.target.value});\r\n    this.props.onChange(e.target.value, this.state.targetServerPort,\r\n        this.state.mliType)\r\n  }\r\n\r\n  serverPortChanged(e) {\r\n    this.setState({targetServerPort: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, e.target.value,\r\n        this.state.mliType)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div align={\"left\"}\r\n             style={{\r\n               align: 'left',\r\n               height: \"80px\",\r\n               verticalAlign: \"baseline\",\r\n               margin: \"10px\"\r\n             }}>\r\n\r\n\r\n          <table\r\n              style={{\r\n                fontFamily: 'lato-regular',\r\n                fontSize: '14px'\r\n              }}>\r\n            <tr>\r\n              <td>\r\n                <TextField id=\"ns_ip\" label=\"IP\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"127.0.0.1\"}\r\n                           onChange={this.serverIpChanged}/>\r\n              </td>\r\n              <td>\r\n\r\n                <TextField id=\"ns_port\" label=\"Port\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"6666\"}\r\n                           onChange={this.serverPortChanged}/>\r\n              </td>\r\n\r\n              <td>\r\n                <TextField select size={\"small\"}\r\n                    value={this.state.mliType} variant={\"outlined\"} label={\"MLI\"}\r\n                    onChange={this.mliTypeChanged}>\r\n                  <MenuItem value={\"2i\"}>2I</MenuItem>\r\n                  <MenuItem value={\"2e\"}>2E</MenuItem>\r\n                </TextField>\r\n\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkSettings","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class AlertDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show};\r\n\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({show: false})\r\n    this.props.onClose();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    \r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (<Dialog\r\n        open={this.state.show}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle\r\n          id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {this.props.msg}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={this.handleClose} color=\"primary\">\r\n          OK\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>);\r\n\r\n  }\r\n}","import React from 'react';\r\nimport axios from \"axios\";\r\nimport IsoField from './IsoField/IsoField.js'\r\nimport SelectMessageDialog from '../Dialogs/SelectMessageDialog.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport appProps from '../Utils/Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"../Dialogs/ParseMessageDialog\";\r\nimport SaveMessageDialog from \"../Dialogs/SaveMessageDialog\";\r\nimport fieldValidator from '../Utils/FieldValidator'\r\n\r\nimport 'typeface-roboto';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NetworkSettings from \"../Utils/NetworkSettings\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport AlertDialog from \"../Dialogs/AlertDialog\";\r\n\r\n// MessageStructure is the central component that encompasses the Request and\r\n// the response segments along with NetworkSettings etc\r\nexport default class MessageStructure extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    console.log(\"$msg_structure$\", this.props.specs, this.props.spec,\r\n        this.props.msg);\r\n\r\n    this.state = {\r\n      msgTemplate: null,\r\n      loaded: false,\r\n      spec: props.spec,\r\n      msg: props.msg,\r\n      shouldShow: props.showMsgTemplate,\r\n      targetServerIp: '127.0.0.1',\r\n      targetServerPort: '6666',\r\n      mliType: \"2I\",\r\n      currentDataSet: '',\r\n      errDialogVisible: false,\r\n      errorMessage: '',\r\n      showLoadMessagesDialog: false,\r\n      showTraceInputDialog: false,\r\n      showSaveMsgDialog: false,\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqMenuVisible: false,\r\n      selectedReqMenuItem: null,\r\n      reqClipboardData: null\r\n    };\r\n\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.sendToHost = this.sendToHost.bind(this);\r\n    this.addFieldContent = this.addFieldContent.bind(this);\r\n    this.showErrorDialog = this.showErrorDialog.bind(this);\r\n    this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n    this.processError = this.processError.bind(this);\r\n    this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n    this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n    this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n    this.setTrace = this.setTrace.bind(this);\r\n    this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n    this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n    this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n    this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n    this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n    this.showInfoDialog = this.showInfoDialog.bind(this);\r\n\r\n    this.showMenu = this.showMenu.bind(this);\r\n    this.hideMenu = this.hideMenu.bind(this);\r\n    this.handleMenuClick = this.handleMenuClick.bind(this);\r\n\r\n    this.showResponseDialog = this.showResponseDialog.bind(this);\r\n    this.getTemplateLabel = this.getTemplateLabel.bind(this);\r\n    this.networkSettingsChanged = this.networkSettingsChanged.bind(this);\r\n    this.hideResponse = this.hideResponse.bind(this);\r\n\r\n  }\r\n\r\n  networkSettingsChanged(ip, port, mliType) {\r\n    this.setState(\r\n        {targetServerIp: ip, targetServerPort: port, mliType: mliType})\r\n  }\r\n\r\n  showMenu(event) {\r\n\r\n    this.setState({\r\n      selectedReqMenuItem: event.currentTarget,\r\n      reqMenuVisible: true\r\n    })\r\n\r\n  }\r\n\r\n  hideMenu() {\r\n    this.setState({reqMenuVisible: false})\r\n    this.setState({selectedReqMenuItem: null})\r\n  }\r\n\r\n  showResponseDialog() {\r\n    this.hideMenu()\r\n    this.setState({showResponse: true})\r\n  }\r\n\r\n  hideResponse() {\r\n    this.setState({showResponse: false})\r\n\r\n  }\r\n\r\n  handleMenuClick(event) {\r\n    alert(event.currentTarget)\r\n\r\n    this.setState({selectedReqMenuItem: event.currentTarget})\r\n    this.hideMenu()\r\n  }\r\n\r\n  // Receives the trace as a callback from ParseMessageDialog component\r\n  setTrace(trace) {\r\n    if (trace != null) {\r\n      //console.log(\"trace  = \", trace);\r\n      // now parse this via a API call\r\n\r\n      axios.post(appProps.parseTraceUrl + '/' + this.state.spec.ID + '/'\r\n          + this.state.msg.ID, trace)\r\n      .then(res => {\r\n            console.log(\"parsed msg data\", res.data);\r\n            res.data.parsed_fields.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n\r\n            console.log(\"errr\",e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n\r\n    }\r\n    this.setState({showTraceInputDialog: false})\r\n  }\r\n\r\n  showUnImplementedError() {\r\n    this.setState({\r\n      errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n      errDialogVisible: true\r\n    })\r\n  }\r\n\r\n  closeLoadMsgDialog(selectedMsg) {\r\n    this.setState({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n\r\n    if (selectedMsg != null) {\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.state.spec.ID,\r\n          msgId: this.state.msg.ID,\r\n          dsName: selectedMsg\r\n        }\r\n      }).then(res => {\r\n            console.log(\"saved msg = \", res.data.saved_message);\r\n            res.data.saved_message.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  showInfoDialog(msg) {\r\n    this.setState({errDialogVisible: true, errorMessage: msg})\r\n  }\r\n\r\n  msgSaveSuccess(msgName, updated) {\r\n    let type = \"saved\";\r\n    if (updated) {\r\n      type = \"updated\"\r\n    }\r\n    this.showInfoDialog(`Message ${msgName} ${type} successfully.`);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveFailed(e) {\r\n    this.processError(e);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveCancelled() {\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  showSaveMsgDialog() {\r\n\r\n    // build the data and then\r\n    let content = [];\r\n    this.state.msgTemplate.fields.forEach(f => {\r\n      this.addFieldContent(f, content);\r\n    });\r\n    this.setState({saveData: content, showSaveMsgDialog: true})\r\n  }\r\n\r\n  showTraceInputsDialog() {\r\n    this.hideMenu()\r\n    this.setState({showTraceInputDialog: true})\r\n\r\n  }\r\n\r\n  showLoadMessagesDialog() {\r\n    this.hideMenu()\r\n    this.setState({showLoadMessagesDialog: true})\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  addFieldContent(field, content, validationErrors) {\r\n\r\n    let fData = this.state.isoMsg.get(field.ID);\r\n    if (fData.state.selected) {\r\n      if (fieldValidator.validate(field, fData.state.fieldValue,\r\n          validationErrors)) {\r\n        fData.setError(true);\r\n      } else {\r\n        fData.setError(false);\r\n      }\r\n      content.push(\r\n          {ID: field.ID, Name: field.Name, Value: fData.state.fieldValue});\r\n    }\r\n\r\n    field.Children.forEach(cf => {\r\n      if (fData.state.selected) {\r\n        this.addFieldContent(cf, content, validationErrors);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  //sends the message (as JSON) to the API server to be sent to the ISO host\r\n  sendToHost() {\r\n\r\n    this.hideMenu()\r\n    let content = [];\r\n    let validationErrors = [];\r\n    this.state.msgTemplate.fields.forEach(f => {\r\n      this.addFieldContent(f, content, validationErrors);\r\n    });\r\n    //console.log(\"After gathering data = \", content, validationErrors);\r\n\r\n    if (validationErrors.length > 0) {\r\n      let errMsg = \"\";\r\n      validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n      this.setState({errorMessage: errMsg});\r\n      this.showErrorDialog();\r\n      return\r\n    }\r\n\r\n    console.log(content)\r\n    let reqClipboardData = content.reduce((p, c, currentIndex) => {\r\n\r\n      if (currentIndex === 1) {\r\n        return p.Name + \":\" + p.Value + \"\\n\" + c.Name + \":\" + c.Value + \"\\n\";\r\n      }\r\n      return p + c.Name + ':' + c.Value + \"\\n\";\r\n\r\n    });\r\n\r\n    //alert(reqClipboardData)\r\n\r\n    //lets not hide and then show the response segment again\r\n    this.setState({\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqClipboardData: reqClipboardData\r\n    });\r\n\r\n    let postData = 'host=' +\r\n        this.state.targetServerIp + \"&port=\" + this.state.targetServerPort\r\n        + '&mli=' + this.state.mliType\r\n        + '&specId=' + this.state.spec.ID + '&msgId='\r\n        + this.state.msg.ID + \"&msg=\" + JSON.stringify(content);\r\n    //console.log(postData)\r\n    axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n      console.log(\"Response from server\", res.data.response_fields);\r\n      this.setState(\r\n          {showResponse: true, responseData: res.data.response_fields});\r\n\r\n    }).catch(\r\n        e => {\r\n          console.log(\"error = \", e);\r\n          this.processError(e)\r\n        })\r\n\r\n  }\r\n\r\n  processError(e) {\r\n\r\n    if (!e.response) {\r\n      console.log(\"Error = \", e);\r\n      this.setState({\r\n        errorMessage: 'Error: Unable to reach API server',\r\n        errDialogVisible: true\r\n      });\r\n      return\r\n    }\r\n\r\n    console.log(e.response)\r\n\r\n    if (e.response.status === 400) {\r\n      this.setState(\r\n          {errorMessage: e.response.data.error, errDialogVisible: true});\r\n    } else {\r\n      this.setState(\r\n          {\r\n            errorMessage: 'Unexpected error from server - '\r\n                + e.response.status, errDialogVisible: true\r\n          });\r\n    }\r\n  }\r\n\r\n  getTemplateLabel() {\r\n    //alert(this.state.spec + \"// \" + this.state.msg)\r\n    return this.state.spec.Name + \" // \" + this.state.msg.Name;\r\n  }\r\n\r\n  onFieldUpdate(e) {\r\n    //console.log(\"field updated =>\" + e.fieldName)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMessageTemplate(this.props.spec, this.props.msg)\r\n  }\r\n\r\n  getMessageTemplate(pSpec, pMsg) {\r\n    let spec = this.props.specs.find(s => {\r\n      if (s.Name === pSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n    let msg = spec.Messages.find(m => {\r\n      if (m.Name === pMsg) {\r\n        return m;\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    let url = appProps.templateUrl + '/' + spec.ID + \"/\" + msg.ID;\r\n    console.log(url);\r\n    axios.get(url).then(\r\n        res => {\r\n          console.log(res.data);\r\n          let isoMsg = new Map();\r\n          isoMsg.set(\"msg_template\", res.data);\r\n          this.setState(\r\n              {\r\n                spec: spec,\r\n                msg: msg,\r\n                msgTemplate: res.data,\r\n                loaded: true,\r\n                isoMsg: isoMsg\r\n              });\r\n\r\n          console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(\r\n        err => {\r\n          console.log(err)\r\n          this.setState({errorMessage: err, errDialogVisible: true})\r\n        });\r\n  }\r\n\r\n  appendFieldContent(content, field, isoMsg, level) {\r\n    content.push(<IsoField key={field.ID} field={field} isoMsg={isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.loaded === true) {\r\n      this.state.msgTemplate.fields.map(field => {\r\n        this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n      })\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{\r\n          fontFamily: 'lato-regular',\r\n          fontSize: '12px',\r\n          fill: 'aqua'\r\n        }}>\r\n\r\n          <AlertDialog show={this.state.errDialogVisible}\r\n                       msg={this.state.errorMessage}\r\n                       onClose={this.closeErrorDialog}/>\r\n\r\n\r\n          <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                               specId={this.state.spec.ID}\r\n                               msgId={this.state.msg.ID}\r\n                               closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n          <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                              setTrace={this.setTrace}/>\r\n\r\n          <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                             msgId={this.state.msg.ID}\r\n                             initialMessage={this.state.currentDataSet}\r\n                             specId={this.state.spec.ID}\r\n                             data={this.state.saveData}\r\n                             msgName={this.state.currentDataSet}\r\n                             msgSaveSuccess={this.msgSaveSuccess}\r\n                             msgSaveFailed={this.msgSaveFailed}\r\n                             msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n          <NetworkSettings onChange={this.networkSettingsChanged}/>\r\n\r\n\r\n          <div align={\"left\"}\r\n               style={{\r\n                 align: \"left\",\r\n                 display: \"inline-block\",\r\n                 width: \"40%\",\r\n                 float: \"left\",\r\n                 fill: 'aqua'\r\n               }}>\r\n\r\n            <div>\r\n\r\n              <ButtonGroup size={\"small\"} color={\"primary\"} fullWidth={true}\r\n                           variant={\"contained\"}>\r\n                <Button\r\n                    onClick={this.showTraceInputsDialog}>Parse</Button>\r\n                <Button\r\n                    onClick={this.showLoadMessagesDialog}>Load</Button>\r\n                <Button\r\n                    onClick={this.showSaveMsgDialog}>Save</Button>\r\n                <Button onClick={this.sendToHost}>Send</Button>\r\n                <Button onClick={this.showResponseDialog}\r\n                        disabled={this.state.responseData == null}>Show\r\n                  Response</Button>\r\n              </ButtonGroup>\r\n\r\n            </div>\r\n\r\n            {/*TODO:: pull this into a separate component*/}\r\n            <Paper variation={\"outlined\"} style={{verticalAlign: \"middle\"}}>\r\n              <table border=\"0\" align={\"center\"}\r\n                     style={{align: \"center\", marginTop: \"10px\", width: \"80%\"}}>\r\n                <thead>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"15px\",\r\n                  borderBottom: 'solid',\r\n                  borderColor: 'blue'\r\n                }}>\r\n                  <td colSpan=\"3\" align={\"center\"}>\r\n\r\n                    {/*\r\n                      <div style={{display: \"inline-block\", float: \"left\"}}>\r\n                        <IconButton\r\n                            aria-label=\"more\"\r\n                            aria-controls=\"long-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.showMenu}\r\n                        >\r\n                          <MoreVert/>\r\n                        </IconButton>\r\n\r\n                        <Menu\r\n                            id=\"fade-menu\"\r\n                            anchorEl={this.state.selectedReqMenuItem}\r\n                            getContentAnchorEl={null}\r\n                            keepMounted\r\n                            open={this.state.reqMenuVisible}\r\n                            onClose={this.hideMenu}\r\n                            TransitionComponent={Fade}\r\n                        >\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showTraceInputsDialog}>Parse</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showLoadMessagesDialog}>Load\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showSaveMsgDialog}>Save\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true} onClick={this.sendToHost}>Send\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showResponseDialog}>Show\r\n                            Response</MenuItem>\r\n                        </Menu>\r\n                      </div>\r\n                    */}\r\n                    <div\r\n                        style={{display: \"inline-block\"}}>{this.getTemplateLabel()}</div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                  <td align={\"center\"}>Selection</td>\r\n                  <td align={\"center\"} style={{width: '35%'}}> Field</td>\r\n                  <td align={\"center\"} style={{width: '70%'}}>Field Data\r\n                  </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {content}\r\n                </tbody>\r\n              </table>\r\n            </Paper>\r\n\r\n            {/*<div style={{float: \"right\"}}>*/}\r\n            <ResponseSegment show={this.state.showResponse}\r\n                             reqData={this.state.reqClipboardData}\r\n                             onClose={this.hideResponse}\r\n                             data={this.state.responseData}\r\n                             dialogTitle={\"Response - [\"\r\n                             + this.getTemplateLabel() + \"]\"}\r\n                             msgTemplate={this.state.msgTemplate}/>\r\n\r\n          </div>\r\n\r\n\r\n          <div style={{height: \"10px\"}}>{' '}</div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n","import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport appProps from \"../../Utils/Properties\";\r\nimport {Folder, Home, Message} from \"@material-ui/icons\"\r\n\r\n// SpecTree displays a tree of all the available specifications and the messages\r\n// defined under the spec\r\nclass SpecTree extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      specs: [],\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.messageClicked = this.messageClicked.bind(this);\r\n  }\r\n\r\n  messageClicked(event) {\r\n    // FIXME:: This is a hack! There needs to be a better way like onSelect\r\n    let specId = event.target.parentElement.parentElement.getAttribute(\"sid\");\r\n    let msgId = event.target.parentElement.parentElement.getAttribute(\"mid\");\r\n\r\n    this.props.msgSelected(specId, msgId);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(\"allSpecs\",res.data);\r\n      this.setState({specs: res.data.specs, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  buildMessages(spec) {\r\n    let content = []\r\n    spec.Messages.forEach(m => {\r\n      content.push(<TreeItem nodeId={\"nodeId_\" + spec.ID + \"_\" + m.ID}\r\n                             sid={spec.ID} mid={m.ID}\r\n                             label={m.Name}\r\n                             onClick={this.messageClicked}/>)\r\n    });\r\n    return content\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.loaded === true) {\r\n\r\n      let content = [];\r\n      this.state.specs.forEach(s => {\r\n\r\n        content.push(<TreeItem align=\"left\" nodeId={\"nodeId_\" + s.ID}\r\n                               icon={<Folder color={\"primary\"}/>}\r\n                               label={s.Name}>{this.buildMessages(\r\n            s)}</TreeItem>);\r\n\r\n      });\r\n\r\n      let treeContent = <TreeItem nodeId={\"nodeId_0\"}\r\n                                  icon={<Home color={\"primary\"}/>}\r\n                                  label={\"ISO8583 Specifications\"}>{content}</TreeItem>;\r\n\r\n      return (<React.Fragment>\r\n            <TreeView\r\n                defaultExpanded={['nodeId_0']}\r\n                defaultCollapseIcon={<ExpandMoreIcon/>}\r\n                defaultExpandIcon={<ChevronRightIcon/>}\r\n                defaultParentIcon={<Folder color={\"primary\"}/>}\r\n                defaultEndIcon={<Message color=\"primary\"/>}\r\n            >\r\n              {treeContent}\r\n            </TreeView>\r\n\r\n\r\n          </React.Fragment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default SpecTree;","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from '../Iso/MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport SpecTree from \"./SpecTree/SpecTree\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgSelected = this.msgSelected.bind(this);\r\n    this.getSpecByID = this.getSpecByID.bind(this);\r\n\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  msgSelected(specId, msgId) {\r\n\r\n    console.log(specId, msgId)\r\n    console.log(this.state.specs)\r\n    let spec = this.getSpecByID(parseInt(specId))\r\n    console.log(\"spec = \", spec)\r\n    let msg = null;\r\n    spec.Messages.forEach(m => {\r\n      if (m.ID === parseInt(msgId)) {\r\n        msg = m;\r\n      }\r\n    })\r\n\r\n    this.setState(\r\n        {loaded: true, currentSpec: spec.Name, currentSpecMsg: msg.Name});\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data.specs, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n          <div>\r\n            <Modal show={this.state.errDialogVisible}\r\n                   onHide={this.closeErrorDialog}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <div style={{\r\n              float: \"left\",\r\n              display: \"inline-block\",\r\n              marginRight: \"20px\",\r\n              marginLeft: \"20px\",\r\n              backgroundColor:'#fbfff0'\r\n\r\n            }}>\r\n              <SpecTree msgSelected={this.msgSelected}/>\r\n            </div>\r\n            <div align=\"center\" style={{backgroundColor:'#fbfff0'}}>\r\n              {\r\n                this.state.loaded && this.state.currentSpec !== \"Select\" ?\r\n                    <MessageStructure key={this.state.currentSpec + \"_\" + msg}\r\n                                      ref={this.msgTemplateRef}\r\n                                      specs={this.state.specs}\r\n                                      spec={this.state.currentSpec}\r\n                                      msg={this.state.currentSpecMsg}/>\r\n                    : null\r\n              }\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value,\r\n      currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n      let spec = this.getSpecByName(event.target.value);\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (\r\n        <select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                onChange={this.specChanged}>\r\n          <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n          {\r\n            this.state.specs.map((s) => {\r\n              return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n            })\r\n          }\r\n\r\n        </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {\r\n              spec.Messages.map(msg => {\r\n                return <option key={msg.ID}\r\n                               value={msg.Name}>{msg.Name}</option>\r\n              })\r\n            }\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByID(specId) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.ID === specId) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport NavBar from './components/Navigation/NavBar.js'\n\nfunction App() {\n  return (\n      <div style={{backgroundColor:'#fbfff0'}}>\n        <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\n          Simulator</h1>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n           href={\"/iso/home\"} target={\"_blank\"}>[Non React App]</a>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n          href={\"/iso/v0/server\"} target={\"_blank\"}>[Manage Servers]</a>\n\n        <div className=\"App\">\n          <NavBar/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\nReactDOM.render(<App style={{backgroundColor:'#fbfff0'}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}