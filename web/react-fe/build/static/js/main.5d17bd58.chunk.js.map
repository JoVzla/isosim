{"version":3,"sources":["components/Utils/Properties.js","components/Dialogs/AlertDialog.js","components/Utils/PinGenBox.js","components/Utils/FieldValidator.js","components/Utils/MsgUtils.js","components/Utils/MacGenBox.js","components/Utils/FieldExtras.js","components/Iso/IsoField/IsoField.js","components/Dialogs/SelectMessageDialog.js","components/Iso/ResponseSegment.js","components/Dialogs/ParseMessageDialog.js","components/Dialogs/SaveMessageDialog.js","components/Utils/NetworkSettings.js","components/Utils/MsgHistPanel.js","components/Utils/BitmapFragment.js","components/Utils/CryptoUtils.js","components/Iso/MessageStructure.js","components/Navigation/SpecTree/StyledTreeItem.js","components/Navigation/SpecTree/SpecTree.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["AppProps","this","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","pinGenUrl","macGenUrl","logHistUrl","FixedField","VariableField","BitmappedField","appProps","AlertDialog","props","state","show","handleClose","bind","setState","onClose","prevProps","prevState","snapshot","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","msg","DialogActions","Button","onClick","color","React","Component","PinGenBox","from","to","panID","field","initialPan","pinGenProps","PinGenProps","PANFieldID","PANExtractParams","match","split","originalPan","isoMsg","panField","get","fieldValue","substring","pinFormat","pan","clearPin","pinKey","GenType","PINFormat","PINClear","PINKey","hasError","errorMsg","generatePinBlock","panValueChanged","formatChanged","keyValueChanged","pinValueChanged","doNothing","tmp","length","pinError","keyError","panError","data","PAN","axios","post","JSON","stringify","then","res","setPinBlock","PinBlock","catch","err","error","console","log","event","target","value","Fragment","Box","border","borderColor","borderRadius","style","paddingBottom","padding","Grid","container","spacing","alignItems","item","xs","TextField","size","label","onChange","variant","margin","fullWidth","select","MenuItem","justify","float","fieldValidator","validate","fieldData","errors","validationFailed","Type","DataEncoding","FixedSize","push","Name","dataErr","fieldLen","MinSize","MaxSize","MsgUtils","content","validationErrors","isoField","ID","selected","setError","Value","Children","forEach","cf","addFieldContent","fields","f","MacGenBox","macAlgo","MacGenProps","MacAlgo","macKey","MacKey","generateMac","algoChanged","reqData","undefined","macData","mac_algo","mac_key","mac_data","getMsgContent","errMsg","e","spec_id","msg_id","parsed_fields","setMac","Mac","response","status","FieldExtras","closeThis","valueChanged","setValue","val","dynamicGenerators","readOnly","width","height","paddingTop","rows","multiline","disabled","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","toggleExpanded","onFocusLost","applyPadding","selectable","id2Value","fieldEditable","bgColor","expandBtnLabel","defaultFieldValue","has","tmpField","MandatoryFields","includes","Array","fill","reduce","p","c","set","newValue","fieldName","currentVal","bits","ChangeType","Position","turnOff","i","obj","checked","initVal","Padding","startsWith","expectedLength","endsWith","parentField","level","key","selectionColumnContent","align","Checkbox","type","positionInParent","ParentId","fieldInfo","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","fontSize","placement","InputLabel","helperText","onBlur","marginRight","marginLeft","colSpan","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","params","specId","msgId","savedMsgs","saved_messages","errorMessage","closeLoadMsgDialog","map","sm","maxWidth","lg","xl","ResponseSegment","msgTemplate","hideResponseSegment","copyToClipboard","textAreaRef","createRef","idToField","idToValue","collectData","current","document","execCommand","alert","forClipboard","Map","clipboardText","currentIndex","scroll","PaperComponent","disableBackdropClick","cursor","dialogTitle","dividers","Paper","ref","opacity","position","zIndex","fontFamily","backgroundColor","borderBottom","handle","cancel","ParseMessageDialog","traceMsg","traceChanged","isValidTrace","trace","trim","updatedTrace","setTrace","SaveMessageDialog","msgName","initialMessage","updateIfExists","msgNameChanged","updateIfExistsChanged","postData","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","FormControlLabel","control","NetworkSettings","targetServerIp","serverIP","targetServerPort","port","mliType","serverIpChanged","serverPortChanged","mliTypeChanged","setStateAndPushUp","marginBottom","textAlign","verticalAlign","marginTop","MsgHistPanel","maxItems","initialMaxItems","logData","initialLogData","maxItemsChanged","fetchLogs","displayData","saveState","rowsMax","contentEditable","UIIsoBitmap","pos","v","bitmapstr","toHexString","isSet","bitChanged","bitmapChanged","npads","replace","j","binValue","toBinary","substr","k","frg1","frg2","toHex","lpos","fcontent","scontent","CryptoUtilsBox","pinField","PANFieldId","macField","pinBlock","mac","setPinValue","setMacValue","macDataChanged","direction","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","MessageStructure","loaded","spec","shouldShow","showMsgTemplate","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","reqMenuVisible","selectedReqMenuItem","reqClipboardData","selectedTab","msgHist","sendToHost","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","showMenu","hideMenu","handleMenuClick","showResponseDialog","getTemplateLabel","networkSettingsChanged","hideResponse","tabChanged","saveHistState","stateObj","histState","ip","currentTarget","fd","dsName","saved_message","updated","saveData","response_fields","getMessageTemplate","pSpec","pMsg","specs","find","s","Messages","m","url","AppBar","Tabs","aria-label","centered","Tab","TabPanel","index","display","ButtonGroup","variation","other","role","hidden","useTreeItemStyles","makeStyles","theme","root","palette","text","secondary","action","hover","grey","borderTopRightRadius","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","paddingLeft","expanded","labelRoot","labelIcon","labelText","flexGrow","StyledTreeItem","classes","LabelIcon","labelInfo","TreeItem","className","SpecTree","nodeSelected","selectedNode","matches","treeInstance","msgSelected","timerId","setInterval","clearInterval","nodeId","sid","mid","icon","Folder","buildMessages","treeContent","Home","TreeView","onNodeSelect","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","Message","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","getSpecByID","msgTemplateRef","parseInt","getCurrentSpec","Modal","onHide","Header","closeButton","Title","Body","Footer","name","App","href","rel","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5d17bd58.chunk.js","sourcesContent":["// AppProps are various URL's that are used by axios\r\nexport class AppProps {\r\n\r\n    static FixedField = \"Fixed\";\r\n    static VariableField = \"Variable\";\r\n    static BitmappedField = \"Bitmapped\";\r\n\r\n    constructor() {\r\n        //this.baseUrl = 'http://localhost:8080';\r\n        this.baseUrl = '';\r\n        this.sendMsgUrl = this.baseUrl + '/iso/v1/send';\r\n        this.loadMsgUrl = this.baseUrl + '/iso/v1/loadmsg';\r\n        this.allSpecsUrl = this.baseUrl + '/iso/v1/specs';\r\n        this.templateUrl = this.baseUrl + '/iso/v1/template';\r\n        this.parseTraceUrl = this.baseUrl + '/iso/v1/parse';\r\n        this.saveMsgUrl = this.baseUrl + '/iso/v1/save';\r\n        this.pinGenUrl = this.baseUrl + '/iso/v1/crypto/pin_gen';\r\n        this.macGenUrl = this.baseUrl + '/iso/v1/crypto/mac_gen';\r\n\r\n        this.logHistUrl = this.baseUrl + '/iso/v1/websim/msg_hist/last_n';\r\n    }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class AlertDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: props.show};\r\n\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({show: false})\r\n        this.props.onClose();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.show === true && prevState.show === false) {\r\n            this.setState({show: true})\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<Dialog\r\n            open={this.state.show}\r\n            onClose={this.handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle\r\n                id=\"alert-dialog-title\">{\"Alert!\"}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {this.props.msg}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={this.handleClose} color=\"primary\">\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>);\r\n\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport axios from \"axios\";\r\nimport appProps from \"./Properties\";\r\nimport AlertDialog from \"../Dialogs/AlertDialog\";\r\n\r\nexport default class PinGenBox extends React.Component {\r\n\r\n    field;\r\n    from = 0;\r\n    to = 0;\r\n    panID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.field = this.props.field;\r\n\r\n        let initialPan = \"\";\r\n        let pinGenProps = this.field.PinGenProps;\r\n\r\n        if (this.field.PinGenProps.PANFieldID !== 0) {\r\n            this.panID = this.field.PinGenProps.PANFieldID;\r\n        }\r\n\r\n        if (pinGenProps.PANFieldID !== 0 && pinGenProps.PANExtractParams !== \"\"\r\n            && pinGenProps.PANExtractParams.match(\"[0-9]+:[0-9]+\")) {\r\n\r\n            [this.from, this.to] = pinGenProps.PANExtractParams.split(\":\");\r\n\r\n        }\r\n\r\n        let originalPan = \"\";\r\n        if (this.props.isoMsg) {\r\n            let panField = this.props.isoMsg.get(this.panID);\r\n            if (panField) {\r\n                originalPan = panField.state.fieldValue;\r\n                initialPan = originalPan;\r\n\r\n                if (this.from >= 0 && this.to > this.from) {\r\n                    initialPan = panField.state.fieldValue.substring(this.from, this.to);\r\n                }\r\n            }\r\n        } else {\r\n            this.state = {pinFormat: \"ISO0\", pan: initialPan, clearPin: \"\", pinKey: \"\"}\r\n        }\r\n\r\n        if (this.field.GenType === 'pin_gen') {\r\n            this.state = {\r\n                pinFormat: this.field.PinGenProps.PINFormat,\r\n                pan: initialPan,\r\n                originalPan: originalPan,\r\n                clearPin: this.field.PinGenProps.PINClear,\r\n                pinKey: this.field.PinGenProps.PINKey,\r\n                hasError: false,\r\n                errorMsg: null\r\n            }\r\n        }\r\n\r\n        this.generatePinBlock = this.generatePinBlock.bind(this);\r\n        this.panValueChanged = this.panValueChanged.bind(this);\r\n        this.formatChanged = this.formatChanged.bind(this);\r\n        this.keyValueChanged = this.keyValueChanged.bind(this);\r\n        this.pinValueChanged = this.pinValueChanged.bind(this);\r\n        this.doNothing = this.doNothing.bind(this);\r\n\r\n    }\r\n\r\n    doNothing() {\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (!this.props.isoMsg) {\r\n            return\r\n        }\r\n\r\n        let tmp = this.props.isoMsg.get(this.panID);\r\n        if (tmp) {\r\n\r\n            if (this.state.originalPan !== tmp.state.fieldValue) {\r\n\r\n                // if the pan has changed, record it\r\n                let originalPan = tmp.state.fieldValue;\r\n                let pan = \"\";\r\n                if (this.from >= 0 && this.to > this.from) {\r\n                    pan = tmp.state.fieldValue.substring(this.from, this.to);\r\n                } else {\r\n                    pan = tmp.state.fieldValue\r\n                }\r\n\r\n                this.setState({pan: pan, originalPan: originalPan})\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    generatePinBlock() {\r\n\r\n        if (this.state.pan === \"\") {\r\n            this.setState({panError: true})\r\n            return;\r\n        }\r\n\r\n        if (this.state.clearPin === \"\" || this.state.clearPin.length < 4 || this.state.clearPin.length\r\n            > 12) {\r\n            this.setState({pinError: true})\r\n            return;\r\n        }\r\n\r\n        if (this.state.pinKey === \"\" || (this.state.pinKey.length !== 16 && this.state.pinKey.length\r\n            !== 32)) {\r\n            this.setState({keyError: true})\r\n            return\r\n        }\r\n\r\n        this.setState({keyError: false, pinError: false, panError: false});\r\n\r\n        let data = {\r\n            PINClear: this.state.clearPin,\r\n            PINFormat: this.state.pinFormat,\r\n            PINKey: this.state.pinKey,\r\n            PAN: this.state.pan\r\n        };\r\n\r\n        //console.log(JSON.stringify(data))\r\n        axios.post(appProps.pinGenUrl, JSON.stringify(data)).then(res => {\r\n            this.props.setPinBlock(res.data.PinBlock);\r\n        }).catch(err => {\r\n            let errorMsg = \"Failed to generate PIN block: \";\r\n            if (err.error) {\r\n                errorMsg = errorMsg + err.error\r\n            } else {\r\n                errorMsg = errorMsg + err;\r\n            }\r\n\r\n            this.setState({hasError: true, errorMsg: errorMsg});\r\n            console.log(\"error= \", err);\r\n        })\r\n\r\n    }\r\n\r\n    formatChanged(event) {\r\n        this.setState({pinFormat: event.target.value});\r\n    }\r\n\r\n    pinValueChanged(event) {\r\n        this.setState({clearPin: event.target.value});\r\n    }\r\n\r\n    panValueChanged(event) {\r\n        this.setState({pan: event.target.value});\r\n    }\r\n\r\n    keyValueChanged(event) {\r\n        this.setState({pinKey: event.target.value});\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.field.GenType !== 'pin_gen') {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n\r\n            <React.Fragment>\r\n\r\n                <AlertDialog show={this.state.hasError} msg={this.state.errorMsg}\r\n                             onClose={this.doNothing}/>\r\n\r\n                <Box border={1} borderColor={\"primary.main\"} borderRadius={4}>\r\n                    <div style={{paddingBottom: \"10px\", padding: \"5px\"}}>\r\n                        <Grid container spacing={0}>\r\n\r\n                            <Grid container spacing={1} alignItems={\"flex-start\"}>\r\n                                <Grid item xs={3}>\r\n                                    <TextField size={\"small\"} label={\"Clear PIN\"} value={this.state.clearPin}\r\n                                               onChange={this.pinValueChanged} error={this.state.pinError}\r\n                                               variant={\"outlined\"} margin={\"dense\"}/>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label={\"PIN Key\"} value={this.state.pinKey} variant={\"outlined\"}\r\n                                               onChange={this.keyValueChanged} error={this.state.keyError}\r\n                                               margin={\"dense\"} fullWidth={true}/>\r\n                                </Grid>\r\n                                <Grid item xs={3}>\r\n                                    <TextField size={\"small\"} value={this.state.pinFormat} select={true}\r\n                                               fullWidth={true}\r\n                                               label={\"Format\"} onChange={this.formatChanged}\r\n                                               variant={\"outlined\"} margin={\"dense\"}>\r\n                                        <MenuItem value={\"ISO0\"}>ISO-0</MenuItem>\r\n                                        <MenuItem value={\"ISO1\"}>ISO-1</MenuItem>\r\n                                        <MenuItem value={\"ISO3\"}>ISO-3</MenuItem>\r\n                                        <MenuItem value={\"IBM3264\"}>IBM-3264</MenuItem>\r\n                                    </TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems={\"flex-start\"}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField label={\"PAN\"} value={this.state.pan} variant={\"outlined\"}\r\n                                               onChange={this.panValueChanged} error={this.state.panError}\r\n                                               margin={\"dense\"}/>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={0} justify={\"flex-end\"} alignItems={\"flex-end\"}>\r\n                                <Grid item xs>\r\n                                    <div style={{float: \"right\"}}>\r\n                                        <Button size={\"small\"} variant={\"contained\"} onClick={this.generatePinBlock}\r\n                                                color={\"primary\"}>Generate</Button>\r\n                                    </div>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </div>\r\n                </Box>\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n}","// FieldValidator provides validation logic for field values\r\nimport {AppProps} from \"./Properties\";\r\n\r\nclass FieldValidator {\r\n\r\n    constructor(props) {\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    validate(field, fieldData, errors) {\r\n\r\n        //console.log(\"validate\", field, fieldData, errors);\r\n        let validationFailed = false;\r\n\r\n        if (field.Type === AppProps.FixedField) {\r\n\r\n            if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n                if (fieldData.length !== field.FixedSize) {\r\n                    errors.push(\r\n                        `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n                    validationFailed = true;\r\n                }\r\n            } else {\r\n                if (fieldData.length !== 2 * field.FixedSize) {\r\n                    errors.push(\r\n                        `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n                        / 2}`);\r\n                    validationFailed = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        let dataErr = false;\r\n\r\n        if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n            if (fieldData.length % 2 !== 0) {\r\n                errors.push(\r\n                    `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n                validationFailed = true;\r\n                dataErr = true;\r\n            }\r\n\r\n            if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n                \"^[0-9,a-f,A-F]+$\")) {\r\n                errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n                validationFailed = true;\r\n            }\r\n            if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n                errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n                validationFailed = true;\r\n            }\r\n        }\r\n\r\n        if (!dataErr && field.Type === AppProps.VariableField) {\r\n\r\n            let fieldLen = fieldData.length;\r\n            if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n                fieldLen = fieldData.length / 2;\r\n            }\r\n\r\n            if (field.MinSize > 0 && fieldData.length < field.MinSize) {\r\n                errors.push(\r\n                    `\\u2b55 \"${field.Name} size of ${fieldLen} is less than required min of ${field.MinSize}\" `);\r\n                validationFailed = true;\r\n            }\r\n            if (field.MaxSize > 0 && fieldData.length > field.MaxSize) {\r\n                errors.push(\r\n                    `\\u2b55 \"${field.Name} size  of ${fieldLen} is greater than required max of ${field.MaxSize}\" `);\r\n                validationFailed = true;\r\n            }\r\n        }\r\n\r\n        //TODO:: other checks like content etc\r\n        return validationFailed;\r\n\r\n    }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import fieldValidator from \"./FieldValidator\";\r\n\r\nexport default class MsgUtils {\r\n\r\n    static addFieldContent(field, content, isoMsg, validationErrors) {\r\n\r\n        let isoField = isoMsg.get(field.ID);\r\n\r\n        if (isoField.state.selected) {\r\n            if (fieldValidator.validate(field, isoField.state.fieldValue, validationErrors)) {\r\n                isoField.setError(true);\r\n            } else {\r\n                isoField.setError(false);\r\n            }\r\n            content.push({ID: field.ID, Name: field.Name, Value: isoField.state.fieldValue});\r\n        }\r\n\r\n        field.Children.forEach(cf => {\r\n            if (isoField.state.selected) {\r\n                MsgUtils.addFieldContent(cf, content, isoMsg, validationErrors);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    static getMsgContent(isoMsg, content, validationErrors) {\r\n        isoMsg.get(\"msg_template\").fields.forEach(f => {\r\n            MsgUtils.addFieldContent(f, content, isoMsg, validationErrors);\r\n        });\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport axios from \"axios\";\r\nimport appProps from \"./Properties\";\r\nimport AlertDialog from \"../Dialogs/AlertDialog\";\r\nimport MsgUtils from \"./MsgUtils.js\";\r\n\r\nexport default class MacGenBox extends React.Component {\r\n\r\n    field;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.field = this.props.field;\r\n\r\n        this.state = {\r\n            macAlgo: this.field.MacGenProps.MacAlgo,\r\n            macKey: this.field.MacGenProps.MacKey,\r\n            hasError: false,\r\n            errorMsg: null\r\n        }\r\n\r\n        this.generateMac = this.generateMac.bind(this);\r\n        this.algoChanged = this.algoChanged.bind(this);\r\n        this.keyValueChanged = this.keyValueChanged.bind(this);\r\n        this.doNothing = this.doNothing.bind(this);\r\n\r\n    }\r\n\r\n    doNothing() {\r\n        this.setState({hasError: false, errorMsg: null});\r\n    }\r\n\r\n    generateMac() {\r\n\r\n        if (this.state.macKey === \"\" || (this.state.macKey.length !== 16 && this.state.macKey.length\r\n            !== 32)) {\r\n            this.setState({keyError: true})\r\n            return\r\n        }\r\n\r\n        this.setState({keyError: false});\r\n\r\n        let content = []\r\n        let validationErrors = []\r\n\r\n        let reqData = {};\r\n\r\n        if (this.props.macData !== undefined) {\r\n\r\n            //if mac-data has been provided\r\n\r\n            if (this.props.macData.length === 0) {\r\n                this.setState({hasError: true, errorMsg: \"Invalid MacData supplied.\"});\r\n                return\r\n            } else {\r\n\r\n                this.setState({hasError: false, errorMsg: null});\r\n\r\n                let macData = this.props.macData;\r\n\r\n                reqData = {\r\n                    mac_algo: this.state.macAlgo, mac_key: this.state.macKey, mac_data: macData\r\n                };\r\n            }\r\n\r\n        } else {\r\n\r\n            //mac_data is to be computed on the server-side\r\n\r\n            MsgUtils.getMsgContent(this.props.isoMsg, content, validationErrors);\r\n\r\n            if (validationErrors.length > 0) {\r\n                let errMsg = \"\";\r\n                validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n                this.setState({hasError: true, errorMsg: errMsg});\r\n                return\r\n            }\r\n\r\n            reqData = {\r\n                mac_algo: this.state.macAlgo,\r\n                mac_key: this.state.macKey,\r\n                spec_id: this.props.isoMsg.get(\"spec_id\"),\r\n                msg_id: this.props.isoMsg.get(\"msg_id\"),\r\n                parsed_fields: content\r\n            };\r\n        }\r\n\r\n        axios.post(appProps.macGenUrl, JSON.stringify(reqData)).then(res => {\r\n            this.setState({hasError: false, errorMsg: null});\r\n            this.props.setMac(res.data.Mac);\r\n\r\n        }).catch(e => {\r\n            let errorMsg = \"Failed to generate MAC: \";\r\n            if (e.error) {\r\n                if (e.response.status === 400) {\r\n                    errorMsg = errorMsg + e.response.data.error;\r\n                }\r\n\r\n            } else {\r\n                errorMsg = errorMsg + e;\r\n            }\r\n\r\n            this.setState({hasError: true, errorMsg: errorMsg});\r\n            console.log(\"error= \", e);\r\n        })\r\n\r\n    }\r\n\r\n    algoChanged(event) {\r\n        this.setState({macAlgo: event.target.value});\r\n    }\r\n\r\n    keyValueChanged(event) {\r\n        this.setState({macKey: event.target.value});\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.field.GenType !== 'mac_gen') {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n\r\n            <React.Fragment>\r\n\r\n                <AlertDialog show={this.state.hasError} msg={this.state.errorMsg}\r\n                             onClose={this.doNothing}/>\r\n\r\n                <Box border={1} borderColor={\"primary.main\"} borderRadius={4}>\r\n                    <div style={{paddingBottom: \"10px\", padding: \"5px\"}}>\r\n                        <Grid container spacing={0}>\r\n\r\n                            <Grid container spacing={1} alignItems={\"flex-start\"}>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label={\"MAC Key\"} value={this.state.macKey} variant={\"outlined\"}\r\n                                               onChange={this.keyValueChanged} error={this.state.keyError}\r\n                                               margin={\"dense\"} fullWidth={true}/>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <TextField size={\"small\"} value={this.state.macAlgo} select={true}\r\n                                               fullWidth={true}\r\n                                               label={\"MAC Algorithm\"} onChange={this.algoChanged}\r\n                                               variant={\"outlined\"} margin={\"dense\"}>\r\n                                        <MenuItem value={\"ANSIX9_19\"}>ANSIX9_19</MenuItem>\r\n                                    </TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={0} justify={\"flex-end\"} alignItems={\"flex-end\"}>\r\n                                <Grid item xs>\r\n                                    <div style={{float: \"right\"}}>\r\n                                        <Button size={\"small\"} variant={\"contained\"} onClick={this.generateMac}\r\n                                                color={\"primary\"}>Generate</Button>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </div>\r\n                </Box>\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PinGenBox from \"./PinGenBox\";\r\nimport MacGenBox from \"./MacGenBox\";\r\n\r\n// FieldExtras shows additional options for a field and an option to view/edit\r\n// field value within a large field (TextArea) and is useful when editing fields with large values\r\nexport default class FieldExtras extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {show: this.props.show, value: this.props.value};\r\n        this.closeThis = this.closeThis.bind(this);\r\n        this.valueChanged = this.valueChanged.bind(this);\r\n        this.setValue = this.setValue.bind(this);\r\n    }\r\n\r\n    valueChanged(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    closeThis() {\r\n        this.setState({show: true});\r\n        this.props.onClose(this.state.value);\r\n    }\r\n\r\n    setValue(val) {\r\n        this.setState({value: val})\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.show === false && this.props.show === true && this.state.show === false) {\r\n            this.setState({show: true, value: this.props.value})\r\n        } else if (this.props.show === false && this.state.show === true) {\r\n            this.setState({show: false, value: this.props.value})\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let dynamicGenerators = null;\r\n\r\n        if (!this.props.readOnly) {\r\n            //only for request fields\r\n\r\n            if (this.props.field.GenType === 'pin_gen') {\r\n                dynamicGenerators = <PinGenBox field={this.props.field} setPinBlock={this.setValue}\r\n                                               isoMsg={this.props.isoMsg}/>\r\n            } else if (this.props.field.GenType === 'mac_gen') {\r\n                dynamicGenerators =\r\n                    <MacGenBox field={this.props.field} setMac={this.setValue} isoMsg={this.props.isoMsg}/>\r\n            }\r\n        }\r\n\r\n        return (\r\n\r\n            (this.state.show === true) ?\r\n\r\n                <React.Fragment>\r\n                    <div style={{\r\n                        width: '100%', height: '100%', paddingTop: \"20px\", paddingBottom: \"20px\"\r\n                    }}>\r\n\r\n                        {dynamicGenerators}\r\n                        <div style={{paddingBottom: \"5px\", paddingTop: \"10px\"}}>\r\n                            <TextField fullWidth={true} rows={4} multiline={true} variant={\"outlined\"}\r\n                                       label={\"Field Value\"} style={{paddingBottom: \"5px\"}}\r\n                                       onChange={this.valueChanged} disabled={this.props.readOnly}\r\n                                       value={this.state.value}/>\r\n\r\n                            <div style={{float: \"right\", paddingBottom: '5px'}}>\r\n                                <Button size={\"small\"} variant={\"contained\"} color={\"primary\"}\r\n                                        onClick={this.closeThis}> OK </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment> : null);\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport FieldExtras from '../../Utils/FieldExtras.js'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport fieldValidator from \"../../Utils/FieldValidator\";\r\nimport {AppProps} from \"../../Utils/Properties\";\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n    static MandatoryFields = [\"Message Type\", \"MTI\", \"Bitmap\"];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n        this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n        this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n        this.appendFieldContent = this.appendFieldContent.bind(this);\r\n        this.setSelected = this.setSelected.bind(this);\r\n        this.setNewValue = this.setNewValue.bind(this);\r\n        this.showExpanded = this.showExpanded.bind(this);\r\n        this.closeExpanded = this.closeExpanded.bind(this);\r\n        this.getBgColor = this.getBgColor.bind(this);\r\n        this.setError = this.setError.bind(this);\r\n        this.toggleExpanded = this.toggleExpanded.bind(this);\r\n        this.onFocusLost = this.onFocusLost.bind(this);\r\n        this.applyPadding = this.applyPadding.bind(this);\r\n\r\n        //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n        //because they're mandatory fields in ISO\r\n\r\n        let initialExpandBtnLabel = '+';\r\n        this.selectable = true;\r\n\r\n        if (this.props.readOnly) {\r\n            //readOnly is true when displaying a response segment\r\n\r\n            this.selectable = false;\r\n\r\n            let selected = false;\r\n            let fieldValue = this.props.id2Value.get(this.props.field.ID)\r\n            if (fieldValue) {\r\n                selected = true;\r\n            }\r\n\r\n            this.state = {\r\n                fieldEditable: true,\r\n                bgColor: 'white',\r\n                hasError: false,\r\n                selected: selected,\r\n                id2Value: this.props.id2Value,\r\n                fieldValue: fieldValue,\r\n                expandBtnLabel: initialExpandBtnLabel,\r\n                showExpanded: false,\r\n                field: this.props.field\r\n            };\r\n        } else {\r\n\r\n            // for request segment\r\n\r\n            let defaultFieldValue = \"\";\r\n            let selected = false;\r\n\r\n            if (this.props.isoMsg.has(this.props.field.ID)) {\r\n                let tmpField = this.props.isoMsg.get(this.props.field.ID)\r\n                defaultFieldValue = tmpField.state.fieldValue;\r\n                selected = tmpField.state.selected;\r\n            }\r\n\r\n            if (IsoField.MandatoryFields.includes(this.props.field.Name)) {\r\n\r\n                //mandatory fields which cannot be deselected (bitmap is not editable as well)\r\n\r\n                this.selectable = false;\r\n                let fieldEditable = true;\r\n                if (defaultFieldValue === \"\" && this.props.field.Name === \"Bitmap\") {\r\n                    defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n                }\r\n\r\n                if (this.props.field.Name === \"Bitmap\") {\r\n                    fieldEditable = false;\r\n                }\r\n\r\n                this.state = {\r\n                    fieldEditable: fieldEditable,\r\n                    bgColor: \"white\",\r\n                    hasError: false,\r\n                    selected: true,\r\n                    fieldValue: defaultFieldValue,\r\n                    expandBtnLabel: initialExpandBtnLabel,\r\n                    showExpanded: false,\r\n                    field: this.props.field\r\n                };\r\n\r\n            } else {\r\n                this.state = {\r\n                    fieldEditable: true,\r\n                    bgColor: \"white\",\r\n                    selected: selected,\r\n                    hasError: false,\r\n                    fieldValue: defaultFieldValue,\r\n                    expandBtnLabel: initialExpandBtnLabel,\r\n                    showExpanded: false,\r\n                    field: this.props.field\r\n                };\r\n            }\r\n            this.props.isoMsg.set(this.props.field.ID, this);\r\n        }\r\n    }\r\n\r\n    getBgColor() {\r\n        if (this.state.hasError) {\r\n            return \"red\";\r\n        } else {\r\n            return \"white\";\r\n        }\r\n\r\n    }\r\n\r\n    setError(hasError) {\r\n        this.setState({hasError: hasError});\r\n    }\r\n\r\n    showExpanded() {\r\n        this.setState({showExpanded: true});\r\n    }\r\n\r\n    toggleExpanded() {\r\n        if (this.state.showExpanded) {\r\n            this.setState({showExpanded: false, expandBtnLabel: '+'});\r\n        } else {\r\n            this.setState({showExpanded: true, expandBtnLabel: '-'});\r\n        }\r\n\r\n    }\r\n\r\n    closeExpanded() {\r\n        this.setState({showExpanded: false});\r\n    }\r\n\r\n    setNewValue(newValue) {\r\n\r\n        let val = this.applyPadding(this.state.selected, newValue);\r\n        this.setState({fieldValue: val, showExpanded: false, selected: true});\r\n        this.toggleExpanded()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.id2Value !== this.props.id2Value) {\r\n            this.setState({\r\n                fieldValue: this.props.id2Value.get(this.props.field.ID), id2Value: this.props.id2Value\r\n            });\r\n        }\r\n    }\r\n\r\n    onFieldUpdate(event) {\r\n\r\n        if (this.props.field.Type === AppProps.BitmappedField) {\r\n            // get the position of the field\r\n            this.props.field.Children.forEach(f => {\r\n\r\n                if (f.Name === event.fieldName) {\r\n                    let currentVal = this.state.fieldValue;\r\n                    let bits = Array.from(currentVal);\r\n                    //console.log(\"Changing bit \" + f.Position);\r\n                    if (event.ChangeType === 'FieldSelected') {\r\n                        bits[f.Position - 1] = '1';\r\n                        if (f.Position > 64) {\r\n                            bits[0] = '1';\r\n                        }\r\n                    } else if (event.ChangeType === 'FieldDeselected') {\r\n                        bits[f.Position - 1] = '0';\r\n\r\n                        //if all bits from 65 to 128 are off then turn bit 1 off\r\n                        let turnOff = true;\r\n                        for (let i = 65; i <= 128; i++) {\r\n                            if (bits[i - 1] === '1') {\r\n                                turnOff = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (turnOff) {\r\n                            bits[0] = '0';\r\n                        }\r\n\r\n                    }\r\n                    let newValue = bits.reduce((p = \"\", c) => p + c);\r\n                    this.setState({fieldValue: newValue})\r\n\r\n                }\r\n            })\r\n        } else {\r\n\r\n            let obj = {fieldName: this.props.field.Name};\r\n            if (event.ChangeType === 'FieldSelected') {\r\n                //console.log(\"setting self as selected\", this.props.field.Name);\r\n                this.setState({selected: true});\r\n                obj.ChangeType = \"FieldSelected\";\r\n            } else if (event.ChangeType === 'FieldDeselected') {\r\n                this.setState({selected: false});\r\n                obj.ChangeType = \"FieldDeselected\";\r\n            } else {\r\n\r\n                //TODO:: field value has changed, it needs to be parsed and children\r\n                // have to be changed - wait for the new WASM library for ISO parsing capabilities\r\n                // on the frontend :-)\r\n\r\n\r\n            }\r\n\r\n            // for fixed and variable type field, if they have children\r\n            // the whole set of children and then let the parent know too\r\n\r\n            this.props.field.Children.forEach(c => {\r\n                if (event.ChangeType === 'FieldSelected') {\r\n                    this.props.isoMsg.get(c.ID).setSelected(true);\r\n                } else if (event.ChangeType === 'FieldDeselected') {\r\n                    this.props.isoMsg.get(c.ID).setSelected(false);\r\n                }\r\n            });\r\n\r\n            //pass on the message to the parent that I have changed\r\n            this.props.onFieldUpdate(obj);\r\n\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n\r\n        let val = this.applyPadding(selected);\r\n        this.props.field.Children.forEach(c => {\r\n            this.props.isoMsg.get(c.ID).setSelected(selected);\r\n        });\r\n\r\n        if (selected) {\r\n            let errors = []\r\n            if (fieldValidator.validate(this.props.field, val, errors)) {\r\n\r\n                this.setState({fieldValue: val, hasError: true, errMsg: errors[0], selected: selected});\r\n            } else {\r\n                this.setState({fieldValue: val, hasError: false, errMsg: null, selected: selected});\r\n            }\r\n        } else {\r\n            this.setState({fieldValue: val, hasError: false, errMsg: null, selected: selected});\r\n        }\r\n\r\n    }\r\n\r\n    fieldSelectionChanged(event) {\r\n\r\n        let obj = {fieldName: this.props.field.Name};\r\n        let selected = false;\r\n        if (event.target.checked) {\r\n            obj.ChangeType = \"FieldSelected\";\r\n            selected = true;\r\n        } else {\r\n            obj.ChangeType = \"FieldDeselected\";\r\n        }\r\n\r\n        if (this.props.field.Type !== AppProps.BitmappedField) {\r\n            this.setSelected(selected);\r\n        }\r\n        this.props.onFieldUpdate(obj)\r\n    }\r\n\r\n    onFocusLost() {\r\n\r\n        let val = this.applyPadding(this.state.selected)\r\n\r\n        let errors = []\r\n        if (this.state.selected) {\r\n            if (fieldValidator.validate(this.props.field, val, errors)) {\r\n                this.setState({fieldValue: val, hasError: true, errMsg: errors[0]})\r\n            } else {\r\n\r\n                this.setState({fieldValue: val, hasError: false, errMsg: null});\r\n                let obj = {\r\n                    fieldName: this.props.field.Name, ChangeType: \"ValueChanged\", Value: val\r\n                };\r\n                this.props.onFieldUpdate(obj)\r\n            }\r\n        } else {\r\n            this.setState({fieldValue: val, hasError: false, errMsg: null});\r\n        }\r\n    }\r\n\r\n    //This method applied to the field if one is specified in the field definition\r\n    // selected - A boolean that represents if the field is currently selected (padding is applied only if the field is selected)\r\n    // initVal - The initial value for the field, if unspecified the current value on the state is used\r\n    applyPadding(selected, initVal = \"\") {\r\n\r\n        let val = initVal;\r\n\r\n        if (val === \"\") {\r\n            val = this.state.fieldValue;\r\n        }\r\n\r\n        if (val === undefined) {\r\n            val = \"\";\r\n        }\r\n\r\n        let field = this.state.field;\r\n        if (field.Padding === \"\" || !selected) {\r\n            return val\r\n        }\r\n\r\n        if (field.Type === 'Fixed') {\r\n\r\n            let padding = '';\r\n            switch (field.DataEncoding) {\r\n                case 'ASCII':\r\n                case 'EBCDIC': {\r\n\r\n                    if (val.length < field.FixedSize) {\r\n                        for (let i = 0; i < (field.FixedSize - val.length); i++) {\r\n                            if (field.Padding === 'LEADING_ZEROES' || field.Padding === 'TRAILING_ZEROES') {\r\n                                padding += '0';\r\n                            }\r\n                            if (field.Padding === 'LEADING_SPACES' || field.Padding === 'TRAILING_SPACES') {\r\n                                padding += ' ';\r\n                            }\r\n                        }\r\n                        //console.log(\"Padding required = *\" + padding + \"*\")\r\n                        if (field.Padding.startsWith('LEADING')) {\r\n                            val = padding + val;\r\n                        } else {\r\n                            val = val + padding;\r\n                        }\r\n                    }\r\n                    break;\r\n                }//end ASCII/EBCDIC\r\n\r\n                case 'BCD': {\r\n                    let padding = '';\r\n                    let expectedLength = field.FixedSize * 2;\r\n                    if (val.length < expectedLength) {\r\n                        for (let i = 0; i < (expectedLength - val.length); i++) {\r\n                            padding += '0';\r\n                        }\r\n                    }\r\n                    if (field.Padding === 'LEADING_ZEROES') {\r\n                        val = padding + val;\r\n                    } else if (field.Padding === 'TRAILING_ZEROES') {\r\n                        val += padding;\r\n                    } else {\r\n                        console.log(`Unsupported padding - ${field.Padding} for Fixed BCD field`);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n                case 'BINARY': {\r\n\r\n                    let padding = '';\r\n                    let expectedLength = field.FixedSize * 2;\r\n                    if (val.length < expectedLength) {\r\n                        for (let i = 0; i < (expectedLength - val.length); i++) {\r\n                            if (field.Padding.endsWith('ZEROES')) {\r\n                                padding += '0';\r\n                            } else {\r\n                                padding += 'F';\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    if (field.Padding.startsWith('LEADING_')) {\r\n                        val = padding + val;\r\n                    } else if (field.Padding.startsWith('TRAILING_')) {\r\n                        val += padding;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n                default: {\r\n                    console.log(\"Unsupported field encoding type -\" + field.DataEncoding);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return val;\r\n\r\n    }\r\n\r\n    fieldValueChanged(event) {\r\n        this.setState({hasError: false, errMsg: null, fieldValue: event.target.value});\r\n\r\n    }\r\n\r\n    appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n        let key = field.ID;\r\n        if (this.props.readOnly) {\r\n            key = 'response_seg_' + field.ID;\r\n        }\r\n        content.push(<IsoField key={key} field={field} id2Value={id2Value} isoMsg={this.props.isoMsg}\r\n                               readOnly={this.props.readOnly}\r\n                               parentField={parentField}\r\n                               level={level}\r\n                               onFieldUpdate={this.onFieldUpdate}/>);\r\n    }\r\n\r\n    render() {\r\n\r\n        let selectionColumnContent;\r\n\r\n        if (this.selectable) {\r\n            selectionColumnContent = <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                                                    color={\"primary\"}\r\n                                                                    checked={this.state.selected}\r\n                                                                    onChange={this.fieldSelectionChanged}/>\r\n            </td>\r\n        } else {\r\n            selectionColumnContent = <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                                                    color={\"primary\"}\r\n                                                                    disabled={true}\r\n                                                                    checked={this.state.selected}\r\n                                                                    onChange={this.fieldSelectionChanged}/>\r\n            </td>\r\n        }\r\n        let positionInParent = \"\";\r\n        if (this.props.field.ParentId > 0) {\r\n            positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n        }\r\n\r\n        let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type + ' / ';\r\n        if (this.props.field.Type === AppProps.FixedField) {\r\n            fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / ' + 'Encoding: '\r\n                + this.props.field.DataEncoding;\r\n        } else if (this.props.field.Type === AppProps.VariableField) {\r\n            fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize + ' / '\r\n                + 'Length Encoding: ' + this.props.field.LengthEncoding + ' / ' + 'Data Encoding: '\r\n                + this.props.field.DataEncoding;\r\n        } else if (this.props.field.Type === AppProps.BitmappedField) {\r\n        }\r\n\r\n        let children = [];\r\n\r\n        this.props.field.Children.forEach(\r\n            c => this.appendFieldContent(children, c, this.props.field, this.state.id2Value,\r\n                this.props.level + 1));\r\n\r\n        let levelIndicator = \"\";\r\n        for (let i = 0; i < this.props.level; i++) {\r\n            levelIndicator += '\\u2193';\r\n        }\r\n\r\n        return (<React.Fragment>\r\n                <tr>\r\n                    {/* selection column */}\r\n                    {selectionColumnContent}\r\n\r\n                    {/* field name column*/}\r\n\r\n                    <OverlayTrigger overlay={(<Tooltip id=\"hi\"\r\n                                                       style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                                    placement=\"top\">\r\n                        <td style={{\r\n                            width: \"100px\", fontSize: \"12px\"\r\n                        }}>\r\n                            <InputLabel style={{fontSize: \"14px\"}}>{levelIndicator + ' '\r\n                            + this.props.field.Name}</InputLabel>\r\n                        </td>\r\n                    </OverlayTrigger>\r\n\r\n                    {/* field specification column */}\r\n                    {/*fieldSpecColumnContent*/}\r\n\r\n                    {/* field value column */}\r\n                    <td>\r\n\r\n                        <TextField margin={\"dense\"} size={\"small\"} variant={\"standard\"}\r\n                                   value={this.state.fieldValue}\r\n                                   error={this.state.hasError}\r\n                                   helperText={this.state.errMsg}\r\n                                   onChange={this.fieldValueChanged}\r\n                                   style={{width: \"70%\"}}\r\n                                   disabled={this.props.readOnly || !this.state.fieldEditable}\r\n                                   key={\"fld_value_\" + this.state.field.ID}\r\n                                   onBlur={this.onFocusLost}\r\n                        />\r\n\r\n                        <Button size={\"small\"} variant={\"contained\"} style={{\r\n                            float: 'right', fontSize: '14px', marginRight: '2%', marginLeft: \"2%\"\r\n                        }}\r\n                                onClick={this.toggleExpanded}> {this.state.expandBtnLabel}\r\n                        </Button>\r\n\r\n                    </td>\r\n\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan=\"3\">\r\n                        <FieldExtras show={this.state.showExpanded}\r\n                                     field={this.state.field}\r\n                                     value={this.state.fieldValue}\r\n                                     readOnly={this.props.readOnly}\r\n                                     isoMsg={this.props.isoMsg}\r\n                                     onClose={this.setNewValue}/>\r\n                    </td>\r\n                </tr>\r\n                {children}\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: props.show, selectedMsg: ''};\r\n        this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n        this.closeDialogFail = this.closeDialogFail.bind(this);\r\n        this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n    }\r\n\r\n    selectedMsgChanged(event) {\r\n        this.setState({selectedMsg: event.target.value});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //console.log(\"smd: componentDidUpdate\", this.state);\r\n        if (this.props.show === true && prevState.show === false) {\r\n\r\n            axios.get(appProps.loadMsgUrl, {\r\n                params: {\r\n                    specId: this.props.specId,\r\n                    msgId: this.props.msgId,\r\n                }\r\n            }).then(res => {\r\n                // console.log(res);\r\n                this.setState(\r\n                    {\r\n                        savedMsgs: res.data.saved_messages,\r\n                        selectedMsg: res.data.saved_messages[0],\r\n                        show: true\r\n                    });\r\n\r\n            }).catch(e => {\r\n                    //FIXME\r\n                    console.log(e);\r\n                    this.setState({show: true, errorMessage: e.response.data});\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    closeDialogSuccess() {\r\n        this.setState({show: false});\r\n        this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n    }\r\n\r\n    closeDialogFail() {\r\n        this.setState({show: false});\r\n        //TODO:: also tell the parent that we're done\r\n        //and return the value of the selected saved msg\r\n        this.props.closeLoadMsgDialog(null);\r\n    }\r\n\r\n    render() {\r\n\r\n        let content;\r\n\r\n        if (this.state.show) {\r\n            if (this.state.errorMessage) {\r\n                content = <div>{this.state.errorMessage}</div>\r\n            } else {\r\n                content =\r\n                    <React.Fragment>\r\n\r\n                        <TextField type={\"text\"} key={\"msg_name_save\"}\r\n                                   margin={\"dense\"}\r\n                                   fullWidth={true} select={true}\r\n                                   variant={\"outlined\"} label={\"Saved Message\"}\r\n                                   value={this.state.selectedMsg}\r\n                                   onChange={this.selectedMsgChanged}>\r\n\r\n\r\n                            {this.state.savedMsgs.map((sm) => {\r\n                                return <MenuItem key={sm} value={sm}>{sm}</MenuItem>\r\n                            })\r\n                            }\r\n                        </TextField>\r\n                    </React.Fragment>;\r\n            }\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                        aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                        maxWidth={\"sm\"}>\r\n                    <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Select\r\n                        Message</DialogTitle>\r\n                    <DialogContent>\r\n                        <div>\r\n                            <Grid container={true} spacing={2}>\r\n\r\n                                <Grid container>\r\n                                    <Grid item lg={12} xl={12}>\r\n                                        {content}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                        <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n\r\n            /*<Modal show={this.state.show}\r\n                   onHide={this.closeDialogFail}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Load Saved Message</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{content}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n                  OK\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>*/\r\n\r\n        );\r\n    }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField/IsoField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Draggable from \"react-draggable\";\r\n\r\n// ResponseSegment displays the response to an ISO message\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: props.show, data: this.props.data, msgTemplate: this.props.msgTemplate\r\n        }\r\n        this.hideResponseSegment = this.hideResponseSegment.bind(this);\r\n        this.copyToClipboard = this.copyToClipboard.bind(this);\r\n\r\n        this.textAreaRef = React.createRef();\r\n    }\r\n\r\n    appendFieldContent(content, field, idToField, level) {\r\n        content.push(<IsoField key={'response_seg_' + field.ID} field={field}\r\n                               id2Value={idToField}\r\n                               readOnly={true} level={level}\r\n                               onFieldUpdate={this.onFieldUpdate}/>);\r\n        return \"\"\r\n    }\r\n\r\n    hideResponseSegment() {\r\n        this.setState({show: false});\r\n        this.props.onClose();\r\n    }\r\n\r\n    collectData(field, idToValue, content) {\r\n        if (idToValue.get(field.ID)) {\r\n            let val = idToValue.get(field.ID);\r\n            content.push(`${field.Name}: ${val}`);\r\n        }\r\n        if (field.Children.length > 0) {\r\n            field.Children.forEach(cf => {\r\n                this.collectData(cf, idToValue, content)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (prevProps.show === false && this.props.show === true) {\r\n            this.setState({\r\n                show: true, data: this.props.data, msgTemplate: this.props.msgTemplate\r\n            })\r\n        }\r\n    }\r\n\r\n    copyToClipboard() {\r\n        this.textAreaRef.current.select();\r\n        if (!document.execCommand('copy')) {\r\n            alert('Failed to copy to clipboard!')\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let content = [];\r\n        let forClipboard = [];\r\n        if (this.state.show) {\r\n\r\n            let idToField = new Map();\r\n            this.state.data.forEach(f => {\r\n                idToField.set(f.ID, f.Value);\r\n            });\r\n\r\n            this.state.msgTemplate.fields.forEach(field => {\r\n                this.collectData(field, idToField, forClipboard)\r\n            });\r\n            let clipboardText = \"ISO Response  \\n|---------------|\\n\" + forClipboard.reduce(\r\n                (p, c, currentIndex) => {\r\n                    if (currentIndex === 1) {\r\n                        return p + \"\\n\" + c + \"\\n\";\r\n                    } else {\r\n                        return p + c + \"\\n\";\r\n                    }\r\n                })\r\n\r\n            clipboardText = \"ISO Request  \\n|---------------|\\n\" + this.props.reqData + \"\\n\\n\"\r\n                + clipboardText + \"\\n\\n\";\r\n\r\n            this.state.msgTemplate.fields.forEach(field => {\r\n                this.appendFieldContent(content, field, idToField, 0)\r\n            });\r\n\r\n            //console.log(content);\r\n\r\n            return (<React.Fragment>\r\n\r\n\r\n                {this.state.show ? <Dialog open={this.state.show}\r\n                                           onClose={this.hideResponseSegment} scroll={\"paper\"}\r\n                                           PaperComponent={PaperComponent}\r\n                                           aria-labelledby=\"draggable-dialog-title\"\r\n                                           maxWidth={\"sm\"} fullWidth={true}\r\n                                           disableBackdropClick={true}>\r\n                    <DialogTitle style={{cursor: 'move'}}\r\n                                 id=\"draggable-dialog-title\">{this.props.dialogTitle}</DialogTitle>\r\n                    <DialogContent dividers={true}>\r\n\r\n                        <Paper>\r\n          <textarea ref={this.textAreaRef}\r\n                    style={{\r\n                        opacity: \"0.01\", position: \"absolute\", zIndex: -9999, height: 0\r\n                    }} value={clipboardText}/>\r\n\r\n\r\n                            <table border=\"0\" align={\"center\"}>\r\n                                <thead>\r\n                                <tr style={{\r\n                                    fontFamily: \"lato-regular\",\r\n                                    backgroundColor: \"#eed143\",\r\n                                    fontSize: \"15px\",\r\n                                    align: \"center\",\r\n                                    borderBottom: 'solid',\r\n                                    borderColor: 'blue'\r\n                                }}>\r\n                                    <td colSpan=\"3\"\r\n                                        align={\"center\"}>{\"Response Segment\"}</td>\r\n                                </tr>\r\n                                <tr style={{\r\n                                    fontFamily: \"lato-regular\", backgroundColor: \"#3effba\", fontSize: \"14px\",\r\n                                }}>\r\n                                    <td align={\"center\"}>Selection</td>\r\n                                    <td align={\"center\"} style={{width: \"35%\"}}>Field</td>\r\n                                    <td align={\"center\"} style={{width: \"50%\"}}>Field Data\r\n                                    </td>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {content}\r\n                                </tbody>\r\n                            </table>\r\n                        </Paper>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.copyToClipboard} size=\"small\"\r\n                                color=\"primary\"\r\n                                variant={\"contained\"}>\r\n                            Copy To Clipboard\r\n                        </Button>\r\n                        <Button onClick={this.hideResponseSegment} size=\"small\"\r\n                                color=\"primary\"\r\n                                variant={\"contained\"}>\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n            </React.Fragment>);\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n    return (<Draggable handle=\"#draggable-dialog-title\"\r\n                       cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n        <Paper {...props} />\r\n    </Draggable>);\r\n}","import React from 'react'\r\nimport {Button} from \"react-bootstrap\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: props.show, traceMsg: '', errorMessage: null};\r\n        this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n        this.closeDialogFail = this.closeDialogFail.bind(this);\r\n        this.traceChanged = this.traceChanged.bind(this);\r\n        this.isValidTrace = this.isValidTrace.bind(this);\r\n    }\r\n\r\n    isValidTrace(trace) {\r\n        return !!(trace.trim() !== \"\" && (trace.length\r\n            % 2 === 0 && trace.match(\"^[0-9,a-f,A-F]+$\")));\r\n\r\n    }\r\n\r\n    traceChanged(event) {\r\n\r\n        let updatedTrace = event.target.value;\r\n\r\n        if (!this.isValidTrace(updatedTrace)) {\r\n            this.setState({\r\n                traceMsg: updatedTrace,\r\n                errorMessage: \"Input is not valid hex\"\r\n            });\r\n        } else {\r\n            this.setState({traceMsg: updatedTrace, errorMessage: null});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.show === true && prevState.show === false) {\r\n            this.setState({show: true, traceMsg: ''});\r\n        }\r\n    }\r\n\r\n    closeDialogSuccess() {\r\n        if (this.isValidTrace(this.state.traceMsg)) {\r\n            this.setState({show: false})\r\n            this.props.setTrace(this.state.traceMsg);\r\n        }\r\n    }\r\n\r\n    closeDialogFail() {\r\n        this.setState({show: false});\r\n        this.props.setTrace(null);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                        aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                        maxWidth={\"md\"}>\r\n                    <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Parse\r\n                        Trace</DialogTitle>\r\n                    <DialogContent>\r\n                        <div>\r\n                            <Grid container={true} spacing={2}>\r\n\r\n                                <Grid container>\r\n                                    <Grid item lg={12} xl={12}>\r\n                                        <TextField key={\"trace_input\"} variant={\"outlined\"}\r\n                                                   label={\"Hex Trace\"} margin={\"dense\"}\r\n                                                   fullWidth={true} value={this.state.traceMsg}\r\n                                                   error={this.state.errorMessage !== null}\r\n                                                   onChange={this.traceChanged} rows={10}\r\n                                                   helperText={this.state.errorMessage}\r\n                                                   multiline={true}/>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                        <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: props.show,\r\n            msgName: props.initialMessage,\r\n            updateIfExists: false\r\n        };\r\n        this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n        this.closeDialogFail = this.closeDialogFail.bind(this);\r\n        this.msgNameChanged = this.msgNameChanged.bind(this);\r\n        this.updateIfExistsChanged = this.updateIfExistsChanged.bind(this);\r\n    }\r\n\r\n    msgNameChanged(event) {\r\n        this.setState({errorMessage: '', msgName: event.target.value});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.show === true && prevState.show === false) {\r\n\r\n            this.setState(\r\n                {show: true, msgName: this.props.msgName});\r\n\r\n        }\r\n    }\r\n\r\n    closeDialogSuccess() {\r\n\r\n        if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n            this.setState({errorMessage: 'Please specify a message!'});\r\n            return;\r\n        }\r\n\r\n        let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n            + '&dsName=' + this.state.msgName + '&updateMsg='\r\n            + this.state.updateIfExists + '&msg=' + JSON.stringify(\r\n                this.props.data);\r\n\r\n        axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n            console.log(res);\r\n            this.props.msgSaveSuccess(this.state.msgName, this.state.updateIfExists);\r\n            this.setState({show: false});\r\n\r\n        }).catch(e => {\r\n                this.props.msgSaveFailed(e);\r\n                this.setState({show: false});\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    closeDialogFail() {\r\n        this.props.msgSaveCancelled();\r\n        this.setState({show: false});\r\n    }\r\n\r\n    updateIfExistsChanged(event) {\r\n        this.setState({updateIfExists: event.target.checked});\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                        aria-labelledby=\"form-dialog-title\" fullWidth={true} maxWidth={\"sm\"}>\r\n                    <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Save Message</DialogTitle>\r\n                    <DialogContent>\r\n                        <div>\r\n                            <Grid container={true} spacing={2}>\r\n\r\n                                <Grid container>\r\n                                    <Grid item lg={12} xl={12}>\r\n                                        <TextField type={\"text\"} key={\"msg_name_save\"} margin={\"dense\"}\r\n                                                   fullWidth={true}\r\n                                                   variant={\"outlined\"} label={\"Message Name\"}\r\n                                                   value={this.state.msgName}\r\n                                                   onChange={this.msgNameChanged}/>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Grid container>\r\n                                    <Grid item xs={4}>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox key={\"key_update_if_exists\"}\r\n                                                               size={\"sm\"}\r\n                                                               checked={this.state.updateIfExists}\r\n                                                               onChange={this.updateIfExistsChanged}/>}\r\n                                            label={\"Overwrite\"}/>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                        <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\n// NetworkSettings is a component that manages the ip, port and MLI type\r\n// used when sending a message\r\nclass NetworkSettings extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            targetServerIp: props.serverIP, targetServerPort: props.port, mliType: props.mliType\r\n        }\r\n\r\n        this.serverIpChanged = this.serverIpChanged.bind(this);\r\n        this.serverPortChanged = this.serverPortChanged.bind(this);\r\n        this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n\r\n    }\r\n\r\n    mliTypeChanged(e) {\r\n        this.setStateAndPushUp({mliType: e.target.value});\r\n        this.props.onChange(this.state.targetServerIp, this.state.targetServerPort, e.target.value)\r\n    }\r\n\r\n    serverIpChanged(e) {\r\n        this.setState({targetServerIp: e.target.value});\r\n        this.props.onChange(e.target.value, this.state.targetServerPort, this.state.mliType)\r\n    }\r\n\r\n    serverPortChanged(e) {\r\n        this.setState({targetServerPort: e.target.value});\r\n        this.props.onChange(this.state.targetServerIp, e.target.value, this.state.mliType)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Box border={1} borderColor={\"#1228B6\"} borderRadius={8}\r\n                 style={{backgroundColor: \"#E5E4E3\", marginBottom: \"1%\"}}>\r\n                <div style={{\r\n                    textAlign: \"left\",\r\n                    verticalAlign: \"baseline\",\r\n                    marginBottom: \"2%\",\r\n                    marginTop: \"2%\",\r\n                    width: \"100%\"\r\n                }}>\r\n                    <Grid container={true} spacing={3} justify={\"space-around\"}>\r\n\r\n                        <Grid item={true} lg={6}>\r\n                            <TextField id=\"ns_ip\" label=\"Host IP/Name\" size={\"small\"} fullWidth={true}\r\n                                       variant=\"outlined\"\r\n                                       value={this.state.targetServerIp}\r\n                                       onChange={this.serverIpChanged}/>\r\n                        </Grid>\r\n\r\n                        <Grid item={true} lg={4}>\r\n                            <TextField id=\"ns_port\" label=\"Port\" size={\"small\"} fullWidth={true}\r\n                                       variant=\"outlined\" value={this.state.targetServerPort}\r\n                                       onChange={this.serverPortChanged}/>\r\n                        </Grid>\r\n                        <Grid item={true} log={4}>\r\n                            <TextField select size={\"small\"} fullWidth={true}\r\n                                       value={this.state.mliType} variant={\"outlined\"} label={\"MLI\"}\r\n                                       onChange={this.mliTypeChanged}>\r\n                                <MenuItem value={\"2i\"}>2I</MenuItem>\r\n                                <MenuItem value={\"2e\"}>2E</MenuItem>\r\n                                <MenuItem value={\"4i\"}>4I</MenuItem>\r\n                                <MenuItem value={\"4e\"}>4E</MenuItem>\r\n                            </TextField>\r\n\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n                </div>\r\n            </Box>);\r\n    }\r\n}\r\n\r\nexport default NetworkSettings","import * as React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\"\r\nimport appProps from \"./Properties\";\r\n\r\nexport default class MsgHistPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        console.log(\"New MsgHist\")\r\n        this.state = {maxItems: props.initialMaxItems, logData: props.initialLogData}\r\n\r\n        this.maxItemsChanged = this.maxItemsChanged.bind(this);\r\n        this.fetchLogs = this.fetchLogs.bind(this);\r\n\r\n    }\r\n\r\n    maxItemsChanged(event) {\r\n        this.setState({maxItems: event.target.value})\r\n    }\r\n\r\n    fetchLogs() {\r\n\r\n        axios.get(appProps.logHistUrl\r\n            + `?spec_id=${this.props.specId}&msg_id=${this.props.msgId}&count=${this.state.maxItems}`).then(\r\n            res => {\r\n                console.log(res.data)\r\n                let displayData = \"\"\r\n                res.data.forEach(e => {\r\n                    displayData += e + \"\\n-----------------------------\\n\";\r\n                });\r\n\r\n                this.setState({logData: displayData})\r\n                this.props.saveState({maxItems: this.state.maxItems, logData: this.state.logData})\r\n\r\n            }).catch(e => {\r\n            console.log(e)\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<div style={{textAlign: \"left\", marginTop: \"5%\"}}>\r\n\r\n            <Grid container={true} spacing={5} alignItems={\"center\"}>\r\n                <Grid item={true} lg={4}>\r\n                    <TextField key={\"isim-hist-max-items\"} variant={\"outlined\"} margin={\"dense\"}\r\n                               label={\"Last 'X' Messages\"}\r\n                               fullWidth={true}\r\n                               value={this.state.maxItems} select={true}\r\n                               onChange={this.maxItemsChanged}>\r\n                        <MenuItem value={5}>5</MenuItem>\r\n                        <MenuItem value={10}>10</MenuItem>\r\n                        <MenuItem value={25}>25</MenuItem>\r\n                        <MenuItem value={50}>50</MenuItem>\r\n\r\n                    </TextField>\r\n                </Grid>\r\n                <Grid item={true} lg={4}>\r\n                    <Button variant={\"contained\"} color={\"primary\"} size={\"small\"}\r\n                            onClick={this.fetchLogs}>Fetch</Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <div style={{width: \"80%\"}}>\r\n                <TextField key={\"isim-hist-logs\"} margin={\"dense\"}\r\n                           label={\"Messages\"}\r\n                           fullWidth={true} multiline={true} rowsMax={100} contentEditable={false}\r\n                           value={this.state.logData}/>\r\n            </div>\r\n\r\n        </div>);\r\n    }\r\n\r\n}","import * as React from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nexport default class UIIsoBitmap extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let pos = Array(192)\r\n        pos.fill('0')\r\n        //pos.forEach(function (v, i, array) {\r\n        //    pos[i] = '0';\r\n        //})\r\n\r\n        let v = \"\";\r\n        pos.forEach(p => {\r\n            v += p;\r\n        })\r\n\r\n        this.state = {pos: pos, bitmapstr: this.toHexString(v)};\r\n\r\n        this.toHexString = this.toHexString.bind(this);\r\n        this.isSet = this.isSet.bind(this);\r\n        this.bitChanged = this.bitChanged.bind(this);\r\n        this.bitmapChanged = this.bitmapChanged.bind(this);\r\n    }\r\n\r\n    bitmapChanged(event) {\r\n\r\n\r\n        let newValue = event.target.value;\r\n        newValue = newValue.replace(\":\", \"\");\r\n        newValue = newValue.replace(\":\", \"\");\r\n        let npads = 192 - newValue.length\r\n        if (npads < 0) {\r\n            this.setState({errMsg: \"bitmap value cannot exceed 192 bits!\"})\r\n            return\r\n        }\r\n\r\n        if (!newValue.match(\"^[0-9,a-f,A-F]+$\")) {\r\n            this.setState({errMsg: \"bitmap value can only contains hex characters\"})\r\n            return\r\n        }\r\n\r\n        for (let i = 0; i < npads; i++) {\r\n            newValue += \"0\";\r\n        }\r\n\r\n\r\n        //now convert the hex coded bitmap to binary\r\n\r\n        let pos = Array(192);\r\n        for (let i = 0, j = 0; i < newValue.length; i++) {\r\n            let binValue = UIIsoBitmap.toBinary(newValue.substr(i, 1))\r\n            for (let k = 0; k < 4; k++, j++) {\r\n                pos[j] = binValue[k];\r\n            }\r\n\r\n        }\r\n        let v = \"\";\r\n        pos.forEach(p => {\r\n            v += p;\r\n        })\r\n        this.setState({pos: pos, bitmapstr: this.toHexString(v), errMsg: null});\r\n\r\n    }\r\n\r\n    isSet(pos) {\r\n        return this.state.pos[pos] === '1';\r\n    }\r\n\r\n    toHexString(v) {\r\n\r\n        //TODO:: This is lame.., improve this\r\n        let res = \"\";\r\n        for (let i = 0; i < v.length; i += 8) {\r\n            let frg1 = v.substr(i, 4)\r\n            let frg2 = v.substr(i + 4, 4)\r\n\r\n            res += UIIsoBitmap.toHex(frg1) + UIIsoBitmap.toHex(frg2)\r\n\r\n        }\r\n\r\n        return res.substr(0, 16) + \":\" + res.substr(16, 16) + \":\" + res.substr(32, 16);\r\n\r\n        //return res;\r\n\r\n    }\r\n\r\n    static toBinary(frg1) {\r\n        let res = \"\";\r\n        switch (frg1) {\r\n            case \"0\":\r\n                res = \"0000\";\r\n                break;\r\n            case \"1\":\r\n                res = \"0001\";\r\n                break;\r\n            case \"2\":\r\n                res = \"0010\";\r\n                break;\r\n            case \"3\":\r\n                res = \"0011\";\r\n                break;\r\n            case \"4\":\r\n                res = \"0100\";\r\n                break;\r\n            case \"5\":\r\n                res = \"0101\";\r\n                break;\r\n            case \"6\":\r\n                res = \"0110\";\r\n                break;\r\n            case \"7\":\r\n                res = \"0111\";\r\n                break;\r\n            case \"8\":\r\n                res = \"1000\";\r\n                break;\r\n            case \"9\":\r\n                res = \"1001\";\r\n                break;\r\n            case \"A\":\r\n                res = \"1010\";\r\n                break;\r\n            case \"B\":\r\n                res = \"1011\";\r\n                break;\r\n            case \"C\":\r\n                res = \"1100\";\r\n                break;\r\n            case \"D\":\r\n                res = \"1101\";\r\n                break;\r\n            case \"E\":\r\n                res = \"1110\";\r\n                break;\r\n            case \"F\":\r\n                res = \"1111\";\r\n                break;\r\n\r\n        }\r\n\r\n        return res;\r\n\r\n    }\r\n\r\n    static toHex(frg1) {\r\n        let res = \"\";\r\n        switch (frg1) {\r\n            case \"0000\":\r\n                res = \"0\";\r\n                break;\r\n            case \"0001\":\r\n                res = \"1\";\r\n                break;\r\n            case \"0010\":\r\n                res = \"2\";\r\n                break;\r\n            case \"0011\":\r\n                res = \"3\";\r\n                break;\r\n            case \"0100\":\r\n                res = \"4\";\r\n                break;\r\n            case \"0101\":\r\n                res = \"5\";\r\n                break;\r\n            case \"0110\":\r\n                res = \"6\";\r\n                break;\r\n            case \"0111\":\r\n                res = \"7\";\r\n                break;\r\n            case \"1000\":\r\n                res = \"8\";\r\n                break;\r\n            case \"1001\":\r\n                res = \"9\";\r\n                break;\r\n            case \"1010\":\r\n                res = \"A\";\r\n                break;\r\n            case \"1011\":\r\n                res = \"B\";\r\n                break;\r\n            case \"1100\":\r\n                res = \"C\";\r\n                break;\r\n            case \"1101\":\r\n                res = \"D\";\r\n                break;\r\n            case \"1110\":\r\n                res = \"E\";\r\n                break;\r\n            case \"1111\":\r\n                res = \"F\";\r\n                break;\r\n\r\n        }\r\n\r\n        return res;\r\n\r\n    }\r\n\r\n    bitChanged(event, pos) {\r\n\r\n        //event.persist()\r\n\r\n        //console.log(event,pos)\r\n        let lpos = this.state.pos;\r\n\r\n        //console.log(event.target.selected)\r\n\r\n        if (event.target.checked) {\r\n            lpos[pos] = '1';\r\n        } else {\r\n            lpos[pos] = '0';\r\n        }\r\n        let v = \"\";\r\n        this.state.pos.forEach(p => {\r\n            v += p;\r\n        })\r\n        //console.log(v)\r\n\r\n        this.setState({bitmapstr: this.toHexString(v), pos: lpos})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let fcontent = [];\r\n\r\n        let content = [];\r\n        fcontent.push(<TextField key=\"bmp_str\" value={this.state.bitmapstr} fullWidth={true} variant={\"outlined\"}\r\n                                 onChange={this.bitmapChanged}\r\n                                 error={this.state.errMsg != null} helperText={this.state.errMsg} label={\"Value\"}/>);\r\n\r\n        let scontent = [];\r\n        //\r\n\r\n        for (let i = 0; i < 192; i++) {\r\n            scontent.push(<Grid item={true} sm={1} alignItems={\"spaced-evenly\"}><FormControlLabel label={i + 1}\r\n                                                                                                  key={\"lb\" + \"_\" + (i + 1)}\r\n                                                                                                  control={<Checkbox\r\n                                                                                                      key={\"cb\" + \"_\" + i}\r\n                                                                                                      checked={this.state.pos[i] === '1'}\r\n                                                                                                      onChange={(event) => this.bitChanged(event, i)}/>}/></Grid>)\r\n\r\n            if ((i + 1) >= 8 && (i + 1) % 8 === 0) {\r\n                content.push(<Grid container={true} justify={\"space-evenly\"}>{scontent}</Grid>);\r\n                scontent = [];\r\n            }\r\n            if ((i + 1) >= 64 && (i + 1) % 64 === 0) {\r\n                fcontent.push(<Box style={{marginTop: \"2%\", marginBottom: \"2%\"}} border={1}\r\n                                   borderColor={\"primary.main\"} borderRadius={4}><Grid container={true}\r\n                                                                                       justify={\"space-evenly\"}>{content}</Grid></Box>);\r\n                content = []\r\n            }\r\n\r\n\r\n        }\r\n        //fcontent.push(<Grid container={true} spacing={3}>{scontent}</Grid>);\r\n\r\n        return (\r\n            <div style={{width: \"100%\"}}>\r\n                {fcontent}\r\n            </div>\r\n\r\n\r\n        );\r\n\r\n    }\r\n}","import * as React from \"react\";\r\nimport PinGenBox from \"./PinGenBox\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport MacGenBox from \"./MacGenBox\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport UIIsoBitmap from \"./BitmapFragment\";\r\n\r\nexport default class CryptoUtilsBox extends React.Component {\r\n    pinField = {\r\n        PinGenProps: {\r\n            PANFieldId: 0,\r\n            PANExtractParams: \"\",\r\n            PINFormat: \"ISO0\",\r\n            PINClear: \"1234\",\r\n            PINKey: \"1234567890abcd0102030546febce4ee\"\r\n        }, GenType: \"pin_gen\"\r\n    };\r\n\r\n    macField = {\r\n        MacGenProps: {\r\n            MacAlgo: \"ANSIX9_19\", MacKey: \"1234567890abcd0102030546febce4ee\"\r\n        }, GenType: \"mac_gen\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {pinBlock: \"\", mac: \"\", macData: \"\", error: \"\"}\r\n\r\n        this.setPinValue = this.setPinValue.bind(this);\r\n        this.setMacValue = this.setMacValue.bind(this);\r\n        this.macDataChanged = this.macDataChanged.bind(this);\r\n    }\r\n\r\n    setPinValue(value) {\r\n        this.setState({pinBlock: value})\r\n    }\r\n\r\n    setMacValue(value) {\r\n        this.setState({mac: value})\r\n    }\r\n\r\n    macDataChanged(event) {\r\n        if (event.target.value.trim().length === 0 || event.target.value.trim().length % 2 !== 0) {\r\n            this.setState({error: \"MacData should be hex/even-digits\", macData: event.target.value});\r\n            return\r\n        }\r\n\r\n        this.setState({error: \"\", macData: event.target.value.trim()})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div style={{\r\n                textAlign: \"left\", marginTop: \"5%\"\r\n            }}>\r\n\r\n                <Grid container={true} spacing={1} direction={\"column\"}>\r\n\r\n                    <Grid item={true} sm={6} justify={\"center\"}>\r\n\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon/>}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography>PIN Generator</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n\r\n                                <div style={{\r\n                                    textAlign: \"left\", marginTop: \"5%\", width: \"100%\", height: \"100%\"\r\n                                }}>\r\n\r\n                                    <PinGenBox field={this.pinField} setPinBlock={this.setPinValue}/>\r\n                                    <TextField size={\"small\"} label={\"PIN Block\"} variant={\"outlined\"}\r\n                                               margin={\"dense\"}\r\n                                               fullWidth={true}\r\n                                               value={this.state.pinBlock}/>\r\n                                </div>\r\n\r\n\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item={true} sm={6}>\r\n\r\n\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon/>}\r\n                                aria-controls=\"panel2a-content\"\r\n                                id=\"panel2a-header\"\r\n                            >\r\n                                <Typography>MAC Generator</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n\r\n                                <div style={{\r\n                                    textAlign: \"left\", marginTop: \"5%\", width: \"100%\"\r\n                                }}>\r\n\r\n                                    <TextField size={\"small\"} label={\"Mac Data\"} variant={\"outlined\"}\r\n                                               margin={\"dense\"}\r\n                                               fullWidth={true} multiline={true} onChange={this.macDataChanged}\r\n                                               rows={5}\r\n                                               rowsMax={20} error={this.state.error !== \"\"}\r\n                                               helperText={this.state.error}\r\n                                               value={this.state.macData}/>\r\n                                    <MacGenBox field={this.macField} setMac={this.setMacValue}\r\n                                               macData={this.state.macData}/>\r\n                                    <TextField size={\"small\"} label={\"MAC\"} variant={\"outlined\"} margin={\"dense\"}\r\n                                               fullWidth={true}\r\n                                               value={this.state.mac}/>\r\n                                </div>\r\n\r\n\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item={true} sm={6}>\r\n\r\n\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon/>}\r\n                                aria-controls=\"panel3a-content\"\r\n                                id=\"panel3a-header\"\r\n                            >\r\n                                <Typography>ISO Bitmap Codec</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n\r\n                                <div style={{\r\n                                    textAlign: \"left\", marginTop: \"5%\", width: \"100%\"\r\n                                }}>\r\n                                    <UIIsoBitmap/>\r\n\r\n                                </div>\r\n\r\n\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n            </div>);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport axios from \"axios\";\r\nimport IsoField from './IsoField/IsoField.js'\r\nimport SelectMessageDialog from '../Dialogs/SelectMessageDialog.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport appProps from '../Utils/Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"../Dialogs/ParseMessageDialog\";\r\nimport SaveMessageDialog from \"../Dialogs/SaveMessageDialog\";\r\n\r\nimport 'typeface-roboto';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NetworkSettings from \"../Utils/NetworkSettings\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport AlertDialog from \"../Dialogs/AlertDialog\";\r\nimport MsgHistPanel from \"../Utils/MsgHistPanel.js\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport CryptoUtilsBox from \"../Utils/CryptoUtils\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport MsgUtils from \"../Utils/MsgUtils\";\r\n\r\n// MessageStructure is the central component that encompasses the Request and\r\n// the response segments along with NetworkSettings etc\r\nexport default class MessageStructure extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //console.log(this.props);\r\n        //console.log(\"$msg_structure$\", this.props.specs, this.props.spec, this.props.msg);\r\n\r\n        this.state = {\r\n            msgTemplate: null,\r\n            loaded: false,\r\n            spec: props.spec,\r\n            msg: props.msg,\r\n            shouldShow: props.showMsgTemplate,\r\n            targetServerIp: '127.0.0.1',\r\n            targetServerPort: '6666',\r\n            mliType: \"2i\",\r\n            currentDataSet: '',\r\n            errDialogVisible: false,\r\n            errorMessage: '',\r\n            showLoadMessagesDialog: false,\r\n            showTraceInputDialog: false,\r\n            showSaveMsgDialog: false,\r\n            showResponse: false,\r\n            responseData: null,\r\n            reqMenuVisible: false,\r\n            selectedReqMenuItem: null,\r\n            reqClipboardData: null,\r\n            selectedTab: 0,\r\n            msgHist: {maxItems: 5, logData: ''}\r\n        };\r\n\r\n        this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n        this.appendFieldContent = this.appendFieldContent.bind(this);\r\n        this.sendToHost = this.sendToHost.bind(this);\r\n        //this.addFieldContent = this.addFieldContent.bind(this);\r\n        this.showErrorDialog = this.showErrorDialog.bind(this);\r\n        this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n        this.processError = this.processError.bind(this);\r\n        this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n        this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n        this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n        this.setTrace = this.setTrace.bind(this);\r\n        this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n        this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n        this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n        this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n        this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n        this.showInfoDialog = this.showInfoDialog.bind(this);\r\n\r\n        this.showMenu = this.showMenu.bind(this);\r\n        this.hideMenu = this.hideMenu.bind(this);\r\n        this.handleMenuClick = this.handleMenuClick.bind(this);\r\n\r\n        this.showResponseDialog = this.showResponseDialog.bind(this);\r\n        this.getTemplateLabel = this.getTemplateLabel.bind(this);\r\n        this.networkSettingsChanged = this.networkSettingsChanged.bind(this);\r\n        this.hideResponse = this.hideResponse.bind(this);\r\n        this.tabChanged = this.tabChanged.bind(this);\r\n        this.saveHistState = this.saveHistState.bind(this);\r\n\r\n        this.setStateAndPushUp = this.setStateAndPushUp.bind(this);\r\n\r\n    }\r\n\r\n    //some day let's use Redux\r\n    setStateAndPushUp(stateObj) {\r\n\r\n        this.setState(stateObj)\r\n\r\n    }\r\n\r\n    saveHistState(histState) {\r\n        console.log(\"Received \", histState)\r\n        this.setStateAndPushUp({msgHist: histState})\r\n\r\n    }\r\n\r\n    tabChanged(event, newValue) {\r\n        this.setStateAndPushUp({selectedTab: newValue})\r\n    }\r\n\r\n    networkSettingsChanged(ip, port, mliType) {\r\n        this.setStateAndPushUp({targetServerIp: ip, targetServerPort: port, mliType: mliType})\r\n    }\r\n\r\n    showMenu(event) {\r\n\r\n        this.setStateAndPushUp({\r\n            selectedReqMenuItem: event.currentTarget, reqMenuVisible: true\r\n        })\r\n\r\n    }\r\n\r\n    hideMenu() {\r\n        this.setStateAndPushUp({reqMenuVisible: false})\r\n        this.setStateAndPushUp({selectedReqMenuItem: null})\r\n    }\r\n\r\n    showResponseDialog() {\r\n        this.hideMenu()\r\n        this.setStateAndPushUp({showResponse: true})\r\n    }\r\n\r\n    hideResponse() {\r\n        this.setStateAndPushUp({showResponse: false})\r\n\r\n    }\r\n\r\n    handleMenuClick(event) {\r\n        alert(event.currentTarget)\r\n\r\n        this.setStateAndPushUp({selectedReqMenuItem: event.currentTarget})\r\n        this.hideMenu()\r\n    }\r\n\r\n    // Receives the trace as a callback from ParseMessageDialog component\r\n    setTrace(trace) {\r\n        if (trace != null) {\r\n            //console.log(\"trace  = \", trace);\r\n            // now parse this via a API call\r\n\r\n            axios.post(appProps.parseTraceUrl + '/' + this.state.spec.ID + '/' + this.state.msg.ID, trace)\r\n                .then(res => {\r\n                    console.log(\"parsed msg data\", res.data);\r\n                    res.data.parsed_fields.forEach(fd => {\r\n                        let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n                        fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n                    });\r\n                }).catch(e => {\r\n\r\n                console.log(\"error\", e);\r\n                this.processError(e)\r\n            })\r\n\r\n        }\r\n        this.setStateAndPushUp({showTraceInputDialog: false})\r\n    }\r\n\r\n    showUnImplementedError() {\r\n        this.setStateAndPushUp({\r\n            errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n            errDialogVisible: true\r\n        })\r\n    }\r\n\r\n    closeLoadMsgDialog(selectedMsg) {\r\n        this.setStateAndPushUp({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n\r\n        if (selectedMsg != null) {\r\n            axios.get(appProps.loadMsgUrl, {\r\n                params: {\r\n                    specId: this.state.spec.ID, msgId: this.state.msg.ID, dsName: selectedMsg\r\n                }\r\n            }).then(res => {\r\n                console.log(\"saved msg = \", res.data.saved_message);\r\n                res.data.saved_message.forEach(fd => {\r\n                    let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n                    fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n                });\r\n            }).catch(e => {\r\n                console.log(e);\r\n                this.processError(e)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    showInfoDialog(msg) {\r\n        this.setStateAndPushUp({errDialogVisible: true, errorMessage: msg})\r\n    }\r\n\r\n    msgSaveSuccess(msgName, updated) {\r\n        let type = \"saved\";\r\n        if (updated) {\r\n            type = \"updated\"\r\n        }\r\n        this.showInfoDialog(`Message ${msgName} ${type} successfully.`);\r\n        this.setStateAndPushUp({showSaveMsgDialog: false});\r\n    }\r\n\r\n    msgSaveFailed(e) {\r\n        this.processError(e);\r\n        this.setStateAndPushUp({showSaveMsgDialog: false});\r\n    }\r\n\r\n    msgSaveCancelled() {\r\n        this.setStateAndPushUp({showSaveMsgDialog: false});\r\n    }\r\n\r\n    showSaveMsgDialog() {\r\n\r\n        // build the data and then\r\n        let content = [];\r\n        let validationErrors = [];\r\n        MsgUtils.getMsgContent(this.state.isoMsg, content, validationErrors)\r\n        this.setStateAndPushUp({saveData: content, showSaveMsgDialog: true})\r\n    }\r\n\r\n    showTraceInputsDialog() {\r\n        this.hideMenu()\r\n        this.setStateAndPushUp({showTraceInputDialog: true})\r\n\r\n    }\r\n\r\n    showLoadMessagesDialog() {\r\n        this.hideMenu()\r\n        this.setStateAndPushUp({showLoadMessagesDialog: true})\r\n\r\n    }\r\n\r\n    closeErrorDialog() {\r\n        this.setStateAndPushUp({errDialogVisible: false})\r\n    }\r\n\r\n    showErrorDialog() {\r\n        this.setStateAndPushUp({errDialogVisible: true});\r\n    }\r\n\r\n    //sends the message (as JSON) to the API server to be sent to the ISO host\r\n    sendToHost() {\r\n\r\n        this.hideMenu()\r\n\r\n        let content = [];\r\n        let validationErrors = [];\r\n\r\n        MsgUtils.getMsgContent(this.state.isoMsg, content, validationErrors)\r\n\r\n        if (validationErrors.length > 0) {\r\n            let errMsg = \"\";\r\n            validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n            this.setStateAndPushUp({errorMessage: errMsg});\r\n            this.showErrorDialog();\r\n            return\r\n        }\r\n\r\n        console.log(content)\r\n        let reqClipboardData = content.reduce((p, c, currentIndex) => {\r\n\r\n            if (currentIndex === 1) {\r\n                return p.Name + \":\" + p.Value + \"\\n\" + c.Name + \":\" + c.Value + \"\\n\";\r\n            }\r\n            return p + c.Name + ':' + c.Value + \"\\n\";\r\n\r\n        });\r\n\r\n        //alert(reqClipboardData)\r\n\r\n        //lets not hide and then show the response segment again\r\n        this.setStateAndPushUp({\r\n            showResponse: false, responseData: null, reqClipboardData: reqClipboardData\r\n        });\r\n\r\n        let postData = 'host=' + this.state.targetServerIp + \"&port=\" + this.state.targetServerPort\r\n            + '&mli=' + this.state.mliType + '&specId=' + this.state.spec.ID + '&msgId='\r\n            + this.state.msg.ID + \"&msg=\" + JSON.stringify(content);\r\n        //console.log(postData)\r\n        axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n            console.log(\"Response from server\", res.data.response_fields);\r\n            this.setStateAndPushUp({showResponse: true, responseData: res.data.response_fields});\r\n\r\n        }).catch(e => {\r\n            console.log(\"error = \", e);\r\n            this.processError(e)\r\n        })\r\n\r\n    }\r\n\r\n    processError(e) {\r\n\r\n        if (!e.response) {\r\n            console.log(\"Error = \", e);\r\n            this.setStateAndPushUp({\r\n                errorMessage: 'Error: Unable to reach API server', errDialogVisible: true\r\n            });\r\n            return\r\n        }\r\n\r\n        console.log(e.response)\r\n\r\n        if (e.response.status === 400) {\r\n            this.setStateAndPushUp({errorMessage: e.response.data.error, errDialogVisible: true});\r\n        } else {\r\n            this.setStateAndPushUp({\r\n                errorMessage: 'Unexpected error from server - ' + e.response.status, errDialogVisible: true\r\n            });\r\n        }\r\n    }\r\n\r\n    getTemplateLabel() {\r\n        //alert(this.state.spec + \"// \" + this.state.msg)\r\n        return this.state.spec.Name + \" // \" + this.state.msg.Name;\r\n    }\r\n\r\n    onFieldUpdate(e) {\r\n        //console.log(\"field updated =>\" + e.fieldName)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMessageTemplate(this.props.spec, this.props.msg)\r\n    }\r\n\r\n    // Reads and sets up the msgTemplate in state.isoMsg\r\n    getMessageTemplate(pSpec, pMsg) {\r\n        let spec = this.props.specs.find(s => {\r\n            if (s.Name === pSpec) {\r\n                return s;\r\n            }\r\n            return null;\r\n        });\r\n        let msg = spec.Messages.find(m => {\r\n            if (m.Name === pMsg) {\r\n                return m;\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        let url = appProps.templateUrl + '/' + spec.ID + \"/\" + msg.ID;\r\n        console.log(url);\r\n        axios.get(url).then(res => {\r\n\r\n            let isoMsg = new Map();\r\n            isoMsg.set(\"msg_template\", res.data);\r\n            isoMsg.set(\"spec_id\", spec.ID);\r\n            isoMsg.set(\"msg_id\", msg.ID);\r\n\r\n            this.setStateAndPushUp({\r\n                spec: spec, msg: msg, msgTemplate: res.data, loaded: true, isoMsg: isoMsg\r\n            });\r\n\r\n            console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(err => {\r\n            console.log(err)\r\n            this.setStateAndPushUp({errorMessage: err, errDialogVisible: true})\r\n        });\r\n    }\r\n\r\n    appendFieldContent(content, field, isoMsg, level) {\r\n        content.push(<IsoField key={field.ID} field={field} isoMsg={isoMsg}\r\n                               level={level}\r\n                               onFieldUpdate={this.onFieldUpdate}/>);\r\n    }\r\n\r\n    render() {\r\n\r\n        let content = [];\r\n        if (this.state.loaded === true) {\r\n            this.state.msgTemplate.fields.forEach(field => {\r\n                this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n            })\r\n        }\r\n\r\n        return (\r\n\r\n            <React.Fragment>\r\n                <AlertDialog show={this.state.errDialogVisible}\r\n                             msg={this.state.errorMessage}\r\n                             onClose={this.closeErrorDialog}/>\r\n\r\n\r\n                <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                                     specId={this.state.spec.ID}\r\n                                     msgId={this.state.msg.ID}\r\n                                     closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n                <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                                    setTrace={this.setTrace}/>\r\n\r\n                <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                                   msgId={this.state.msg.ID}\r\n                                   initialMessage={this.state.currentDataSet}\r\n                                   specId={this.state.spec.ID}\r\n                                   data={this.state.saveData}\r\n                                   msgName={this.state.currentDataSet}\r\n                                   msgSaveSuccess={this.msgSaveSuccess}\r\n                                   msgSaveFailed={this.msgSaveFailed}\r\n                                   msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n\r\n                <AppBar position=\"static\" variant={\"elevation\"} style={{width: \"80%\", float: \"left\"}}>\r\n                    <Tabs value={this.state.selectedTab} onChange={this.tabChanged} aria-label=\"IsoSim Tabs\"\r\n                          centered={true}>\r\n                        <Tab label=\"Messaging\"/>\r\n                        <Tab label=\"History\"/>\r\n                        <Tab label=\"Utilities\"/>\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <TabPanel value={this.state.selectedTab} index={0}>\r\n\r\n                    <div style={{\r\n                        display: \"inline-block\", width: \"50%\", float: \"left\", fill: 'aqua', marginTop: \"20px\"\r\n                    }}>\r\n\r\n                        <div>\r\n                            <NetworkSettings onChange={this.networkSettingsChanged}\r\n                                             serverIP={this.state.targetServerIp}\r\n                                             port={this.state.targetServerPort} mliType={this.state.mliType}/>\r\n\r\n                            <ButtonGroup size={\"small\"} color={\"primary\"} fullWidth={true}\r\n                                         variant={\"contained\"}>\r\n                                <Button onClick={this.showTraceInputsDialog}>Parse</Button>\r\n                                <Button onClick={this.showLoadMessagesDialog}>Load</Button>\r\n                                <Button onClick={this.showSaveMsgDialog}>Save</Button>\r\n                                <Button onClick={this.sendToHost}>Send</Button>\r\n                                <Button onClick={this.showResponseDialog} disabled={this.state.responseData == null}>Show\r\n                                    Response</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </div>\r\n\r\n                        {/*TODO:: pull this into a separate component*/}\r\n                        <Paper variation={\"outlined\"} style={{verticalAlign: \"middle\"}}>\r\n                            <table border=\"0\" align={\"center\"}\r\n                                   style={{align: \"center\", marginTop: \"10px\", width: \"80%\"}}>\r\n                                <thead>\r\n                                <tr style={{\r\n                                    fontFamily: \"lato-regular\",\r\n                                    backgroundColor: \"#ff8f5b\",\r\n                                    fontSize: \"15px\",\r\n                                    borderBottom: 'solid',\r\n                                    borderColor: 'blue'\r\n                                }}>\r\n                                    <td colSpan=\"3\" align={\"center\"}>\r\n\r\n                                        <div\r\n                                            style={{display: \"inline-block\"}}>{this.getTemplateLabel()}</div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{\r\n                                    fontFamily: \"lato-regular\", backgroundColor: \"#ff8f5b\", fontSize: \"14px\",\r\n                                }}>\r\n                                    <td align={\"center\"}>Selection</td>\r\n                                    <td align={\"center\"} style={{width: '35%'}}> Field</td>\r\n                                    <td align={\"center\"} style={{width: '70%'}}>Field Data\r\n                                    </td>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {content}\r\n                                </tbody>\r\n                            </table>\r\n                        </Paper>\r\n\r\n                        {/*<div style={{float: \"right\"}}>*/}\r\n                        <ResponseSegment show={this.state.showResponse}\r\n                                         reqData={this.state.reqClipboardData}\r\n                                         onClose={this.hideResponse}\r\n                                         data={this.state.responseData}\r\n                                         dialogTitle={\"Response - [\" + this.getTemplateLabel() + \"]\"}\r\n                                         msgTemplate={this.state.msgTemplate}/>\r\n\r\n                    </div>\r\n\r\n\r\n                </TabPanel>\r\n                <TabPanel value={this.state.selectedTab} index={1}>\r\n                    <div style={{alignItems: \"left\", width: \"100%\"}}>\r\n                        <MsgHistPanel specId={this.state.spec.ID} msgId={this.state.msg.ID}\r\n                                      initialMaxItems={this.state.msgHist.maxItems}\r\n                                      initialLogData={this.state.msgHist.logData}\r\n                                      saveState={this.saveHistState}/>\r\n\r\n                    </div>\r\n                </TabPanel>\r\n                <TabPanel value={this.state.selectedTab} index={2}>\r\n\r\n                    <div style={{width: \"100%\"}}>\r\n                        <CryptoUtilsBox/>\r\n                    </div>\r\n                </TabPanel>\r\n\r\n\r\n            </React.Fragment>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n//copied right out from the Material UI demos :-)\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (<div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n    >\r\n        {value === index && (<Box>\r\n            {children}\r\n        </Box>)}\r\n    </div>);\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node, index: PropTypes.any.isRequired, value: PropTypes.any.isRequired,\r\n};\r\n\r\n","import {withStyles} from \"@material-ui/styles\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\n//import * as React from \"react\";\r\n\r\n/*const useStyles = theme => {\r\n\r\n  return ({\r\n    selected: {\r\n      \"&:focus\": {\r\n        backgroundColor: \"red\"\r\n      }\r\n    }\r\n  });\r\n}*/\r\n\r\n/*\r\nclass StyledTreeItem extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {classes}=this.props;\r\n\r\n    return(\r\n        <TreeItem classes={classes.selected} ...props/>);\r\n  }\r\n\r\n}\r\n*/\r\n\r\n/*\r\nconst StyledTreeItem = withStyles(({\r\n  selected: {\r\n    \"&:focus\": {\r\n      textDecoration: \"underline\"\r\n    }\r\n  }\r\n}))(TreeItem);\r\nexport default StyledTreeItem*/\r\n\r\n//copied from here - https://material-ui.com/components/tree-view/\r\n\r\nconst useTreeItemStyles = makeStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.text.secondary, '&:hover > $content': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    }, '&:focus > $content, &$selected > $content': {\r\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    }, '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n  }, content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }, group: {\r\n    marginLeft: 10, '& $content': {\r\n      paddingLeft: theme.spacing(3),\r\n    },\r\n  }, expanded: {}, selected: {}, label: {\r\n    fontWeight: 'inherit', color: 'inherit',\r\n  }, labelRoot: {\r\n    display: 'flex', alignItems: 'center', padding: theme.spacing(0.8, 0),\r\n  }, labelIcon: {\r\n    marginRight: theme.spacing(1),\r\n  }, labelText: {\r\n    fontWeight: 'inherit', flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function StyledTreeItem(props) {\r\n  const classes = useTreeItemStyles();\r\n  const {labelText, labelIcon: LabelIcon, labelInfo, color, bgColor, ...other} = props;\r\n\r\n  return (<TreeItem\r\n          label={<div className={classes.labelRoot}>\r\n            <LabelIcon color=\"inherit\" className={classes.labelIcon}/>\r\n            <Typography variant=\"body2\" className={classes.labelText}>\r\n              {labelText}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"inherit\">\r\n              {labelInfo}\r\n            </Typography>\r\n          </div>}\r\n          style={{\r\n            '--tree-view-color': color, '--tree-view-bg-color': bgColor,\r\n          }}\r\n          classes={{\r\n            root: classes.root,\r\n            content: classes.content,\r\n            expanded: classes.expanded,\r\n            selected: classes.selected,\r\n            group: classes.group,\r\n            label: classes.label,\r\n          }}\r\n          {...other}\r\n      />);\r\n}\r\n\r\nStyledTreeItem.propTypes = {\r\n  bgColor: PropTypes.string,\r\n  color: PropTypes.string,\r\n  labelIcon: PropTypes.elementType.isRequired,\r\n  labelInfo: PropTypes.string,\r\n  labelText: PropTypes.string.isRequired,\r\n};","import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\n\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport appProps from \"../../Utils/Properties\";\r\nimport {Folder, Home, Message} from \"@material-ui/icons\"\r\nimport StyledTreeItem from \"./StyledTreeItem\";\r\n\r\n\r\n// SpecTree displays a tree of all the available specifications and the messages\r\n// defined under the spec\r\nclass SpecTree extends React.Component {\r\n\r\n    treeInstance;\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            specs: [], loaded: false, errDialogVisible: false, errorMessage: ''\r\n        };\r\n        //this.messageClicked = this.messageClicked.bind(this);\r\n        this.nodeSelected = this.nodeSelected.bind(this);\r\n    }\r\n\r\n    nodeSelected(event, selectedNode) {\r\n        // console.log(\"selected node - \", selectedNode)\r\n\r\n        let matches = selectedNode.match(\"nodeId_([0-9]+)_([0-9]+)\");\r\n        if (matches) {\r\n            console.log(\"matched\", this.treeInstance);\r\n            this.props.msgSelected(matches[1], matches[2]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(appProps.allSpecsUrl).then(res => {\r\n            console.log(\"allSpecs\", res.data);\r\n            this.setState({specs: res.data.specs, loaded: true});\r\n            let timerId = setInterval(function () {\r\n                alert('Select one of the spec and message in the tree to get started!')\r\n                clearInterval(timerId)\r\n            }, 2)\r\n\r\n        }).catch(err => console.log(err))\r\n    }\r\n\r\n    buildMessages(spec) {\r\n        let content = []\r\n\r\n\r\n        spec.Messages.forEach(m => {\r\n            content.push(<StyledTreeItem nodeId={\"nodeId_\" + spec.ID + \"_\" + m.ID}\r\n                                         sid={spec.ID} mid={m.ID}\r\n                                         label={m.Name}\r\n            />)\r\n        });\r\n        return content\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.loaded === true) {\r\n\r\n            let content = [];\r\n            this.state.specs.forEach(s => {\r\n\r\n                content.push(<StyledTreeItem align=\"left\" nodeId={\"nodeId_\" + s.ID}\r\n                                             icon={<Folder color={\"primary\"}/>}\r\n                                             label={s.Name}>{this.buildMessages(s)}</StyledTreeItem>);\r\n\r\n            });\r\n\r\n            let treeContent = <StyledTreeItem nodeId={\"nodeId_0\"}\r\n                                              icon={<Home color={\"primary\"}/>}\r\n                                              label={\"ISO8583 Specifications\"}>{content}</StyledTreeItem>;\r\n\r\n            this.treeInstance = <TreeView\r\n                onNodeSelect={this.nodeSelected}\r\n                defaultExpanded={['nodeId_0']}\r\n                defaultCollapseIcon={<ExpandMoreIcon/>}\r\n                defaultExpandIcon={<ChevronRightIcon/>}\r\n                defaultParentIcon={<Folder color={\"primary\"}/>}\r\n                defaultEndIcon={<Message color=\"primary\"/>}\r\n            >\r\n                {treeContent}\r\n            </TreeView>;\r\n            return (<React.Fragment>\r\n                {this.treeInstance}\r\n\r\n            </React.Fragment>);\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default SpecTree","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from '../Iso/MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport SpecTree from \"./SpecTree/SpecTree\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgSelected = this.msgSelected.bind(this);\r\n    this.getSpecByID = this.getSpecByID.bind(this);\r\n\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  msgSelected(specId, msgId) {\r\n\r\n    console.log(specId, msgId)\r\n    console.log(this.state.specs)\r\n    let spec = this.getSpecByID(parseInt(specId))\r\n    console.log(\"spec = \", spec)\r\n    let msg = null;\r\n    spec.Messages.forEach(m => {\r\n      if (m.ID === parseInt(msgId)) {\r\n        msg = m;\r\n      }\r\n    })\r\n\r\n    this.setState({loaded: true, currentSpec: spec.Name, currentSpecMsg: msg.Name});\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data.specs, loaded: true});\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (<React.Fragment>\r\n\r\n\r\n          <div>\r\n            <Modal show={this.state.errDialogVisible}\r\n                   onHide={this.closeErrorDialog}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <div style={{\r\n              float: \"left\",\r\n              display: \"inline-block\",\r\n              marginRight: \"20px\",\r\n              marginLeft: \"20px\",\r\n              backgroundColor: '#fbfff0'\r\n\r\n            }}>\r\n              <SpecTree msgSelected={this.msgSelected}/>\r\n            </div>\r\n            <div align=\"center\" style={{backgroundColor: '#fbfff0', float: \"right\", width: \"80%\"}}>\r\n              {this.state.loaded && this.state.currentSpec !== \"Select\" ? <MessageStructure\r\n                  key={this.state.currentSpec + \"_\" + msg}\r\n                  ref={this.msgTemplateRef}\r\n                  specs={this.state.specs}\r\n                  spec={this.state.currentSpec}\r\n                  msg={this.state.currentSpecMsg}/> : null}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value, currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (<select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                    onChange={this.specChanged}>\r\n      <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n      {this.state.specs.map((s) => {\r\n        return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n      })}\r\n\r\n    </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {spec.Messages.map(msg => {\r\n              return <option key={msg.ID}\r\n                             value={msg.Name}>{msg.Name}</option>\r\n            })}\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByID(specId) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.ID === specId) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/Navigation/NavBar.js'\r\n\r\nfunction App() {\r\n    return (\r\n        <div style={{backgroundColor: '#fbfff0'}}>\r\n            <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\r\n                Simulator</h1>\r\n            <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\r\n               href={\"/iso/v0/server\"} target={\"_blank\"}\r\n               rel={\"noopener noreferrer\"}>[Manage Servers]</a>\r\n\r\n            <div className=\"App\">\r\n                <NavBar/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\r\nReactDOM.render(<App style={{backgroundColor:'#fbfff0'}}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}