{"version":3,"sources":["components/Utils/ExpandedText.js","components/Utils/Properties.js","components/Utils/FieldValidator.js","components/Iso/IsoField/IsoField.js","components/Dialogs/SelectMessageDialog.js","components/Iso/ResponseSegment.js","components/Dialogs/ParseMessageDialog.js","components/Dialogs/SaveMessageDialog.js","components/Utils/NetworkSettings.js","components/Dialogs/AlertDialog.js","components/Iso/MessageStructure.js","components/Navigation/SpecTree/SpecTree.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ExpandedText","props","state","show","value","closeThis","bind","valueChanged","event","this","setState","target","onClose","prevProps","prevState","snapshot","Fragment","style","borderBottom","borderColor","fontFamily","width","minHeight","maxHeight","onChange","disabled","readOnly","height","Button","size","float","fontSize","onClick","React","Component","AppProps","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","FixedField","VariableField","BitmappedField","appProps","fieldValidator","validate","field","fieldData","errors","validationFailed","Type","DataEncoding","length","FixedSize","push","Name","dataErr","match","fieldLen","MinSize","MaxSize","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","setError","toggleExpanded","onFocusLost","applyPadding","selectable","selected","fieldValue","id2Value","get","ID","fieldEditable","bgColor","hasError","expandBtnLabel","defaultFieldValue","includes","Array","fill","reduce","p","c","isoMsg","set","newValue","val","Children","forEach","f","fieldName","currentVal","bits","from","ChangeType","Position","turnOff","i","obj","errMsg","checked","Value","initVal","undefined","Padding","padding","startsWith","expectedLength","console","log","endsWith","content","parentField","level","key","selectionColumnContent","align","Checkbox","type","color","positionInParent","ParentId","fieldInfo","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","id","placement","InputLabel","TextField","margin","variant","error","helperText","onBlur","marginRight","marginLeft","colSpan","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","axios","params","specId","msgId","then","res","savedMsgs","data","saved_messages","catch","e","errorMessage","response","closeLoadMsgDialog","fullWidth","select","label","map","sm","MenuItem","Dialog","open","aria-labelledby","maxWidth","DialogTitle","DialogContent","Grid","container","spacing","item","lg","xl","DialogActions","ResponseSegment","msgTemplate","hideResponseSegment","copyToClipboard","textAreaRef","createRef","idToField","idToValue","cf","collectData","current","document","execCommand","alert","forClipboard","Map","fields","clipboardText","currentIndex","reqData","scroll","PaperComponent","disableBackdropClick","cursor","dialogTitle","dividers","Paper","ref","opacity","position","zIndex","border","backgroundColor","handle","cancel","ParseMessageDialog","traceMsg","traceChanged","isValidTrace","trace","trim","updatedTrace","setTrace","rows","multiline","SaveMessageDialog","msgName","initialMessage","msgNameChanged","updateIfExistsChanged","postData","updateIfExists","JSON","stringify","post","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","xs","FormControlLabel","control","NetworkSettings","targetServerIp","targetServerPort","mliType","serverIpChanged","serverPortChanged","mliTypeChanged","verticalAlign","defaultValue","AlertDialog","handleClose","aria-describedby","DialogContentText","msg","MessageStructure","specs","spec","loaded","shouldShow","showMsgTemplate","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","reqMenuVisible","selectedReqMenuItem","reqClipboardData","sendToHost","addFieldContent","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","showMenu","hideMenu","handleMenuClick","showResponseDialog","getTemplateLabel","networkSettingsChanged","hideResponse","ip","port","currentTarget","parsed_fields","fd","dsName","saved_message","updated","saveData","validationErrors","fData","response_fields","status","getMessageTemplate","pSpec","pMsg","find","s","Messages","m","url","err","display","ButtonGroup","variation","marginTop","SpecTree","messageClicked","parentElement","getAttribute","msgSelected","TreeItem","nodeId","sid","mid","icon","Folder","buildMessages","treeContent","Home","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","Message","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","getSpecByID","msgTemplateRef","parseInt","getCurrentSpec","Modal","onHide","Header","closeButton","Title","Body","Footer","getSpecByName","name","App","href","rel","className","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.686ae5eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n// ExpandedText shows a field value within a large field (TextArea)\r\n// and is useful when editing fields with large values\r\nexport default class ExpandedText extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {show: this.props.show, value: this.props.value};\r\n    this.closeThis = this.closeThis.bind(this);\r\n    this.valueChanged = this.valueChanged.bind(this);\r\n  }\r\n\r\n  valueChanged(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  closeThis() {\r\n    this.setState({show: true});\r\n    this.props.onClose(this.state.value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.show === false && this.props.show === true && this.state.show\r\n        === false) {\r\n      this.setState({show: true, value: this.props.value})\r\n    } else if (this.props.show === false && this.state.show\r\n        === true) {\r\n      this.setState({show: false, value: this.props.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        (this.state.show === true) ?\r\n\r\n            <React.Fragment>\r\n              <div style={{borderBottom: 'solid', borderColor: 'red'}}>\r\n\r\n        <textarea\r\n            style={{\r\n              fontFamily: \"courier new\",\r\n              width: '100%',\r\n              minHeight: '80px',\r\n              maxHeight: '200px'\r\n            }}\r\n            onChange={this.valueChanged} disabled={this.props.readOnly} value={this.state.value}/>\r\n\r\n                <div style={{height: '25px'}}>\r\n                  <Button size={\"sm\"} style={{\r\n                    float: 'right', fontSize: '10px'\r\n                  }} onClick={this.closeThis}> OK </Button>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n            :\r\n            null\r\n    );\r\n  }\r\n\r\n}","// AppProps are various URL's that are used by axios\r\nexport class AppProps {\r\n\r\n  static FixedField = \"Fixed\";\r\n  static VariableField = \"Variable\";\r\n  static BitmappedField = \"Bitmapped\";\r\n\r\n  constructor() {\r\n    //this.baseUrl = 'http://localhost:8080';\r\n    this.baseUrl = '';\r\n    this.sendMsgUrl = this.baseUrl + '/iso/v1/send';\r\n    this.loadMsgUrl = this.baseUrl + '/iso/v1/loadmsg';\r\n    this.allSpecsUrl = this.baseUrl + '/iso/v1/specs';\r\n    this.templateUrl = this.baseUrl + '/iso/v1/template';\r\n    this.parseTraceUrl = this.baseUrl + '/iso/v5/parse';\r\n    this.saveMsgUrl = this.baseUrl + '/iso/v1/save';\r\n  }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","\r\n// FieldValidator provides validation logic for field values\r\nimport {AppProps} from \"./Properties\";\r\n\r\nclass FieldValidator {\r\n\r\n  constructor(props) {\r\n    this.validate = this.validate.bind(this);\r\n  }\r\n\r\n  validate(field, fieldData, errors) {\r\n\r\n    //console.log(\"validate\", field, fieldData, errors);\r\n    let validationFailed = false;\r\n\r\n    if (field.Type === AppProps.FixedField) {\r\n\r\n      if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n        if (fieldData.length !== field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n          validationFailed = true;\r\n        }\r\n      } else {\r\n        if (fieldData.length !== 2 * field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n              / 2}`);\r\n          validationFailed = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    let dataErr = false;\r\n\r\n    if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n      if (fieldData.length % 2 !== 0) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n        validationFailed = true;\r\n        dataErr = true;\r\n      }\r\n\r\n      if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n          \"^[0-9,a-f,A-F]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n        validationFailed = true;\r\n      }\r\n      if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    if (!dataErr && field.Type === AppProps.VariableField) {\r\n\r\n      let fieldLen = fieldData.length;\r\n      if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n        fieldLen = fieldData.length / 2;\r\n      }\r\n\r\n      if (field.MinSize > 0 && fieldData.length < field.MinSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size of ${fieldLen} is less than required min of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n      if (field.MaxSize > 0 && fieldData.length > field.MaxSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size  of ${fieldLen} is greater than required max of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    //TODO:: other checks like content etc\r\n    return validationFailed;\r\n\r\n  }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import React from \"react\";\r\nimport ExpandedText from '../../Utils/ExpandedText.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport fieldValidator from \"../../Utils/FieldValidator\";\r\nimport {AppProps} from \"../../Utils/Properties\";\r\nimport appProps from \"../../Utils/Properties\";\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n    this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.setSelected = this.setSelected.bind(this);\r\n    this.setNewValue = this.setNewValue.bind(this);\r\n    this.showExpanded = this.showExpanded.bind(this);\r\n    this.closeExpanded = this.closeExpanded.bind(this);\r\n    this.getBgColor = this.getBgColor.bind(this);\r\n    this.setError = this.setError.bind(this);\r\n    this.toggleExpanded = this.toggleExpanded.bind(this);\r\n    this.onFocusLost = this.onFocusLost.bind(this);\r\n    this.applyPadding = this.applyPadding.bind(this);\r\n\r\n    //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n    //because they're mandatory fields in ISO\r\n\r\n    let initialExpandBtnLabel = '+';\r\n    this.selectable = true;\r\n    //readOnly is true when displaying a response segment\r\n    if (this.props.readOnly) {\r\n      this.selectable = false;\r\n\r\n      let selected = false;\r\n      let fieldValue = this.props.id2Value.get(this.props.field.ID)\r\n      if (fieldValue) {\r\n        selected = true;\r\n      }\r\n\r\n      this.state = {\r\n        fieldEditable: true,\r\n        bgColor: 'white',\r\n        hasError: false,\r\n        selected: selected,\r\n        id2Value: this.props.id2Value,\r\n        fieldValue: fieldValue,\r\n        expandBtnLabel: initialExpandBtnLabel,\r\n        showExpanded: false,\r\n        field: this.props.field\r\n      };\r\n    } else {\r\n      let defaultFieldValue = \"\";\r\n      if ([\"Message Type\", \"MTI\", \"Bitmap\"].includes(this.props.field.Name)) {\r\n        this.selectable = false;\r\n        let fieldEditable = true;\r\n        if (this.props.field.Name === \"Bitmap\") {\r\n          defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n          // Bitmap should not be editable\r\n          fieldEditable = false;\r\n        }\r\n\r\n        this.state = {\r\n          fieldEditable: fieldEditable,\r\n          bgColor: \"white\",\r\n          hasError: false,\r\n          selected: true,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false,\r\n          field: this.props.field\r\n        };\r\n      } else {\r\n        this.state = {\r\n          fieldEditable: true,\r\n          bgColor: \"white\",\r\n          selected: false,\r\n          hasError: false,\r\n          fieldValue: defaultFieldValue,\r\n          expandBtnLabel: initialExpandBtnLabel,\r\n          showExpanded: false,\r\n          field: this.props.field\r\n        };\r\n      }\r\n      this.props.isoMsg.set(this.props.field.ID, this);\r\n    }\r\n  }\r\n\r\n  getBgColor() {\r\n    if (this.state.hasError) {\r\n      return \"red\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n\r\n  }\r\n\r\n  setError(hasError) {\r\n    this.setState({hasError: hasError});\r\n  }\r\n\r\n  showExpanded() {\r\n    this.setState({showExpanded: true});\r\n  }\r\n\r\n  toggleExpanded() {\r\n    if (this.state.showExpanded) {\r\n      this.setState({showExpanded: false, expandBtnLabel: '+'});\r\n    } else {\r\n      this.setState({showExpanded: true, expandBtnLabel: '-'});\r\n    }\r\n\r\n  }\r\n\r\n  closeExpanded() {\r\n    this.setState({showExpanded: false});\r\n  }\r\n\r\n  setNewValue(newValue) {\r\n\r\n    let val = this.applyPadding(this.state.selected, newValue);\r\n    this.setState({fieldValue: val, showExpanded: false});\r\n    this.toggleExpanded()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.id2Value !== this.props.id2Value) {\r\n      this.setState({\r\n        fieldValue: this.props.id2Value.get(this.props.field.ID), id2Value: this.props.id2Value\r\n      });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(event) {\r\n    //console.log(\"onField Update\", this.props.field);\r\n    //console.log(\r\n    //    `${this.props.field.Name}: Child field ${event.fieldName} has been updated. ChangeType: ${event.ChangeType}`);\r\n\r\n    if (this.props.field.Type === AppProps.BitmappedField) {\r\n      // get the position of the field\r\n      this.props.field.Children.forEach(f => {\r\n\r\n        if (f.Name === event.fieldName) {\r\n          let currentVal = this.state.fieldValue;\r\n          let bits = Array.from(currentVal);\r\n          //console.log(\"Changing bit \" + f.Position);\r\n          if (event.ChangeType === 'FieldSelected') {\r\n            bits[f.Position - 1] = '1';\r\n            if (f.Position > 64) {\r\n              bits[0] = '1';\r\n            }\r\n          } else if (event.ChangeType === 'FieldDeselected') {\r\n            bits[f.Position - 1] = '0';\r\n\r\n            //if all bits from 65 to 128 are off then turn bit 1 off\r\n            let turnOff = true;\r\n            for (let i = 65; i <= 128; i++) {\r\n              if (bits[i - 1] === '1') {\r\n                turnOff = false;\r\n                break;\r\n              }\r\n            }\r\n            if (turnOff) {\r\n              bits[0] = '0';\r\n            }\r\n\r\n          }\r\n          let newValue = bits.reduce((p = \"\", c) => p + c);\r\n          this.setState({fieldValue: newValue})\r\n\r\n        }\r\n      })\r\n    } else {\r\n\r\n      let obj = {fieldName: this.props.field.Name};\r\n      if (event.ChangeType === 'FieldSelected') {\r\n        //console.log(\"setting self as selected\", this.props.field.Name);\r\n        this.setState({selected: true});\r\n        obj.ChangeType = \"FieldSelected\";\r\n      } else if (event.ChangeType === 'FieldDeselected') {\r\n        this.setState({selected: false});\r\n        obj.ChangeType = \"FieldDeselected\";\r\n      } else {\r\n\r\n        //TODO:: field value has changed, it needs to be parsed and children\r\n        // have to be changed - wait for the new WASM library for ISO parsing capabilities\r\n        // on the frontend :-)\r\n\r\n      }\r\n\r\n      // for fixed and variable type field, if they have children\r\n      // the whole set of children and then let the parent know too\r\n\r\n      this.props.field.Children.forEach(c => {\r\n        if (event.ChangeType === 'FieldSelected') {\r\n          this.props.isoMsg.get(c.ID).setSelected(true);\r\n        } else if (event.ChangeType === 'FieldDeselected') {\r\n          this.props.isoMsg.get(c.ID).setSelected(false);\r\n        }\r\n      });\r\n\r\n      //pass on the message to the parent that I have changed\r\n      this.props.onFieldUpdate(obj);\r\n\r\n    }\r\n  }\r\n\r\n  setSelected(selected) {\r\n\r\n    //console.log(\"Calling apply padding \" + this.state.fieldValue)\r\n    let val = this.applyPadding(selected);\r\n    //this.setState({fieldValue: val, selected: selected});\r\n    this.props.field.Children.forEach(c => {\r\n      this.props.isoMsg.get(c.ID).setSelected(selected);\r\n    });\r\n\r\n    if (selected) {\r\n      let errors = []\r\n      if (fieldValidator.validate(this.props.field, val, errors)) {\r\n\r\n        this.setState({fieldValue: val, hasError: true, errMsg: errors[0], selected: selected});\r\n      } else {\r\n\r\n        this.setState({fieldValue: val, hasError: false, errMsg: null, selected: selected});\r\n      }\r\n    } else {\r\n      this.setState({fieldValue: val, hasError: false, errMsg: null, selected: selected});\r\n\r\n    }\r\n\r\n  }\r\n\r\n  fieldSelectionChanged(event) {\r\n\r\n    let obj = {fieldName: this.props.field.Name};\r\n    let selected = false;\r\n    if (event.target.checked) {\r\n      obj.ChangeType = \"FieldSelected\";\r\n      selected = true;\r\n    } else {\r\n      obj.ChangeType = \"FieldDeselected\";\r\n    }\r\n\r\n    if (this.props.field.Type !== AppProps.BitmappedField) {\r\n      this.setSelected(selected);\r\n    }\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  onFocusLost() {\r\n\r\n    let val = this.applyPadding(this.state.selected)\r\n\r\n    let errors = []\r\n    if (this.state.selected) {\r\n      if (fieldValidator.validate(this.props.field, val, errors)) {\r\n        this.setState({fieldValue: val, hasError: true, errMsg: errors[0]})\r\n      } else {\r\n\r\n        this.setState({fieldValue: val, hasError: false, errMsg: null});\r\n        let obj = {\r\n          fieldName: this.props.field.Name, ChangeType: \"ValueChanged\", Value: val\r\n        };\r\n        this.props.onFieldUpdate(obj)\r\n      }\r\n    } else {\r\n      this.setState({fieldValue: val, hasError: false, errMsg: null});\r\n    }\r\n  }\r\n\r\n  //This method applied to the field if one is specified in the field definition\r\n  // selected - A boolean that represents if the field is currently selected (padding is applied only if the field is selected)\r\n  // initVal - The initial value for the field, if unspecified the current value on the state is used\r\n  applyPadding(selected, initVal = \"\") {\r\n\r\n    let val = initVal;\r\n\r\n    if (val === \"\") {\r\n      val = this.state.fieldValue;\r\n    }\r\n\r\n    if (val === undefined) {\r\n      val = \"\";\r\n    }\r\n\r\n    let field = this.state.field;\r\n    if (field.Padding === \"\" || !selected) {\r\n      return val\r\n    }\r\n\r\n    if (field.Type === 'Fixed') {\r\n\r\n      let padding = '';\r\n      switch (field.DataEncoding) {\r\n        case 'ASCII':\r\n        case 'EBCDIC': {\r\n\r\n          if (val.length < field.FixedSize) {\r\n            for (let i = 0; i < (field.FixedSize - val.length); i++) {\r\n              if (field.Padding === 'LEADING_ZEROES' || field.Padding === 'TRAILING_ZEROES') {\r\n                padding += '0';\r\n              }\r\n              if (field.Padding === 'LEADING_SPACES' || field.Padding === 'TRAILING_SPACES') {\r\n                padding += ' ';\r\n              }\r\n            }\r\n            //console.log(\"Padding required = *\" + padding + \"*\")\r\n            if (field.Padding.startsWith('LEADING')) {\r\n              val = padding + val;\r\n            } else {\r\n              val = val + padding;\r\n            }\r\n          }\r\n          break;\r\n        }//end ASCII/EBCDIC\r\n\r\n        case 'BCD': {\r\n          let padding = '';\r\n          let expectedLength = field.FixedSize * 2;\r\n          if (val.length < expectedLength) {\r\n            for (let i = 0; i < (expectedLength - val.length); i++) {\r\n              padding += '0';\r\n            }\r\n          }\r\n          if (field.Padding === 'LEADING_ZEROES') {\r\n            val = padding + val;\r\n          } else if (field.Padding === 'TRAILING_ZEROES') {\r\n            val += padding;\r\n          } else {\r\n            console.log(`Unsupported padding - ${field.Padding} for Fixed BCD field`);\r\n          }\r\n\r\n          break;\r\n        }\r\n        case 'BINARY': {\r\n\r\n          let padding = '';\r\n          let expectedLength = field.FixedSize * 2;\r\n          if (val.length < expectedLength) {\r\n            for (let i = 0; i < (expectedLength - val.length); i++) {\r\n              if (field.Padding.endsWith('ZEROES')) {\r\n                padding += '0';\r\n              } else {\r\n                padding += 'F';\r\n              }\r\n\r\n            }\r\n          }\r\n          if (field.Padding.startsWith('LEADING_')) {\r\n            val = padding + val;\r\n          } else if (field.Padding.startsWith('TRAILING_')) {\r\n            val += padding;\r\n          }\r\n\r\n          break;\r\n        }\r\n        default: {\r\n          console.log(\"Unsupported field encoding type -\" + field.DataEncoding);\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n    return val;\r\n\r\n  }\r\n\r\n  fieldValueChanged(event) {\r\n    this.setState({hasError: false, errMsg: null, fieldValue: event.target.value});\r\n\r\n  }\r\n\r\n  appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n    let key = field.ID;\r\n    if (this.props.readOnly) {\r\n      key = 'response_seg_' + field.ID;\r\n    }\r\n    content.push(<IsoField key={key} field={field} id2Value={id2Value}\r\n                           readOnly={this.props.readOnly}\r\n                           parentField={parentField} isoMsg={this.props.isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionColumnContent;\r\n\r\n    if (this.selectable) {\r\n      selectionColumnContent = <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                                              color={\"primary\"}\r\n                                                              checked={this.state.selected}\r\n                                                              onChange={this.fieldSelectionChanged}/>\r\n      </td>\r\n    } else {\r\n      selectionColumnContent = <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                                              color={\"primary\"}\r\n                                                              disabled={true}\r\n                                                              checked={this.state.selected}\r\n                                                              onChange={this.fieldSelectionChanged}/>\r\n      </td>\r\n    }\r\n\r\n    let fieldSpecColumnContent;\r\n    let positionInParent = \"\";\r\n    if (this.props.field.ParentId > 0) {\r\n      positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n    }\r\n\r\n    let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type + ' / ';\r\n    if (this.props.field.Type === AppProps.FixedField) {\r\n      fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / ' + 'Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.VariableField) {\r\n      fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize + ' / '\r\n          + 'Length Encoding: ' + this.props.field.LengthEncoding + ' / ' + 'Data Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.BitmappedField) {\r\n    }\r\n\r\n    let children = [];\r\n\r\n    this.props.field.Children.forEach(\r\n        c => this.appendFieldContent(children, c, this.props.field, this.state.id2Value,\r\n            this.props.level + 1));\r\n\r\n    let levelIndicator = \"\";\r\n    for (let i = 0; i < this.props.level; i++) {\r\n      levelIndicator += '\\u2193';\r\n    }\r\n\r\n    return (<React.Fragment>\r\n          <tr>\r\n            {/* selection column */}\r\n            {selectionColumnContent}\r\n\r\n            {/* field name column*/}\r\n\r\n            <OverlayTrigger overlay={(<Tooltip id=\"hi\"\r\n                                               style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                            placement=\"top\">\r\n              <td style={{\r\n                width: \"100px\", fontSize: \"12px\"\r\n              }}>\r\n                <InputLabel style={{fontSize: \"14px\"}}>{levelIndicator + ' '\r\n                + this.props.field.Name}</InputLabel>\r\n              </td>\r\n            </OverlayTrigger>\r\n\r\n            {/* field specification column */}\r\n            {/*fieldSpecColumnContent*/}\r\n\r\n            {/* field value column */}\r\n            <td>\r\n\r\n              <TextField margin={\"dense\"} size={\"small\"} variant={\"standard\"}\r\n                         value={this.state.fieldValue}\r\n                         error={this.state.hasError}\r\n                         helperText={this.state.errMsg}\r\n                         onChange={this.fieldValueChanged}\r\n                         style={{width: \"70%\"}}\r\n                         disabled={this.props.readOnly || !this.state.fieldEditable}\r\n                         key={\"fld_value_\" + this.state.field.ID}\r\n                         onBlur={this.onFocusLost}\r\n              />\r\n\r\n              <Button size={\"small\"} variant={\"contained\"} style={{\r\n                float: 'right', fontSize: '14px', marginRight: '2%', marginLeft: \"2%\"\r\n              }}\r\n                      onClick={this.toggleExpanded}> {this.state.expandBtnLabel}\r\n              </Button>\r\n\r\n            </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"3\">\r\n              <ExpandedText show={this.state.showExpanded}\r\n                            value={this.state.fieldValue}\r\n                            readOnly={this.props.readOnly}\r\n                            onClose={this.setNewValue}/>\r\n            </td>\r\n          </tr>\r\n          {children}\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, selectedMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n  }\r\n\r\n  selectedMsgChanged(event) {\r\n    this.setState({selectedMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.props.specId,\r\n          msgId: this.props.msgId,\r\n        }\r\n      }).then(res => {\r\n        // console.log(res);\r\n        this.setState(\r\n            {\r\n              savedMsgs: res.data.saved_messages,\r\n              selectedMsg: res.data.saved_messages[0],\r\n              show: true\r\n            });\r\n\r\n      }).catch(e => {\r\n            //FIXME\r\n            console.log(e);\r\n            this.setState({show: true, errorMessage: e.response.data});\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.closeLoadMsgDialog(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n\r\n              <TextField type={\"text\"} key={\"msg_name_save\"}\r\n                         margin={\"dense\"}\r\n                         fullWidth={true} select={true}\r\n                         variant={\"outlined\"} label={\"Saved Message\"}\r\n                         value={this.state.selectedMsg}\r\n                         onChange={this.selectedMsgChanged}>\r\n\r\n\r\n                {this.state.savedMsgs.map((sm) => {\r\n                  return <MenuItem key={sm} value={sm}>{sm}</MenuItem>\r\n                })\r\n                }\r\n              </TextField>\r\n            </React.Fragment>;\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                  maxWidth={\"sm\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Select\r\n              Message</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      {content}\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n\r\n        /*<Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Load Saved Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>*/\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField/IsoField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport Draggable from \"react-draggable\";\r\n\r\n// ResponseSegment displays the response to an ISO message\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      data: this.props.data,\r\n      msgTemplate: this.props.msgTemplate\r\n    }\r\n    this.hideResponseSegment = this.hideResponseSegment.bind(this);\r\n    this.copyToClipboard = this.copyToClipboard.bind(this);\r\n\r\n    this.textAreaRef = React.createRef();\r\n  }\r\n\r\n  appendFieldContent(content, field, idToField, level) {\r\n    content.push(<IsoField key={'response_seg_' + field.ID} field={field}\r\n                           id2Value={idToField}\r\n                           readOnly={true} level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n    return \"\"\r\n  }\r\n\r\n  hideResponseSegment() {\r\n    this.setState({show: false});\r\n    this.props.onClose();\r\n  }\r\n\r\n  collectData(field, idToValue, content) {\r\n    if (idToValue.get(field.ID)) {\r\n      let val = idToValue.get(field.ID);\r\n      content.push(`${field.Name}: ${val}`);\r\n    }\r\n    if (field.Children.length > 0) {\r\n      field.Children.forEach(cf => {\r\n        this.collectData(cf, idToValue, content)\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if (prevProps.show === false && this.props.show === true) {\r\n      this.setState({\r\n        show: true,\r\n        data: this.props.data,\r\n        msgTemplate: this.props.msgTemplate\r\n      })\r\n    }\r\n  }\r\n\r\n  copyToClipboard() {\r\n    this.textAreaRef.current.select();\r\n    if (!document.execCommand('copy')) {\r\n      alert('Failed to copy to clipboard!')\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    let forClipboard = [];\r\n    if (this.state.show) {\r\n\r\n      let idToField = new Map();\r\n      this.state.data.forEach(f => {\r\n        idToField.set(f.ID, f.Value);\r\n      });\r\n\r\n      this.state.msgTemplate.fields.forEach(field => {\r\n        this.collectData(field, idToField, forClipboard)\r\n      });\r\n      let clipboardText = \"ISO Response  \\n|---------------|\\n\"\r\n          + forClipboard.reduce((p, c, currentIndex) => {\r\n            if (currentIndex === 1) {\r\n              return p + \"\\n\" + c + \"\\n\";\r\n            } else {\r\n              return p + c + \"\\n\";\r\n            }\r\n          })\r\n\r\n      clipboardText = \"ISO Request  \\n|---------------|\\n\"\r\n          + this.props.reqData + \"\\n\\n\" + clipboardText + \"\\n\\n\";\r\n\r\n      this.state.msgTemplate.fields.forEach(field => {\r\n        this.appendFieldContent(content, field, idToField, 0)\r\n      });\r\n\r\n      //console.log(content);\r\n\r\n      return (\r\n          <React.Fragment>\r\n\r\n\r\n            {this.state.show ?\r\n                <Dialog open={this.state.show}\r\n                        onClose={this.hideResponseSegment} scroll={\"paper\"}\r\n                        PaperComponent={PaperComponent}\r\n                        aria-labelledby=\"draggable-dialog-title\"\r\n                        maxWidth={\"sm\"} fullWidth={true}\r\n                        disableBackdropClick={true}>\r\n                  <DialogTitle style={{cursor: 'move'}}\r\n                               id=\"draggable-dialog-title\">{this.props.dialogTitle}</DialogTitle>\r\n                  <DialogContent dividers={true}>\r\n\r\n                    <Paper>\r\n<textarea ref={this.textAreaRef}\r\n          style={{\r\n            opacity: \"0.01\",\r\n            position: \"absolute\",\r\n            zIndex: -9999,\r\n            height: 0\r\n          }}>{clipboardText}\r\n                  </textarea>\r\n\r\n                      <table border=\"0\" align={\"center\"}>\r\n                        <thead>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#eed143\",\r\n                          fontSize: \"15px\",\r\n                          align: \"center\",\r\n                          borderBottom: 'solid',\r\n                          borderColor: 'blue'\r\n                        }}>\r\n                          <td colSpan=\"3\"\r\n                              align={\"center\"}>{\"Response Segment\"}</td>\r\n                        </tr>\r\n                        <tr style={{\r\n                          fontFamily: \"lato-regular\",\r\n                          backgroundColor: \"#3effba\",\r\n                          fontSize: \"14px\",\r\n                        }}>\r\n                          <td align={\"center\"}>Selection</td>\r\n                          <td align={\"center\"} style={{width: \"35%\"}}>Field</td>\r\n                          <td align={\"center\"} style={{width: \"50%\"}}>Field Data\r\n                          </td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {content}\r\n                        </tbody>\r\n                      </table>\r\n                    </Paper>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={this.copyToClipboard} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Copy To Clipboard\r\n                    </Button>\r\n                    <Button onClick={this.hideResponseSegment} size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={\"contained\"}>\r\n                      Close\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n          </React.Fragment>);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n      <Draggable handle=\"#draggable-dialog-title\"\r\n                 cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n        <Paper {...props} />\r\n      </Draggable>\r\n  );\r\n}","import React from 'react'\r\nimport {Button} from \"react-bootstrap\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, traceMsg: '', errorMessage: null};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.traceChanged = this.traceChanged.bind(this);\r\n    this.isValidTrace = this.isValidTrace.bind(this);\r\n  }\r\n\r\n  isValidTrace(trace) {\r\n    return !!(trace.trim() !== \"\" && (trace.length\r\n        % 2 === 0 && trace.match(\"^[0-9,a-f,A-F]+$\")));\r\n\r\n  }\r\n\r\n  traceChanged(event) {\r\n\r\n    let updatedTrace = event.target.value;\r\n\r\n    if (!this.isValidTrace(updatedTrace)) {\r\n      this.setState({\r\n        traceMsg: updatedTrace,\r\n        errorMessage: \"Input is not valid hex\"\r\n      });\r\n    } else {\r\n      this.setState({traceMsg: updatedTrace, errorMessage: null});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true, traceMsg: ''});\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    if (this.isValidTrace(this.state.traceMsg)) {\r\n      this.setState({show: false})\r\n      this.props.setTrace(this.state.traceMsg);\r\n    }\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    this.props.setTrace(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true}\r\n                  maxWidth={\"md\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Parse\r\n              Trace</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      <TextField key={\"trace_input\"} variant={\"outlined\"}\r\n                                 label={\"Hex Trace\"} margin={\"dense\"}\r\n                                 fullWidth={true} value={this.state.traceMsg}\r\n                                 error={this.state.errorMessage !== null}\r\n                                 onChange={this.traceChanged} rows={10}\r\n                                 helperText={this.state.errorMessage}\r\n                                 multiline={true}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      msgName: props.initialMessage,\r\n      \"updateIfExists\": false\r\n    };\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.msgNameChanged = this.msgNameChanged.bind(this);\r\n    this.updateIfExistsChanged = this.updateIfExistsChanged.bind(this);\r\n  }\r\n\r\n  msgNameChanged(event) {\r\n    this.setState({errorMessage: '', msgName: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      this.setState(\r\n          {show: true, msgName: this.props.msgName});\r\n\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n\r\n    if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n      this.setState({errorMessage: 'Please specify a message!'});\r\n      return;\r\n    }\r\n\r\n    let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n        + '&dsName=' + this.state.msgName + '&updateMsg='\r\n        + this.state.updateIfExists + '&msg=' + JSON.stringify(\r\n            this.props.data);\r\n\r\n    axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n      console.log(res);\r\n      this.props.msgSaveSuccess(this.state.msgName, this.state.updateIfExists);\r\n      this.setState({show: false});\r\n\r\n    }).catch(e => {\r\n          this.props.msgSaveFailed(e);\r\n          this.setState({show: false});\r\n        }\r\n    );\r\n\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.props.msgSaveCancelled();\r\n    this.setState({show: false});\r\n  }\r\n\r\n  updateIfExistsChanged(event) {\r\n    this.setState({updateIfExists: event.target.checked});\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n          <Dialog open={this.state.show} onClose={this.closeDialogFail}\r\n                  aria-labelledby=\"form-dialog-title\" fullWidth={true} maxWidth={\"sm\"}>\r\n            <DialogTitle id=\"form-dialog-title\" onClose={this.closeDialogFail}>Save Message</DialogTitle>\r\n            <DialogContent>\r\n              <div>\r\n                <Grid container={true} spacing={2}>\r\n\r\n                  <Grid container>\r\n                    <Grid item lg={12} xl={12}>\r\n                      <TextField type={\"text\"} key={\"msg_name_save\"} margin={\"dense\"}\r\n                                 fullWidth={true}\r\n                                 variant={\"outlined\"} label={\"Message Name\"}\r\n                                 value={this.state.msgName}\r\n                                 onChange={this.msgNameChanged}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid container>\r\n                    <Grid item xs={4}>\r\n                      <FormControlLabel\r\n                          control={<Checkbox key={\"key_update_if_exists\"}\r\n                                             size={\"sm\"}\r\n                                             checked={this.state.updateIfExists}\r\n                                             onChange={this.updateIfExistsChanged}/>}\r\n                          label={\"Overwrite\"}/>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.closeDialogSuccess} color=\"primary\">\r\n                OK\r\n              </Button>\r\n              <Button onClick={this.closeDialogFail} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n// NetworkSettings is a component that manages the ip, port and MLI type\r\n// used when sending a message\r\nclass NetworkSettings extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      targetServerIp: \"127.0.0.1\",\r\n      targetServerPort: \"6666\",\r\n      mliType: \"2i\"\r\n    }\r\n\r\n    this.serverIpChanged = this.serverIpChanged.bind(this);\r\n    this.serverPortChanged = this.serverPortChanged.bind(this);\r\n    this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n\r\n  }\r\n\r\n  mliTypeChanged(e) {\r\n    this.setState({mliType: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, this.state.targetServerPort,\r\n        e.target.value)\r\n  }\r\n\r\n  serverIpChanged(e) {\r\n    this.setState({targetServerIp: e.target.value});\r\n    this.props.onChange(e.target.value, this.state.targetServerPort,\r\n        this.state.mliType)\r\n  }\r\n\r\n  serverPortChanged(e) {\r\n    this.setState({targetServerPort: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, e.target.value,\r\n        this.state.mliType)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div align={\"left\"}\r\n             style={{\r\n               align: 'left',\r\n               height: \"80px\",\r\n               verticalAlign: \"baseline\",\r\n               margin: \"10px\"\r\n             }}>\r\n\r\n\r\n          <table\r\n              style={{\r\n                fontFamily: 'lato-regular',\r\n                fontSize: '14px'\r\n              }}>\r\n            <tr>\r\n              <td>\r\n                <TextField id=\"ns_ip\" label=\"IP\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"127.0.0.1\"}\r\n                           onChange={this.serverIpChanged}/>\r\n              </td>\r\n              <td>\r\n\r\n                <TextField id=\"ns_port\" label=\"Port\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"6666\"}\r\n                           onChange={this.serverPortChanged}/>\r\n              </td>\r\n\r\n              <td>\r\n                <TextField select size={\"small\"}\r\n                    value={this.state.mliType} variant={\"outlined\"} label={\"MLI\"}\r\n                    onChange={this.mliTypeChanged}>\r\n                  <MenuItem value={\"2i\"}>2I</MenuItem>\r\n                  <MenuItem value={\"2e\"}>2E</MenuItem>\r\n                </TextField>\r\n\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkSettings","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class AlertDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show};\r\n\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({show: false})\r\n    this.props.onClose();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    \r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (<Dialog\r\n        open={this.state.show}\r\n        onClose={this.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle\r\n          id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {this.props.msg}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={this.handleClose} color=\"primary\">\r\n          OK\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>);\r\n\r\n  }\r\n}","import React from 'react';\r\nimport axios from \"axios\";\r\nimport IsoField from './IsoField/IsoField.js'\r\nimport SelectMessageDialog from '../Dialogs/SelectMessageDialog.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport appProps from '../Utils/Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"../Dialogs/ParseMessageDialog\";\r\nimport SaveMessageDialog from \"../Dialogs/SaveMessageDialog\";\r\nimport fieldValidator from '../Utils/FieldValidator'\r\n\r\nimport 'typeface-roboto';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NetworkSettings from \"../Utils/NetworkSettings\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport AlertDialog from \"../Dialogs/AlertDialog\";\r\n\r\n// MessageStructure is the central component that encompasses the Request and\r\n// the response segments along with NetworkSettings etc\r\nexport default class MessageStructure extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    console.log(\"$msg_structure$\", this.props.specs, this.props.spec,\r\n        this.props.msg);\r\n\r\n    this.state = {\r\n      msgTemplate: null,\r\n      loaded: false,\r\n      spec: props.spec,\r\n      msg: props.msg,\r\n      shouldShow: props.showMsgTemplate,\r\n      targetServerIp: '127.0.0.1',\r\n      targetServerPort: '6666',\r\n      mliType: \"2I\",\r\n      currentDataSet: '',\r\n      errDialogVisible: false,\r\n      errorMessage: '',\r\n      showLoadMessagesDialog: false,\r\n      showTraceInputDialog: false,\r\n      showSaveMsgDialog: false,\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqMenuVisible: false,\r\n      selectedReqMenuItem: null,\r\n      reqClipboardData: null\r\n    };\r\n\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.sendToHost = this.sendToHost.bind(this);\r\n    this.addFieldContent = this.addFieldContent.bind(this);\r\n    this.showErrorDialog = this.showErrorDialog.bind(this);\r\n    this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n    this.processError = this.processError.bind(this);\r\n    this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n    this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n    this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n    this.setTrace = this.setTrace.bind(this);\r\n    this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n    this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n    this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n    this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n    this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n    this.showInfoDialog = this.showInfoDialog.bind(this);\r\n\r\n    this.showMenu = this.showMenu.bind(this);\r\n    this.hideMenu = this.hideMenu.bind(this);\r\n    this.handleMenuClick = this.handleMenuClick.bind(this);\r\n\r\n    this.showResponseDialog = this.showResponseDialog.bind(this);\r\n    this.getTemplateLabel = this.getTemplateLabel.bind(this);\r\n    this.networkSettingsChanged = this.networkSettingsChanged.bind(this);\r\n    this.hideResponse = this.hideResponse.bind(this);\r\n\r\n  }\r\n\r\n  networkSettingsChanged(ip, port, mliType) {\r\n    this.setState(\r\n        {targetServerIp: ip, targetServerPort: port, mliType: mliType})\r\n  }\r\n\r\n  showMenu(event) {\r\n\r\n    this.setState({\r\n      selectedReqMenuItem: event.currentTarget,\r\n      reqMenuVisible: true\r\n    })\r\n\r\n  }\r\n\r\n  hideMenu() {\r\n    this.setState({reqMenuVisible: false})\r\n    this.setState({selectedReqMenuItem: null})\r\n  }\r\n\r\n  showResponseDialog() {\r\n    this.hideMenu()\r\n    this.setState({showResponse: true})\r\n  }\r\n\r\n  hideResponse() {\r\n    this.setState({showResponse: false})\r\n\r\n  }\r\n\r\n  handleMenuClick(event) {\r\n    alert(event.currentTarget)\r\n\r\n    this.setState({selectedReqMenuItem: event.currentTarget})\r\n    this.hideMenu()\r\n  }\r\n\r\n  // Receives the trace as a callback from ParseMessageDialog component\r\n  setTrace(trace) {\r\n    if (trace != null) {\r\n      //console.log(\"trace  = \", trace);\r\n      // now parse this via a API call\r\n\r\n      axios.post(appProps.parseTraceUrl + '/' + this.state.spec.ID + '/'\r\n          + this.state.msg.ID, trace)\r\n      .then(res => {\r\n            console.log(\"parsed msg data\", res.data);\r\n            res.data.parsed_fields.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n\r\n            console.log(\"errr\",e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n\r\n    }\r\n    this.setState({showTraceInputDialog: false})\r\n  }\r\n\r\n  showUnImplementedError() {\r\n    this.setState({\r\n      errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n      errDialogVisible: true\r\n    })\r\n  }\r\n\r\n  closeLoadMsgDialog(selectedMsg) {\r\n    this.setState({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n\r\n    if (selectedMsg != null) {\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.state.spec.ID,\r\n          msgId: this.state.msg.ID,\r\n          dsName: selectedMsg\r\n        }\r\n      }).then(res => {\r\n            console.log(\"saved msg = \", res.data.saved_message);\r\n            res.data.saved_message.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.ID);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  showInfoDialog(msg) {\r\n    this.setState({errDialogVisible: true, errorMessage: msg})\r\n  }\r\n\r\n  msgSaveSuccess(msgName, updated) {\r\n    let type = \"saved\";\r\n    if (updated) {\r\n      type = \"updated\"\r\n    }\r\n    this.showInfoDialog(`Message ${msgName} ${type} successfully.`);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveFailed(e) {\r\n    this.processError(e);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveCancelled() {\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  showSaveMsgDialog() {\r\n\r\n    // build the data and then\r\n    let content = [];\r\n    this.state.msgTemplate.fields.forEach(f => {\r\n      this.addFieldContent(f, content);\r\n    });\r\n    this.setState({saveData: content, showSaveMsgDialog: true})\r\n  }\r\n\r\n  showTraceInputsDialog() {\r\n    this.hideMenu()\r\n    this.setState({showTraceInputDialog: true})\r\n\r\n  }\r\n\r\n  showLoadMessagesDialog() {\r\n    this.hideMenu()\r\n    this.setState({showLoadMessagesDialog: true})\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  addFieldContent(field, content, validationErrors) {\r\n\r\n    let fData = this.state.isoMsg.get(field.ID);\r\n    if (fData.state.selected) {\r\n      if (fieldValidator.validate(field, fData.state.fieldValue,\r\n          validationErrors)) {\r\n        fData.setError(true);\r\n      } else {\r\n        fData.setError(false);\r\n      }\r\n      content.push(\r\n          {ID: field.ID, Name: field.Name, Value: fData.state.fieldValue});\r\n    }\r\n\r\n    field.Children.forEach(cf => {\r\n      if (fData.state.selected) {\r\n        this.addFieldContent(cf, content, validationErrors);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  //sends the message (as JSON) to the API server to be sent to the ISO host\r\n  sendToHost() {\r\n\r\n    this.hideMenu()\r\n    let content = [];\r\n    let validationErrors = [];\r\n    this.state.msgTemplate.fields.forEach(f => {\r\n      this.addFieldContent(f, content, validationErrors);\r\n    });\r\n    //console.log(\"After gathering data = \", content, validationErrors);\r\n\r\n    if (validationErrors.length > 0) {\r\n      let errMsg = \"\";\r\n      validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n      this.setState({errorMessage: errMsg});\r\n      this.showErrorDialog();\r\n      return\r\n    }\r\n\r\n    console.log(content)\r\n    let reqClipboardData = content.reduce((p, c, currentIndex) => {\r\n\r\n      if (currentIndex === 1) {\r\n        return p.Name + \":\" + p.Value + \"\\n\" + c.Name + \":\" + c.Value + \"\\n\";\r\n      }\r\n      return p + c.Name + ':' + c.Value + \"\\n\";\r\n\r\n    });\r\n\r\n    //alert(reqClipboardData)\r\n\r\n    //lets not hide and then show the response segment again\r\n    this.setState({\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqClipboardData: reqClipboardData\r\n    });\r\n\r\n    let postData = 'host=' +\r\n        this.state.targetServerIp + \"&port=\" + this.state.targetServerPort\r\n        + '&mli=' + this.state.mliType\r\n        + '&specId=' + this.state.spec.ID + '&msgId='\r\n        + this.state.msg.ID + \"&msg=\" + JSON.stringify(content);\r\n    //console.log(postData)\r\n    axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n      console.log(\"Response from server\", res.data.response_fields);\r\n      this.setState(\r\n          {showResponse: true, responseData: res.data.response_fields});\r\n\r\n    }).catch(\r\n        e => {\r\n          console.log(\"error = \", e);\r\n          this.processError(e)\r\n        })\r\n\r\n  }\r\n\r\n  processError(e) {\r\n\r\n    if (!e.response) {\r\n      console.log(\"Error = \", e);\r\n      this.setState({\r\n        errorMessage: 'Error: Unable to reach API server',\r\n        errDialogVisible: true\r\n      });\r\n      return\r\n    }\r\n\r\n    console.log(e.response)\r\n\r\n    if (e.response.status === 400) {\r\n      this.setState(\r\n          {errorMessage: e.response.data.error, errDialogVisible: true});\r\n    } else {\r\n      this.setState(\r\n          {\r\n            errorMessage: 'Unexpected error from server - '\r\n                + e.response.status, errDialogVisible: true\r\n          });\r\n    }\r\n  }\r\n\r\n  getTemplateLabel() {\r\n    //alert(this.state.spec + \"// \" + this.state.msg)\r\n    return this.state.spec.Name + \" // \" + this.state.msg.Name;\r\n  }\r\n\r\n  onFieldUpdate(e) {\r\n    //console.log(\"field updated =>\" + e.fieldName)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMessageTemplate(this.props.spec, this.props.msg)\r\n  }\r\n\r\n  getMessageTemplate(pSpec, pMsg) {\r\n    let spec = this.props.specs.find(s => {\r\n      if (s.Name === pSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n    let msg = spec.Messages.find(m => {\r\n      if (m.Name === pMsg) {\r\n        return m;\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    let url = appProps.templateUrl + '/' + spec.ID + \"/\" + msg.ID;\r\n    console.log(url);\r\n    axios.get(url).then(\r\n        res => {\r\n          console.log(res.data);\r\n          let isoMsg = new Map();\r\n          isoMsg.set(\"msg_template\", res.data);\r\n          this.setState(\r\n              {\r\n                spec: spec,\r\n                msg: msg,\r\n                msgTemplate: res.data,\r\n                loaded: true,\r\n                isoMsg: isoMsg\r\n              });\r\n\r\n          console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(\r\n        err => {\r\n          console.log(err)\r\n          this.setState({errorMessage: err, errDialogVisible: true})\r\n        });\r\n  }\r\n\r\n  appendFieldContent(content, field, isoMsg, level) {\r\n    content.push(<IsoField key={field.ID} field={field} isoMsg={isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.loaded === true) {\r\n      this.state.msgTemplate.fields.map(field => {\r\n        this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n      })\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{\r\n          fontFamily: 'lato-regular',\r\n          fontSize: '12px',\r\n          fill: 'aqua'\r\n        }}>\r\n\r\n          <AlertDialog show={this.state.errDialogVisible}\r\n                       msg={this.state.errorMessage}\r\n                       onClose={this.closeErrorDialog}/>\r\n\r\n\r\n          <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                               specId={this.state.spec.ID}\r\n                               msgId={this.state.msg.ID}\r\n                               closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n          <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                              setTrace={this.setTrace}/>\r\n\r\n          <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                             msgId={this.state.msg.ID}\r\n                             initialMessage={this.state.currentDataSet}\r\n                             specId={this.state.spec.ID}\r\n                             data={this.state.saveData}\r\n                             msgName={this.state.currentDataSet}\r\n                             msgSaveSuccess={this.msgSaveSuccess}\r\n                             msgSaveFailed={this.msgSaveFailed}\r\n                             msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n          <NetworkSettings onChange={this.networkSettingsChanged}/>\r\n\r\n\r\n          <div align={\"left\"}\r\n               style={{\r\n                 align: \"left\",\r\n                 display: \"inline-block\",\r\n                 width: \"40%\",\r\n                 float: \"left\",\r\n                 fill: 'aqua'\r\n               }}>\r\n\r\n            <div>\r\n\r\n              <ButtonGroup size={\"small\"} color={\"primary\"} fullWidth={true}\r\n                           variant={\"contained\"}>\r\n                <Button\r\n                    onClick={this.showTraceInputsDialog}>Parse</Button>\r\n                <Button\r\n                    onClick={this.showLoadMessagesDialog}>Load</Button>\r\n                <Button\r\n                    onClick={this.showSaveMsgDialog}>Save</Button>\r\n                <Button onClick={this.sendToHost}>Send</Button>\r\n                <Button onClick={this.showResponseDialog}\r\n                        disabled={this.state.responseData == null}>Show\r\n                  Response</Button>\r\n              </ButtonGroup>\r\n\r\n            </div>\r\n\r\n            {/*TODO:: pull this into a separate component*/}\r\n            <Paper variation={\"outlined\"} style={{verticalAlign: \"middle\"}}>\r\n              <table border=\"0\" align={\"center\"}\r\n                     style={{align: \"center\", marginTop: \"10px\", width: \"80%\"}}>\r\n                <thead>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"15px\",\r\n                  borderBottom: 'solid',\r\n                  borderColor: 'blue'\r\n                }}>\r\n                  <td colSpan=\"3\" align={\"center\"}>\r\n\r\n                    {/*\r\n                      <div style={{display: \"inline-block\", float: \"left\"}}>\r\n                        <IconButton\r\n                            aria-label=\"more\"\r\n                            aria-controls=\"long-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={this.showMenu}\r\n                        >\r\n                          <MoreVert/>\r\n                        </IconButton>\r\n\r\n                        <Menu\r\n                            id=\"fade-menu\"\r\n                            anchorEl={this.state.selectedReqMenuItem}\r\n                            getContentAnchorEl={null}\r\n                            keepMounted\r\n                            open={this.state.reqMenuVisible}\r\n                            onClose={this.hideMenu}\r\n                            TransitionComponent={Fade}\r\n                        >\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showTraceInputsDialog}>Parse</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showLoadMessagesDialog}>Load\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showSaveMsgDialog}>Save\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true} onClick={this.sendToHost}>Send\r\n                            Message</MenuItem>\r\n                          <MenuItem dense={true}\r\n                                    onClick={this.showResponseDialog}>Show\r\n                            Response</MenuItem>\r\n                        </Menu>\r\n                      </div>\r\n                    */}\r\n                    <div\r\n                        style={{display: \"inline-block\"}}>{this.getTemplateLabel()}</div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                  <td align={\"center\"}>Selection</td>\r\n                  <td align={\"center\"} style={{width: '35%'}}> Field</td>\r\n                  <td align={\"center\"} style={{width: '70%'}}>Field Data\r\n                  </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {content}\r\n                </tbody>\r\n              </table>\r\n            </Paper>\r\n\r\n            {/*<div style={{float: \"right\"}}>*/}\r\n            <ResponseSegment show={this.state.showResponse}\r\n                             reqData={this.state.reqClipboardData}\r\n                             onClose={this.hideResponse}\r\n                             data={this.state.responseData}\r\n                             dialogTitle={\"Response - [\"\r\n                             + this.getTemplateLabel() + \"]\"}\r\n                             msgTemplate={this.state.msgTemplate}/>\r\n\r\n          </div>\r\n\r\n\r\n          <div style={{height: \"10px\"}}>{' '}</div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n","import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport appProps from \"../../Utils/Properties\";\r\nimport {Folder, Home, Message} from \"@material-ui/icons\"\r\n\r\n// SpecTree displays a tree of all the available specifications and the messages\r\n// defined under the spec\r\nclass SpecTree extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      specs: [],\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.messageClicked = this.messageClicked.bind(this);\r\n  }\r\n\r\n  messageClicked(event) {\r\n    // FIXME:: This is a hack! There needs to be a better way like onSelect\r\n    let specId = event.target.parentElement.parentElement.getAttribute(\"sid\");\r\n    let msgId = event.target.parentElement.parentElement.getAttribute(\"mid\");\r\n\r\n    this.props.msgSelected(specId, msgId);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(\"allSpecs\",res.data);\r\n      this.setState({specs: res.data.specs, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  buildMessages(spec) {\r\n    let content = []\r\n    spec.Messages.forEach(m => {\r\n      content.push(<TreeItem nodeId={\"nodeId_\" + spec.ID + \"_\" + m.ID}\r\n                             sid={spec.ID} mid={m.ID}\r\n                             label={m.Name}\r\n                             onClick={this.messageClicked}/>)\r\n    });\r\n    return content\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.loaded === true) {\r\n\r\n      let content = [];\r\n      this.state.specs.forEach(s => {\r\n\r\n        content.push(<TreeItem align=\"left\" nodeId={\"nodeId_\" + s.ID}\r\n                               icon={<Folder color={\"primary\"}/>}\r\n                               label={s.Name}>{this.buildMessages(\r\n            s)}</TreeItem>);\r\n\r\n      });\r\n\r\n      let treeContent = <TreeItem nodeId={\"nodeId_0\"}\r\n                                  icon={<Home color={\"primary\"}/>}\r\n                                  label={\"ISO8583 Specifications\"}>{content}</TreeItem>;\r\n\r\n      return (<React.Fragment>\r\n            <TreeView\r\n                defaultExpanded={['nodeId_0']}\r\n                defaultCollapseIcon={<ExpandMoreIcon/>}\r\n                defaultExpandIcon={<ChevronRightIcon/>}\r\n                defaultParentIcon={<Folder color={\"primary\"}/>}\r\n                defaultEndIcon={<Message color=\"primary\"/>}\r\n            >\r\n              {treeContent}\r\n            </TreeView>\r\n\r\n\r\n          </React.Fragment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default SpecTree;","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from '../Iso/MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport SpecTree from \"./SpecTree/SpecTree\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgSelected = this.msgSelected.bind(this);\r\n    this.getSpecByID = this.getSpecByID.bind(this);\r\n\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  msgSelected(specId, msgId) {\r\n\r\n    console.log(specId, msgId)\r\n    console.log(this.state.specs)\r\n    let spec = this.getSpecByID(parseInt(specId))\r\n    console.log(\"spec = \", spec)\r\n    let msg = null;\r\n    spec.Messages.forEach(m => {\r\n      if (m.ID === parseInt(msgId)) {\r\n        msg = m;\r\n      }\r\n    })\r\n\r\n    this.setState(\r\n        {loaded: true, currentSpec: spec.Name, currentSpecMsg: msg.Name});\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data.specs, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n          <div>\r\n            <Modal show={this.state.errDialogVisible}\r\n                   onHide={this.closeErrorDialog}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <div style={{\r\n              float: \"left\",\r\n              display: \"inline-block\",\r\n              marginRight: \"20px\",\r\n              marginLeft: \"20px\",\r\n              backgroundColor:'#fbfff0'\r\n\r\n            }}>\r\n              <SpecTree msgSelected={this.msgSelected}/>\r\n            </div>\r\n            <div align=\"center\" style={{backgroundColor:'#fbfff0'}}>\r\n              {\r\n                this.state.loaded && this.state.currentSpec !== \"Select\" ?\r\n                    <MessageStructure key={this.state.currentSpec + \"_\" + msg}\r\n                                      ref={this.msgTemplateRef}\r\n                                      specs={this.state.specs}\r\n                                      spec={this.state.currentSpec}\r\n                                      msg={this.state.currentSpecMsg}/>\r\n                    : null\r\n              }\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value,\r\n      currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n      let spec = this.getSpecByName(event.target.value);\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (\r\n        <select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                onChange={this.specChanged}>\r\n          <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n          {\r\n            this.state.specs.map((s) => {\r\n              return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n            })\r\n          }\r\n\r\n        </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {\r\n              spec.Messages.map(msg => {\r\n                return <option key={msg.ID}\r\n                               value={msg.Name}>{msg.Name}</option>\r\n              })\r\n            }\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByID(specId) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.ID === specId) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/Navigation/NavBar.js'\r\n\r\nfunction App() {\r\n  return (\r\n      <div style={{backgroundColor: '#fbfff0'}}>\r\n        <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\r\n          Simulator</h1>\r\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\r\n           href={\"/iso/home\"} target={\"_blank\"} rel={\"noopener noreferrer\"}>[Non\r\n          React App]</a>\r\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\r\n           href={\"/iso/v0/server\"} target={\"_blank\"}\r\n           rel={\"noopener noreferrer\"}>[Manage Servers]</a>\r\n\r\n        <div className=\"App\">\r\n          <NavBar/>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\r\nReactDOM.render(<App style={{backgroundColor:'#fbfff0'}}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}